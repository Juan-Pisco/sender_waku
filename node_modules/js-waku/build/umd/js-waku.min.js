!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.jswaku=t():e.jswaku=t()}(this,(function(){return(()=>{var e,t={63607:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.proto=t.StoreCodec=t.WakuStore=t.PageDirection=t.waku_store=t.RelayCodecs=t.WakuRelay=t.waku_relay=t.PushResponse=t.LightPushCodec=t.WakuLightPush=t.waku_light_push=t.getPublicKey=t.generateSymmetricKey=t.generatePrivateKey=t.WakuMessage=t.waku_message=t.DefaultPubSubTopic=t.Waku=t.waku=t.utils=t.enr=t.discovery=t.getNodesFromHostedJson=void 0;var n=r(48994);Object.defineProperty(t,"getNodesFromHostedJson",{enumerable:!0,get:function(){return n.getNodesFromHostedJson}}),t.discovery=s(r(48994)),t.enr=s(r(69460)),t.utils=s(r(61721)),t.waku=s(r(90607));var a=r(90607);Object.defineProperty(t,"Waku",{enumerable:!0,get:function(){return a.Waku}}),Object.defineProperty(t,"DefaultPubSubTopic",{enumerable:!0,get:function(){return a.DefaultPubSubTopic}}),t.waku_message=s(r(92560));var u=r(92560);Object.defineProperty(t,"WakuMessage",{enumerable:!0,get:function(){return u.WakuMessage}});var c=r(48340);Object.defineProperty(t,"generatePrivateKey",{enumerable:!0,get:function(){return c.generatePrivateKey}}),Object.defineProperty(t,"generateSymmetricKey",{enumerable:!0,get:function(){return c.generateSymmetricKey}}),Object.defineProperty(t,"getPublicKey",{enumerable:!0,get:function(){return c.getPublicKey}}),t.waku_light_push=s(r(17087));var d=r(17087);Object.defineProperty(t,"WakuLightPush",{enumerable:!0,get:function(){return d.WakuLightPush}}),Object.defineProperty(t,"LightPushCodec",{enumerable:!0,get:function(){return d.LightPushCodec}}),Object.defineProperty(t,"PushResponse",{enumerable:!0,get:function(){return d.PushResponse}}),t.waku_relay=s(r(22979));var l=r(22979);Object.defineProperty(t,"WakuRelay",{enumerable:!0,get:function(){return l.WakuRelay}}),Object.defineProperty(t,"RelayCodecs",{enumerable:!0,get:function(){return l.RelayCodecs}}),t.waku_store=s(r(95960));var p=r(95960);Object.defineProperty(t,"PageDirection",{enumerable:!0,get:function(){return p.PageDirection}}),Object.defineProperty(t,"WakuStore",{enumerable:!0,get:function(){return p.WakuStore}}),Object.defineProperty(t,"StoreCodec",{enumerable:!0,get:function(){return p.StoreCodec}}),t.proto=s(r(15888))},94134:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Bootstrap=void 0;const i=o(r(11227)),s=r(46584),n=r(66216),a=r(48994),u=i.default("waku:discovery:bootstrap");class c{constructor(e){const t=e.maxPeers??c.DefaultMaxPeers;if(e.default)u("Use hosted list of peers."),this.getBootstrapPeers=a.getNodesFromHostedJson.bind({},void 0,void 0,t);else if(void 0!==e.peers&&e.peers.length>0){u("Use provided list of peers.");const r=e.peers.map((e=>new s.Multiaddr(e))),o=a.getPseudoRandomSubset(r,t);this.getBootstrapPeers=()=>Promise.resolve(o)}else if("function"==typeof e.getPeers){u("Bootstrap: Use provided getPeers function.");const r=e.getPeers;this.getBootstrapPeers=async()=>{const e=await r();return a.getPseudoRandomSubset(e,t).map((e=>new s.Multiaddr(e)))}}else if(e.enrUrl){const r=e.enrUrl;u("Use provided EIP-1459 ENR Tree URL.");const o=n.DnsNodeDiscovery.dnsOverHttp();this.getBootstrapPeers=async()=>{const e=await o.getPeers(t,[r]);return u(`Found ${e.length} peers`),e.map((e=>e.getFullMultiaddrs())).flat()}}else u("No bootstrap method specified, no peer will be returned"),this.getBootstrapPeers=void 0}}t.Bootstrap=c,c.DefaultMaxPeers=1},66216:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DnsNodeDiscovery=void 0;const i=o(r(69282)),s=r(11227),n=r(69460),a=r(31613),u=r(98395),c=s.debug("waku:discovery:dns");class d{constructor(e){this._errorTolerance=10,this._DNSTreeCache={},this.dns=e}static dnsOverHttp(e){const t=new a.DnsOverHttps(e);return new d(t)}async getPeers(e,t){let r=0;const o=[],i=Math.floor(Math.random()*t.length),{publicKey:s,domain:n}=u.ENRTree.parseTree(t[i]);for(;o.length<e&&r<e+this._errorTolerance;){const e={domain:n,publicKey:s,visits:{}},t=await this._search(n,e);t&&l(t,o)&&(o.push(t),c(`got new peer candidate from DNS address=${t.nodeId}@${t.ip}`)),r++}return o}async _search(e,t){const r=await this._getTXTRecord(e,t);let o,i;t.visits[e]=!0;const s=function(e){return e.startsWith(u.ENRTree.ROOT_PREFIX)?u.ENRTree.ROOT_PREFIX:e.startsWith(u.ENRTree.BRANCH_PREFIX)?u.ENRTree.BRANCH_PREFIX:e.startsWith(u.ENRTree.RECORD_PREFIX)?u.ENRTree.RECORD_PREFIX:""}(r);try{switch(s){case u.ENRTree.ROOT_PREFIX:return o=u.ENRTree.parseAndVerifyRoot(r,t.publicKey),await this._search(o,t);case u.ENRTree.BRANCH_PREFIX:return i=u.ENRTree.parseBranch(r),o=function(e,t){const r={};for(const[o,i]of e.entries())t.visits[i]&&(r[o]=!0);if(Object.keys(r).length===e.length)throw new Error("Unresolvable circular path detected");let o;do{o=Math.floor(Math.random()*e.length)}while(r[o]);return e[o]}(i,t),await this._search(o,t);case u.ENRTree.RECORD_PREFIX:return n.ENR.decodeTxt(r);default:return null}}catch(t){return c(`Failed to search DNS tree ${s} at subdomain ${e}: ${t}`),null}}async _getTXTRecord(e,t){if(this._DNSTreeCache[e])return this._DNSTreeCache[e];const r=e!==t.domain?`${e}.${t.domain}`:t.domain,o=await this.dns.resolveTXT(r);i.default(o.length,"Received empty result array while fetching TXT record"),i.default(o[0].length,"Received empty TXT record");const s=o.join("");return this._DNSTreeCache[e]=s,s}}function l(e,t){if(!e||!e.nodeId)return!1;for(const r of t)if(e.nodeId===r.nodeId)return!1;return!0}t.DnsNodeDiscovery=d},31613:(e,t,r)=>{"use strict";var o=r(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.DnsOverHttps=void 0;const i=r(46176),{cloudflare:s,google:n,opendns:a}=i.endpoints;t.DnsOverHttps=class{constructor(e=[s,n,a]){this.endpoints=e}async resolveTXT(e){const t=(await i.query({questions:[{type:"TXT",name:e}]})).answers.map((e=>e.data)),r=[];return t.forEach((e=>{"string"==typeof e?r.push(e):Array.isArray(e)?e.forEach((e=>{"string"==typeof e?r.push(e):r.push(o.from(e).toString("utf-8"))})):r.push(o.from(e).toString("utf-8"))})),r}}},98395:function(e,t,r){"use strict";var o=r(48764).Buffer,i=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&i(t,e,r);return s(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ENRTree=void 0;const u=a(r(69282)),c=a(r(45772)),d=n(r(89090)),l=r(17221),p=r(69460),f=r(61721);class h{static parseAndVerifyRoot(e,t){u.default(e.startsWith(this.ROOT_PREFIX),`ENRTree root entry must start with '${this.ROOT_PREFIX}'`);const r=h.parseRootValues(e),i=d.decode.asBytes(t),s=e.split(" sig")[0],n=o.from(s),a=c.default.toBuffer(r.signature).slice(0,64),p=o.from(i),y=l.ecdsaVerify(a,f.keccak256Buf(n),p);return u.default(y,"Unable to verify ENRTree root signature"),r.eRoot}static parseRootValues(e){const t=e.match(/^enrtree-root:v1 e=([^ ]+) l=([^ ]+) seq=(\d+) sig=([^ ]+)$/);u.default.ok(Array.isArray(t),"Could not parse ENRTree root entry"),t.shift();const[r,o,i,s]=t;return u.default.ok(r,"Could not parse 'e' value from ENRTree root entry"),u.default.ok(o,"Could not parse 'l' value from ENRTree root entry"),u.default.ok(i,"Could not parse 'seq' value from ENRTree root entry"),u.default.ok(s,"Could not parse 'sig' value from ENRTree root entry"),{eRoot:r,lRoot:o,seq:Number(i),signature:s}}static parseTree(e){u.default(e.startsWith(this.TREE_PREFIX),`ENRTree tree entry must start with '${this.TREE_PREFIX}'`);const t=e.match(/^enrtree:\/\/([^@]+)@(.+)$/);u.default.ok(Array.isArray(t),"Could not parse ENRTree tree entry"),t.shift();const[r,o]=t;return u.default.ok(r,"Could not parse public key from ENRTree tree entry"),u.default.ok(o,"Could not parse domain from ENRTree tree entry"),{publicKey:r,domain:o}}static parseBranch(e){return u.default(e.startsWith(this.BRANCH_PREFIX),`ENRTree branch entry must start with '${this.BRANCH_PREFIX}'`),e.split(this.BRANCH_PREFIX)[1].split(",")}}t.ENRTree=h,h.RECORD_PREFIX=p.ENR.RECORD_PREFIX,h.TREE_PREFIX="enrtree:",h.BRANCH_PREFIX="enrtree-branch:",h.ROOT_PREFIX="enrtree-root:"},77607:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getNodesFromHostedJson=void 0;const i=o(r(9669)),s=o(r(11227)),n=r(46584),a=r(48994),u=s.default("waku:discovery");t.getNodesFromHostedJson=async function(e=["fleets","wakuv2.prod","waku-websocket"],t="https://fleets.status.im/",r=1){if(r<=0)return[];let o=(await i.default.get(t,{headers:{"Content-Type":"application/json"}})).data;for(const t of e){if(void 0===o[t])throw u(`Failed to retrieve bootstrap nodes: ${t} does not exist on `,o),`Failed to retrieve bootstrap nodes: ${t} does not exist on ${JSON.stringify(o)}`;o=o[t]}if(Array.isArray(o))return a.getPseudoRandomSubset(o,r).map((e=>new n.Multiaddr(e)));if("string"==typeof o)return[new n.Multiaddr(o)];if("object"==typeof o)return o=Object.values(o),o=o.map((e=>new n.Multiaddr(e))),a.getPseudoRandomSubset(o,r);throw`Failed to retrieve bootstrap nodes: response format is not supported: ${JSON.stringify(o)}`}},48994:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPseudoRandomSubset=t.ENRTree=t.DnsOverHttps=t.DnsNodeDiscovery=t.Bootstrap=t.getNodesFromHostedJson=void 0;const o=r(60663);var i=r(77607);Object.defineProperty(t,"getNodesFromHostedJson",{enumerable:!0,get:function(){return i.getNodesFromHostedJson}});var s=r(94134);Object.defineProperty(t,"Bootstrap",{enumerable:!0,get:function(){return s.Bootstrap}});var n=r(66216);Object.defineProperty(t,"DnsNodeDiscovery",{enumerable:!0,get:function(){return n.DnsNodeDiscovery}});var a=r(31613);Object.defineProperty(t,"DnsOverHttps",{enumerable:!0,get:function(){return a.DnsOverHttps}});var u=r(98395);Object.defineProperty(t,"ENRTree",{enumerable:!0,get:function(){return u.ENRTree}}),t.getPseudoRandomSubset=function(e,t){return e.length<=t?e:o.shuffle(e).slice(0,t)}},52611:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MULTIADDR_LENGTH_SIZE=t.ERR_NO_SIGNATURE=t.ERR_INVALID_ID=t.MAX_RECORD_SIZE=void 0,t.MAX_RECORD_SIZE=300,t.ERR_INVALID_ID="Invalid record id",t.ERR_NO_SIGNATURE="No valid signature found",t.MULTIADDR_LENGTH_SIZE=2},17878:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createNodeId=void 0;const o=r(61721);t.createNodeId=function(e){if(32!==e.length)throw new Error("NodeId must be 32 bytes in length");return o.bufToHex(e)}},36995:function(e,t,r){"use strict";var o=r(48764).Buffer,i=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&i(t,e,r);return s(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ENR=void 0;const u=a(r(45772)),c=r(40475),d=r(46584),l=a(r(99918)),p=n(r(51675)),f=r(94676),h=r(52611),y=r(22569),g=n(r(64670));class b extends Map{constructor(e={},t=1n,r=null){super(Object.entries(e)),this.seq=t,this.signature=r}static createV4(e,t={}){return new b({...t,id:o.from("v4"),secp256k1:e})}static createFromPeerId(e,t={}){const r=y.createKeypairFromPeerId(e);if(r.type===y.KeypairType.secp256k1)return b.createV4(r.publicKey,t);throw new Error}static decodeFromValues(e){if(!Array.isArray(e))throw new Error("Decoded ENR must be an array");if(e.length%2!=0)throw new Error("Decoded ENR must have an even number of elements");const[t,r,...i]=e;if(!t||Array.isArray(t))throw new Error("Decoded ENR invalid signature: must be a byte array");if(!r||Array.isArray(r))throw new Error("Decoded ENR invalid sequence number: must be a byte array");const s={};for(let e=0;e<i.length;e+=2)s[i[e].toString()]=o.from(i[e+1]);const n=new b(s,c.toBigIntBE(r),t);if(!n.verify(p.encode([r,...i]),t))throw new Error("Unable to verify ENR signature");return n}static decode(e){const t=p.decode(e);return b.decodeFromValues(t)}static decodeTxt(e){if(!e.startsWith(this.RECORD_PREFIX))throw new Error(`"string encoded ENR must start with '${this.RECORD_PREFIX}'`);return b.decode(u.default.toBuffer(e.slice(4)))}set(e,t){return this.signature=null,this.seq++,super.set(e,t)}get id(){const e=this.get("id");if(!e)throw new Error("id not found.");return e.toString("utf8")}get keypairType(){if("v4"===this.id)return y.KeypairType.secp256k1;throw new Error(h.ERR_INVALID_ID)}get publicKey(){if("v4"===this.id)return this.get("secp256k1");throw new Error(h.ERR_INVALID_ID)}get keypair(){return y.createKeypair(this.keypairType,void 0,this.publicKey)}get peerId(){return y.createPeerIdFromKeypair(this.keypair)}get nodeId(){if("v4"===this.id)return g.nodeId(this.publicKey);throw new Error(h.ERR_INVALID_ID)}get ip(){const e=this.get("ip");return e?l.default.toString(d.protocols.names.ip4.code,e):void 0}set ip(e){e?this.set("ip",l.default.toBytes(d.protocols.names.ip4.code,e)):this.delete("ip")}get tcp(){const e=this.get("tcp");return e?Number(l.default.toString(d.protocols.names.tcp.code,e)):void 0}set tcp(e){void 0===e?this.delete("tcp"):this.set("tcp",l.default.toBytes(d.protocols.names.tcp.code,e))}get udp(){const e=this.get("udp");return e?Number(l.default.toString(d.protocols.names.udp.code,e)):void 0}set udp(e){void 0===e?this.delete("udp"):this.set("udp",l.default.toBytes(d.protocols.names.udp.code,e))}get ip6(){const e=this.get("ip6");return e?l.default.toString(d.protocols.names.ip6.code,e):void 0}set ip6(e){e?this.set("ip6",l.default.toBytes(d.protocols.names.ip6.code,e)):this.delete("ip6")}get tcp6(){const e=this.get("tcp6");return e?Number(l.default.toString(d.protocols.names.tcp.code,e)):void 0}set tcp6(e){void 0===e?this.delete("tcp6"):this.set("tcp6",l.default.toBytes(d.protocols.names.tcp.code,e))}get udp6(){const e=this.get("udp6");return e?Number(l.default.toString(d.protocols.names.udp.code,e)):void 0}set udp6(e){void 0===e?this.delete("udp6"):this.set("udp6",l.default.toBytes(d.protocols.names.udp.code,e))}get multiaddrs(){const e=this.get("multiaddrs");if(e){const t=[];try{let r=0;for(;r<e.length;){const i=e.slice(r,r+2),s=o.from(i).readUInt16BE(0),n=e.slice(r+h.MULTIADDR_LENGTH_SIZE,r+s+h.MULTIADDR_LENGTH_SIZE),a=new d.Multiaddr(n);t.push(a),r+=s+h.MULTIADDR_LENGTH_SIZE}}catch(e){throw new Error("Invalid value in multiaddrs field")}return t}}set multiaddrs(e){if(void 0===e)this.delete("multiaddrs");else{let t=o.from([]);e.forEach((e=>{if(e.getPeerId())throw new Error("`multiaddr` field MUST not contain peer id");const r=e.bytes;let i=o.alloc(2);if(i.writeUInt16BE(r.length,0)!==h.MULTIADDR_LENGTH_SIZE)throw new Error(`Internal error: unsigned 16-bit integer was not written in ${h.MULTIADDR_LENGTH_SIZE} bytes`);i=o.concat([i,r]),t=o.concat([t,i])})),this.set("multiaddrs",t)}}getLocationMultiaddr(e){if("udp"===e)return this.getLocationMultiaddr("udp4")||this.getLocationMultiaddr("udp6");if("tcp"===e)return this.getLocationMultiaddr("tcp4")||this.getLocationMultiaddr("tcp6");const t=e.endsWith("6"),r=this.get(t?"ip6":"ip");if(!r)return;const o=e.startsWith("udp"),i=e.startsWith("tcp");let s,n;if(o)s="udp",n=t?this.get("udp6"):this.get("udp");else{if(!i)return;s="tcp",n=t?this.get("tcp6"):this.get("tcp")}if(!n)return;const a=d.protocols.names[t?"ip6":"ip4"],u=a.size/8,c=d.protocols.names[s],l=f.encode(c.code),p=new Uint8Array(3+u+l.length);return p[0]=a.code,p.set(r,1),p.set(l,1+u),p.set(n,1+u+l.length),new d.Multiaddr(p)}setLocationMultiaddr(e){const t=e.protoNames();if(2!==t.length&&"udp"!==t[1]&&"tcp"!==t[1])throw new Error("Invalid multiaddr");const r=e.tuples();if(!r[0][1]||!r[1][1])throw new Error("Invalid multiaddr");4===r[0][0]?(this.set("ip",r[0][1]),this.set(t[1],r[1][1])):(this.set("ip6",r[0][1]),this.set(t[1]+"6",r[1][1]))}getFullMultiaddr(e){const t=this.getLocationMultiaddr(e);if(t)return t.encapsulate(`/p2p/${this.peerId.toB58String()}`)}getFullMultiaddrs(){return this.multiaddrs?this.multiaddrs.map((e=>e.encapsulate(`/p2p/${this.peerId.toB58String()}`))):[]}verify(e,t){if(!this.get("id")||"v4"!==this.id)throw new Error(h.ERR_INVALID_ID);if(!this.publicKey)throw new Error("Failed to verify ENR: No public key");return g.verify(this.publicKey,e,t)}sign(e,t){if("v4"!==this.id)throw new Error(h.ERR_INVALID_ID);return this.signature=g.sign(t,e),this.signature}encodeToValues(e){const t=Array.from(this.keys()).sort(((e,t)=>e.localeCompare(t))).map((e=>[e,this.get(e)])).flat();if(t.unshift(Number(this.seq)),e)t.unshift(this.sign(p.encode(t),e));else{if(!this.signature)throw new Error(h.ERR_NO_SIGNATURE);t.unshift(this.signature)}return t}encode(e){const t=p.encode(this.encodeToValues(e));if(t.length>=h.MAX_RECORD_SIZE)throw new Error("ENR must be less than 300 bytes");return t}encodeTxt(e){return b.RECORD_PREFIX+u.default.encode(this.encode(e))}}t.ENR=b,b.RECORD_PREFIX="enr:"},69460:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},n=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.v4=void 0;const a=s(r(64670));t.v4=a,n(r(52611),t),n(r(36995),t),n(r(26734),t),n(r(17878),t),n(r(22569),t)},77970:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ERR_INVALID_KEYPAIR_TYPE=t.ERR_TYPE_NOT_IMPLEMENTED=void 0,t.ERR_TYPE_NOT_IMPLEMENTED="Keypair type not implemented",t.ERR_INVALID_KEYPAIR_TYPE="Invalid keypair type"},22569:function(e,t,r){"use strict";var o=r(48764).Buffer,i=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||i(t,e,r)},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createKeypairFromPeerId=t.createPeerIdFromKeypair=t.createKeypair=t.generateKeypair=void 0;const a=r(82204),u=n(r(18370)),c=n(r(88785)),{keysPBM:d,supportedKeys:l}=a.keys,p=r(77970),f=r(91175),h=r(57922);function y(e,t,r){if(e===h.KeypairType.secp256k1)return new f.Secp256k1Keypair(t,r);throw new Error(p.ERR_TYPE_NOT_IMPLEMENTED)}s(r(57922),t),s(r(91175),t),t.generateKeypair=async function(e){if(e===h.KeypairType.secp256k1)return await f.Secp256k1Keypair.generate();throw new Error(p.ERR_TYPE_NOT_IMPLEMENTED)},t.createKeypair=y,t.createPeerIdFromKeypair=function(e){if(e.type===h.KeypairType.secp256k1){const t=e.hasPrivateKey()?new l.secp256k1.Secp256k1PrivateKey(e.privateKey,e.publicKey):void 0,r=new l.secp256k1.Secp256k1PublicKey(e.publicKey),o=u.default.encode(r.bytes,"identity");return new c.default(o,t,r)}throw new Error(p.ERR_TYPE_NOT_IMPLEMENTED)},t.createKeypairFromPeerId=function(e){const t=d.PublicKey.decode(e.pubKey.bytes);return y(t.Type,e.privKey?o.from(e.privKey.marshal()):void 0,o.from(t.Data))}},91175:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Secp256k1Keypair=t.secp256k1PublicKeyToRaw=t.secp256k1PublicKeyToFull=t.secp256k1PublicKeyToCompressed=void 0;const a=r(48764),u=n(r(55835)),c=s(r(17221)),d=r(57922);function l(e){return 64===e.length&&(e=a.Buffer.concat([a.Buffer.from([4]),e])),a.Buffer.from(c.publicKeyConvert(e,!0))}t.secp256k1PublicKeyToCompressed=l,t.secp256k1PublicKeyToFull=function(e){return 64===e.length?a.Buffer.concat([a.Buffer.from([4]),e]):a.Buffer.from(c.publicKeyConvert(e,!1))},t.secp256k1PublicKeyToRaw=function(e){return a.Buffer.from(c.publicKeyConvert(e,!1).slice(1))};const p=class e extends d.AbstractKeypair{constructor(e,t){let r=t;r&&(r=l(r)),super(e,r),this.type=d.KeypairType.secp256k1}static async generate(){const t=a.Buffer.from(await function(e){if("undefined"!=typeof window&&window&&window.crypto){const e=new Uint8Array(32);return window.crypto.getRandomValues(e),e}return u.default.randomBytes(32)}()),r=c.publicKeyCreate(t);return new e(t,a.Buffer.from(r))}privateKeyVerify(e=this._privateKey){return!e||c.privateKeyVerify(e)}publicKeyVerify(e=this._publicKey){return!e||c.publicKeyVerify(e)}sign(e){const{signature:t,recid:r}=c.ecdsaSign(e,this.privateKey);return a.Buffer.concat([t,a.Buffer.from([r])])}verify(e,t){return c.ecdsaVerify(t,e,this.publicKey)}};t.Secp256k1Keypair=p},57922:(e,t)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractKeypair=t.KeypairType=void 0,(r=t.KeypairType||(t.KeypairType={}))[r.rsa=0]="rsa",r[r.ed25519=1]="ed25519",r[r.secp256k1=2]="secp256k1",t.AbstractKeypair=class{constructor(e,t){if((this._privateKey=e)&&!this.privateKeyVerify())throw new Error("Invalid private key");if((this._publicKey=t)&&!this.publicKeyVerify())throw new Error("Invalid private key")}get privateKey(){if(!this._privateKey)throw new Error;return this._privateKey}get publicKey(){if(!this._publicKey)throw new Error;return this._publicKey}privateKeyVerify(){return!0}publicKeyVerify(){return!0}hasPrivateKey(){return Boolean(this._privateKey)}}},26734:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},64670:function(e,t,r){"use strict";var o=r(48764).Buffer,i=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&i(t,e,r);return s(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ENRKeyPair=t.nodeId=t.verify=t.sign=t.publicKey=t.createPrivateKey=t.hash=void 0;const u=a(r(55835)),c=r(91094),d=n(r(17221)),l=r(17878);function p(e){return o.from(c.keccak256.arrayBuffer(e))}async function f(){return o.from(await function(e){if("undefined"!=typeof window&&window&&window.crypto){const e=new Uint8Array(32);return window.crypto.getRandomValues(e),e}return u.default.randomBytes(32)}())}function h(e){return o.from(d.publicKeyCreate(e))}function y(e,t){const{signature:r}=d.ecdsaSign(p(t),e);return o.from(r)}function g(e,t,r){return d.ecdsaVerify(r.slice(0,64),p(t),e)}function b(e){const t=d.publicKeyConvert(e,!1);return l.createNodeId(p(t.slice(1)))}t.hash=p,t.createPrivateKey=f,t.publicKey=h,t.sign=y,t.verify=g,t.nodeId=b;class m{constructor(e,t,r){this.nodeId=e,this.privateKey=t,this.publicKey=r}static async create(e){if(e&&!d.privateKeyVerify(e))throw new Error("Invalid private key");const t=e||await f(),r=h(t),o=b(r);return new m(o,t,r)}sign(e){return y(this.privateKey,e)}verify(e,t){return g(this.publicKey,e,t)}}t.ENRKeyPair=m},65187:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPeersForProtocol=t.selectRandomPeer=void 0,t.selectRandomPeer=function(e){if(0!==e.length)return e[Math.round(Math.random()*(e.length-1))]},t.getPeersForProtocol=function(e,t){return Array.from(e.peerStore.peers.values()).filter((e=>e.protocols.includes(t)))}},61721:(e,t,r)=>{"use strict";var o=r(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.keccak256Buf=t.equalByteArrays=t.bufToHex=t.hexToBuf=void 0;const i=r(91094);function s(e){return"string"==typeof e?o.from(e.replace(/^0x/i,""),"hex"):o.from(e)}t.hexToBuf=s,t.bufToHex=function(e){return o.from(e).toString("hex")},t.equalByteArrays=function(e,t){let r,i;return r="string"==typeof e?s(e):o.from(e),i="string"==typeof t?s(t):o.from(t),0===r.compare(i)},t.keccak256Buf=function(e){return o.from(i.keccak256.arrayBuffer(e))}},90607:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Waku=t.DefaultPubSubTopic=t.DefaultRelayKeepAliveValueSecs=t.DefaultPingKeepAliveValueSecs=void 0;const i=r(88895),s=o(r(11227)),n=o(r(51613)),a=o(r(63100)),u=o(r(1267)),c=o(r(29846)),d=o(r(70040)),l=o(r(75466)),p=r(46584),f=o(r(88785)),h=r(48994),y=r(65187),g=r(17087),b=r(92560),m=r(22979),v=r(99123),_=r(95960),R=c.default.prototype[Symbol.toStringTag];t.DefaultPingKeepAliveValueSecs=0,t.DefaultRelayKeepAliveValueSecs=300,t.DefaultPubSubTopic="/waku/2/default-waku/proto";const P=s.default("waku:waku");class T{constructor(e,r,o,i){this.libp2p=r,this.relay=r.pubsub,this.store=o,this.lightPush=i,this.pingKeepAliveTimers={},this.relayKeepAliveTimers={};const s=e.pingKeepAlive||t.DefaultPingKeepAliveValueSecs,n=e.relayKeepAlive||t.DefaultRelayKeepAliveValueSecs;r.connectionManager.on("peer:connect",(e=>{this.startKeepAlive(e.remotePeer,s,n)})),r.connectionManager.on("peer:disconnect",(e=>{this.stopKeepAlive(e.remotePeer)})),e?.decryptionKeys?.forEach((e=>{this.addDecryptionKey(e)}))}static async create(e){const t=Object.assign({},e?.libp2p);if(t.config=Object.assign({transport:{[R]:{filter:d.default.all}}},e?.libp2p?.config),e?.pubSubTopic&&(t.config.pubsub=Object.assign({pubSubTopic:e.pubSubTopic},t.config.pubsub)),t.modules=Object.assign({},e?.libp2p?.modules),t.modules=Object.assign({transport:[c.default]},e?.libp2p?.modules),t.modules=Object.assign(t.modules,{streamMuxer:[u.default],connEncryption:[new i.Noise(e?.staticNoiseKey)],pubsub:m.WakuRelay}),e?.bootstrap){const r=new h.Bootstrap(e?.bootstrap);if(void 0!==r.getBootstrapPeers)try{const e=await r.getBootstrapPeers();t.modules=Object.assign(t.modules,{peerDiscovery:[a.default]}),t.config.peerDiscovery={[a.default.tag]:{list:e,enabled:!0}}}catch(e){P("Failed to retrieve bootstrap nodes",e)}}const r=await n.default.create(t),o=new _.WakuStore(r,{pubSubTopic:e?.pubSubTopic}),s=new g.WakuLightPush(r);return await r.start(),new T(e||{},r,o,s)}async dial(e){return this.libp2p.dialProtocol(e,[_.StoreCodec].concat(m.RelayCodecs))}addPeerToAddressBook(e,t){let r;r="string"==typeof e?f.default.createFromB58String(e):e;const o=t.map((e=>"string"==typeof e?p.multiaddr(e):e));this.libp2p.peerStore.addressBook.set(r,o)}async stop(){return this.libp2p.stop()}addDecryptionKey(e,t){this.relay.addDecryptionKey(e,t),this.store.addDecryptionKey(e,t)}deleteDecryptionKey(e){this.relay.deleteDecryptionKey(e),this.store.deleteDecryptionKey(e)}getLocalMultiaddrWithID(){const e=this.libp2p.multiaddrs.find((e=>e.toString().match(/127\.0\.0\.1/)));if(!e||""===e.toString())throw"Not listening on localhost";return e+"/p2p/"+this.libp2p.peerId.toB58String()}async waitForConnectedPeer(){const e=[[_.StoreCodec],[g.LightPushCodec],m.RelayCodecs];await Promise.all(e.map((e=>{const t=new Array;return e.forEach((e=>{y.getPeersForProtocol(this.libp2p,e).forEach((e=>t.push(e)))})),t.length>0?Promise.resolve():new Promise((t=>{this.libp2p.peerStore.on("change:protocols",(({protocols:r})=>{e.forEach((e=>{r.includes(e)&&(P("Resolving for",e,r),t())}))}))}))})))}startKeepAlive(e,t,r){this.stopKeepAlive(e);const o=e.toB58String();0!==t&&(this.pingKeepAliveTimers[o]=setInterval((()=>{l.default(this.libp2p,e)}),1e3*t)),0!==r&&(this.relayKeepAliveTimers[o]=setInterval((()=>{b.WakuMessage.fromBytes(new Uint8Array,v.RelayPingContentTopic).then((e=>this.relay.send(e)))}),1e3*r))}stopKeepAlive(e){const t=e.toB58String();this.pingKeepAliveTimers[t]&&(clearInterval(this.pingKeepAliveTimers[t]),delete this.pingKeepAliveTimers[t]),this.relayKeepAliveTimers[t]&&(clearInterval(this.relayKeepAliveTimers[t]),delete this.relayKeepAliveTimers[t])}}t.Waku=T},17087:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuLightPush=t.PushResponse=t.LightPushCodec=void 0;const i=o(r(88342)),s=o(r(48963)),n=o(r(60618)),a=r(67405);Object.defineProperty(t,"PushResponse",{enumerable:!0,get:function(){return a.PushResponse}});const u=r(65187),c=r(90607),d=r(67140);t.LightPushCodec="/vac/waku/lightpush/2.0.0-beta1",t.WakuLightPush=class{constructor(e,t){this.libp2p=e,this.pubSubTopic=t?.pubSubTopic?t.pubSubTopic:c.DefaultPubSubTopic}async push(e,r){let o;if(r?.peerId){if(o=this.libp2p.peerStore.get(r.peerId),!o)throw"Peer is unknown"}else o=this.randomPeer;if(!o)throw"No peer available";if(!o.protocols.includes(t.LightPushCodec))throw"Peer does not register waku light push protocol";const a=this.libp2p.connectionManager.get(o.id);if(!a)throw"Failed to get a connection to the peer";const{stream:u}=await a.newStream(t.LightPushCodec);try{const t=r?.pubSubTopic?r.pubSubTopic:this.pubSubTopic,o=d.PushRPC.createRequest(e,t),a=await n.default([o.encode()],s.default.encode(),u,s.default.decode(),i.default);try{return d.PushRPC.decode(a.slice()).response||(console.log("No response in PushRPC"),null)}catch(e){console.log("Failed to decode push reply",e)}}catch(e){console.log("Failed to send waku light push request",e)}return null}get peers(){return u.getPeersForProtocol(this.libp2p,t.LightPushCodec)}get randomPeer(){return u.selectRandomPeer(this.peers)}}},67140:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.PushRPC=void 0;const n=r(62100),a=r(21614),u=s(r(67405));class c{constructor(e){this.proto=e}static createRequest(e,t){return new c({requestId:a.v4(),request:{message:e.proto,pubSubTopic:t},response:void 0})}static decode(e){const t=u.PushRPC.decode(n.Reader.create(e));return new c(t)}encode(){return u.PushRPC.encode(this.proto).finish()}get query(){return this.proto.request}get response(){return this.proto.response}}t.PushRPC=c},92560:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuMessage=t.DecryptionMethod=void 0;const a=r(48764),u=n(r(11227)),c=r(62100),d=s(r(66561)),l=s(r(48340)),p=u.default("waku:message");var f;!function(e){e.Asymmetric="asymmetric",e.Symmetric="symmetric"}(f=t.DecryptionMethod||(t.DecryptionMethod={}));class h{constructor(e,t,r){this.proto=e,this._signaturePublicKey=t,this._signature=r}static async fromUtf8String(e,t,r){const o=a.Buffer.from(e,"utf-8");return h.fromBytes(o,t,r)}static async fromBytes(e,t,r){const{timestamp:o,encPublicKey:i,symKey:s,sigPrivKey:n}=Object.assign({timestamp:new Date},r||{});let a,u=e,c=0;if(i&&s)throw"Pass either `encPublicKey` or `symKey`, not both.";if(i){const e=l.clearEncode(u,n);u=await l.encryptAsymmetric(e.payload,i),a=e.sig,c=1}else if(s){const e=l.clearEncode(u,n);u=await l.encryptSymmetric(e.payload,s),a=e.sig,c=1}return new h({payload:u,timestamp:o.valueOf()/1e3,version:c,contentTopic:t},a?.publicKey,a?.signature)}static async decode(e,t){const r=d.WakuMessage.decode(c.Reader.create(e));return h.decodeProto(r,t)}static async decodeProto(e,t){if(void 0===e.payload)return void p("Payload is undefined");const r=e.payload;let o,i;if(1===e.version&&e.payload){if(void 0===t)return void p("Payload is encrypted but no private keys have been provided.");const s=e=>!!e,n=(await Promise.all(t.map((async({key:t,method:o,contentTopics:i})=>{if(!i||e.contentTopic&&i.includes(e.contentTopic))switch(o){case f.Asymmetric:try{return await l.decryptAsymmetric(r,t)}catch(e){return void p("Failed to decrypt message using symmetric encryption despite decryption method being specified",e)}case f.Symmetric:try{return await l.decryptSymmetric(r,t)}catch(e){return void p("Failed to decrypt message using asymmetric encryption despite decryption method being specified",e)}default:try{return await l.decryptSymmetric(r,t)}catch(e){p("Failed to decrypt message using symmetric encryption",e);try{return await l.decryptAsymmetric(r,t)}catch(e){return void p("Failed to decrypt message using asymmetric encryption",e)}}}})))).filter(s);if(0===n.length)return void p("Failed to decrypt payload.");const a=n[0],u=await l.clearDecode(a);if(!u)return void p("Failed to decode payload.");Object.assign(e,{payload:u.payload}),o=u.sig?.publicKey,i=u.sig?.signature}return new h(e,o,i)}encode(){return d.WakuMessage.encode(this.proto).finish()}get payloadAsUtf8(){return this.proto.payload?a.Buffer.from(this.proto.payload).toString("utf-8"):""}get payload(){return this.proto.payload}get contentTopic(){return this.proto.contentTopic}get version(){return this.proto.version}get timestamp(){if(this.proto.timestamp)return new Date(1e3*this.proto.timestamp)}get signaturePublicKey(){return this._signaturePublicKey}get signature(){return this._signature}}t.WakuMessage=h},48615:(e,t,r)=>{"use strict";var o=r(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.generateIv=t.decrypt=t.encrypt=void 0;const i=r(16104),s=window.crypto||window.msCrypto,n=s.subtle||s.webkitSubtle,a={name:"AES-GCM",length:128};if(void 0===n)throw new Error("Failed to load Subtle CryptoAPI");t.encrypt=async function(e,t,r){return n.importKey("raw",t,a,!1,["encrypt"]).then((t=>n.encrypt({iv:e,...a},t,r))).then(o.from)},t.decrypt=async function(e,t,r){return n.importKey("raw",t,a,!1,["decrypt"]).then((t=>n.decrypt({iv:e,...a},t,r))).then(o.from)},t.generateIv=function(){const e=new Uint8Array(i.IvSize);return s.getRandomValues(e),e}},16104:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.symmetric=t.TagSize=t.IvSize=t.SymmetricKeySize=void 0,t.SymmetricKeySize=32,t.IvSize=12,t.TagSize=16,t.symmetric={},Promise.resolve().then((()=>s(r(48615)))).then((e=>{t.symmetric=e})).catch((e=>{Promise.resolve().then((()=>s(r(70194)))).then((e=>{t.symmetric=e})).catch((t=>{throw`Could not load any symmetric crypto modules: ${e}, ${t}`}))}))},70194:(e,t,r)=>{"use strict";var o=r(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.generateIv=t.decrypt=t.encrypt=void 0;const i=r(55835),s=r(16104),n="aes-256-gcm";t.encrypt=async function(e,t,r){const s=i.createCipheriv(n,t,e),a=s.update(r),u=s.final(),c=s.getAuthTag();return o.concat([a,u,c])},t.decrypt=async function(e,t,r){const a=r.length-s.TagSize,u=r.slice(0,a),c=r.slice(a),d=i.createDecipheriv(n,t,e);d.setAuthTag(c);const l=d.update(u),p=d.final();return o.concat([l,p])},t.generateIv=function(){return i.randomBytes(s.IvSize)}},48340:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.getPublicKey=t.generateSymmetricKey=t.generatePrivateKey=t.decryptSymmetric=t.encryptSymmetric=t.decryptAsymmetric=t.encryptAsymmetric=t.clearDecode=t.clearEncode=t.PrivateKeySize=void 0;const n=r(48764),a=s(r(55835)),u=s(r(63611)),c=r(91094),d=s(r(17221)),l=r(61721),p=r(16104);function f(e){return d.publicKeyCreate(e,!1)}function h(e){let t=1;for(let r=e.length;r>=256;r/=256)t++;return t}function y(e){if("undefined"!=typeof window&&window&&window.crypto){const t=new Uint8Array(e);return window.crypto.getRandomValues(t),t}return a.randomBytes(e)}t.PrivateKeySize=32,t.clearEncode=function(e,t){let r=n.Buffer.from([0]);r=function(e,t){const r=h(t);let o=n.Buffer.alloc(4);return o.writeUInt32LE(t.length,0),o=o.slice(0,r),(e=n.Buffer.concat([e,o]))[0]|=r,e}(r,e),r=n.Buffer.concat([r,n.Buffer.from(e)]);let o=1+h(e)+e.length;t&&(o+=65);const i=256-o%256,s=n.Buffer.from(y(i));if(u=i,(a=s).length!==u||u>3&&n.Buffer.from(a).equals(n.Buffer.alloc(a.length)))throw new Error("failed to generate random padding of size "+i);var a,u;let p;if(r=n.Buffer.concat([r,s]),t){r[0]|=4;const e=c.keccak256(r),o=d.ecdsaSign(l.hexToBuf(e),t);r=n.Buffer.concat([r,o.signature,n.Buffer.from([o.recid])]),p={signature:n.Buffer.from(o.signature),publicKey:f(t)}}return{payload:r,sig:p}},t.clearDecode=function(e){const t=n.Buffer.from(e);let r,o=1;const i=3&t.readUIntLE(0,1);if(0===i)return;const s=t.readUIntLE(o,i);o+=i;const a=t.slice(o,o+s),u=4==(4&t.readUIntLE(0,1));if(u){const e=function(e){return e.slice(e.length-65,e.length)}(t),o=function(e,t){return t?c.keccak256(e.slice(0,e.length-65)):c.keccak256(e)}(t,u),i=function(e,t){const r=t.slice(64).readIntBE(0,1);return d.ecdsaRecover(t.slice(0,64),r,l.hexToBuf(e),!1)}(o,e);r={signature:e,publicKey:i}}return{payload:a,sig:r}},t.encryptAsymmetric=async function(e,t){return u.encrypt(l.hexToBuf(t),n.Buffer.from(e))},t.decryptAsymmetric=async function(e,t){return u.decrypt(n.Buffer.from(t),n.Buffer.from(e))},t.encryptSymmetric=async function(e,t){const r=p.symmetric.generateIv(),o=await p.symmetric.encrypt(r,l.hexToBuf(t),n.Buffer.from(e));return n.Buffer.concat([o,n.Buffer.from(r)])},t.decryptSymmetric=async function(e,t){const r=n.Buffer.from(e),o=r.length-p.IvSize,i=r.slice(0,o),s=r.slice(o);return p.symmetric.decrypt(s,l.hexToBuf(t),i)},t.generatePrivateKey=function(){return y(t.PrivateKeySize)},t.generateSymmetricKey=function(){return y(p.SymmetricKeySize)},t.getPublicKey=f},99123:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RelayMaxIHaveLength=t.RelayOpportunisticGraftPeers=t.RelayOpportunisticGraftTicks=t.RelayFanoutTTL=t.RelayPruneBackoff=t.RelayPrunePeers=t.RelayHeartbeatInterval=t.RelayHeartbeatInitialDelay=t.RelayGossipFactor=t.RelayPingContentTopic=t.RelayCodecs=t.minute=t.second=void 0,t.second=1e3,t.minute=60*t.second,t.RelayCodecs=["/vac/waku/relay/2.0.0-beta2","/vac/waku/relay/2.0.0"],t.RelayPingContentTopic="/relay-ping/1/ping/null",t.RelayGossipFactor=.25,t.RelayHeartbeatInitialDelay=100,t.RelayHeartbeatInterval=t.second,t.RelayPrunePeers=16,t.RelayPruneBackoff=t.minute,t.RelayFanoutTTL=t.minute,t.RelayOpportunisticGraftTicks=60,t.RelayOpportunisticGraftPeers=2,t.RelayMaxIHaveLength=5e3},26624:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRelayPeers=void 0;const o=r(60663),i=r(22979);t.getRelayPeers=function(e,t,r,s=(()=>!0)){const n=e.topics.get(t);if(!n)return new Set;let a=[];return n.forEach((t=>{const r=e.peers.get(t);r&&i.RelayCodecs.includes(r.protocol)&&s(t)&&a.push(t)})),a=o.shuffle(a),r>0&&a.length>r&&(a=a.slice(0,r)),new Set(a)}},22979:function(e,t,r){"use strict";var o=r(48764).Buffer,i=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&i(t,e,r);return s(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuRelay=t.RelayCodecs=void 0;const u=a(r(11227)),c=a(r(95391)),d=r(60663),l=r(32185),p=a(r(88785)),f=r(61721),h=r(90607),y=r(92560),g=n(r(99123)),b=r(99123);Object.defineProperty(t,"RelayCodecs",{enumerable:!0,get:function(){return b.RelayCodecs}});const m=r(26624),v=r(65714),_=u.default("waku:relay");class R extends c.default{constructor(e,t){super(e,Object.assign(t,{globalSignaturePolicy:l.SignaturePolicy.StrictNoSign})),this.heartbeat=new v.RelayHeartbeat(this),this.observers={},this.decryptionKeys=new Map;const r=g.RelayCodecs;Object.assign(this,{multicodecs:r}),this.pubSubTopic=t?.pubSubTopic||h.DefaultPubSubTopic,t?.decryptionKeys?.forEach((e=>{this.addDecryptionKey(e)}))}start(){super.start(),this.subscribe(this.pubSubTopic)}async send(e){const t=e.encode();await super.publish(this.pubSubTopic,o.from(t))}addDecryptionKey(e,t){this.decryptionKeys.set(f.hexToBuf(e),t??{})}deleteDecryptionKey(e){this.decryptionKeys.delete(f.hexToBuf(e))}addObserver(e,t=[]){0===t.length?(this.observers[""]||(this.observers[""]=new Set),this.observers[""].add(e)):t.forEach((t=>{this.observers[t]||(this.observers[t]=new Set),this.observers[t].add(e)}))}deleteObserver(e,t=[]){0===t.length?this.observers[""]&&this.observers[""].delete(e):t.forEach((t=>{this.observers[t]&&this.observers[t].delete(e)}))}getPeers(){return m.getRelayPeers(this,this.pubSubTopic,this._options.D,(e=>this.score.score(e)>=this._options.scoreThresholds.publishThreshold))}subscribe(e){this.on(e,(t=>{const r=Array.from(this.decryptionKeys).map((([e,{method:t,contentTopics:r}])=>({key:e,method:t,contentTopics:r})));_(`Message received on ${e}`),y.WakuMessage.decode(t.data,r).then((e=>{e?(this.observers[""]&&this.observers[""].forEach((t=>{t(e)})),e.contentTopic&&this.observers[e.contentTopic]&&this.observers[e.contentTopic].forEach((t=>{t(e)}))):_("Failed to decode Waku Message")})).catch((e=>{_("Failed to decode Waku Message",e)}))})),super.subscribe(e)}join(e){if(!this.started)throw new Error("WakuRelayPubSub has not started");const t=this.fanout.get(e);if(t)t.forEach((e=>{this.score.score(e)<0&&t.delete(e)})),t.size<this._options.D&&m.getRelayPeers(this,e,this._options.D-t.size,(e=>!t.has(e)&&!this.direct.has(e)&&this.score.score(e)>=0)).forEach((e=>t.add(e))),this.mesh.set(e,t),this.fanout.delete(e),this.lastpub.delete(e);else{const t=m.getRelayPeers(this,e,this._options.D,(e=>!this.direct.has(e)&&this.score.score(e)>=0));this.mesh.set(e,t)}this.mesh.get(e)?.forEach((t=>{this.log("JOIN: Add mesh link to %s in %s",t,e),this._sendGraft(t,e)}))}async _publish(e){e.receivedFrom!==this.peerId.toB58String()&&(this.score.deliverMessage(e),this.gossipTracer.deliverMessage(e));const t=await this.getMsgId(e),r=d.messageIdToString(t);this.seenCache.put(r),this.messageCache.put(e);const o=new Set;e.topicIDs.forEach((e=>{if(!this.topics.get(e))return;this.direct.forEach((e=>{o.add(e)}));let t=this.mesh.get(e);if(!t||!t.size){if(t=this.fanout.get(e),!t){const r=m.getRelayPeers(this,e,this._options.D,(e=>this.score.score(e)>=this._options.scoreThresholds.publishThreshold));r.size>0?(t=r,this.fanout.set(e,r)):t=new Set}this.lastpub.set(e,this._now())}t?.forEach((e=>{o.add(e)}))}));const i=d.createGossipRpc([c.default.utils.normalizeOutRpcMessage(e)]);o.forEach((t=>{t!==e.from&&this._sendRpc(t,i)}))}_emitGossip(e,t){const r=this.messageCache.getGossipIDs(e);if(!r.length)return;d.shuffle(r),r.length>g.RelayMaxIHaveLength&&this.log("too many messages for gossip; will truncate IHAVE list (%d messages)",r.length);const o=[],i=this.topics.get(e);if(!i)return;i.forEach((e=>{const r=this.peers.get(e);r&&!t.has(e)&&!this.direct.has(e)&&g.RelayCodecs.includes(r.protocol)&&this.score.score(e)>=this._options.scoreThresholds.gossipThreshold&&o.push(e)}));let s=this._options.Dlazy;const n=g.RelayGossipFactor*o.length;n>s&&(s=n),s>o.length?s=o.length:d.shuffle(o),o.slice(0,s).forEach((t=>{let o=r;r.length>g.RelayMaxIHaveLength&&(o=d.shuffle(o.slice()).slice(0,g.RelayMaxIHaveLength)),this._pushGossip(t,{topicID:e,messageIDs:o})}))}_makePrune(e,t,r){const o=g.RelayPruneBackoff/1e3,i=[];return r&&m.getRelayPeers(this,t,g.RelayPrunePeers,(t=>t!==e&&this.score.score(t)>=0)).forEach((e=>{const t=p.default.createFromB58String(e);i.push({peerID:t.toBytes(),signedPeerRecord:this._libp2p.peerStore.addressBook.getRawEnvelope(t)})})),{topicID:t,peers:i,backoff:o}}}t.WakuRelay=R},65714:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.RelayHeartbeat=void 0;const n=r(91259),a=r(60663),u=s(r(99123)),c=r(26624);class d extends n.Heartbeat{constructor(e){super(e)}start(){if(this._heartbeatTimer)return;const e=this._heartbeat.bind(this),t=setTimeout((()=>{e(),this._heartbeatTimer?.runPeriodically(e,u.RelayHeartbeatInterval)}),u.RelayHeartbeatInitialDelay);this._heartbeatTimer={_intervalId:void 0,runPeriodically:(e,t)=>{this._heartbeatTimer._intervalId=setInterval(e,t)},cancel:()=>{clearTimeout(t),clearInterval(this._heartbeatTimer?._intervalId)}}}stop(){this._heartbeatTimer&&(this._heartbeatTimer.cancel(),this._heartbeatTimer=null)}_heartbeat(){const{D:e,Dlo:t,Dhi:r,Dscore:o,Dout:i}=this.gossipsub._options;this.gossipsub.heartbeatTicks++;const s=new Map,n=e=>{let t=s.get(e);return void 0===t&&(t=this.gossipsub.score.score(e),s.set(e,t)),t},d=new Map,l=new Map,p=new Map;this.gossipsub._clearBackoff(),this.gossipsub.peerhave.clear(),this.gossipsub.iasked.clear(),this.gossipsub._applyIwantPenalties(),this.gossipsub._directConnect(),this.gossipsub.mesh.forEach(((s,f)=>{const h=e=>{this.gossipsub.log("HEARTBEAT: Remove mesh link to %s in %s",e,f),this.gossipsub.score.prune(e,f),this.gossipsub._addBackoff(e,f),s.delete(e);const t=l.get(e);t?t.push(f):l.set(e,[f])},y=e=>{this.gossipsub.log("HEARTBEAT: Add mesh link to %s in %s",e,f),this.gossipsub.score.graft(e,f),s.add(e);const t=d.get(e);t?t.push(f):d.set(e,[f])};if(s.forEach((e=>{const t=n(e);t<0&&(this.gossipsub.log("HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s",e,t,f),h(e),p.set(e,!0))})),s.size<t){const t=this.gossipsub.backoff.get(f),r=e-s.size;c.getRelayPeers(this.gossipsub,f,r,(e=>!s.has(e)&&!this.gossipsub.direct.has(e)&&(!t||!t.has(e))&&n(e)>=0)).forEach(y)}if(s.size>r){let t=Array.from(s);t.sort(((e,t)=>n(t)-n(e))),t=t.slice(0,o).concat(a.shuffle(t.slice(o)));let r=0;if(t.slice(0,e).forEach((e=>{this.gossipsub.outbound.get(e)&&r++})),r<i){const o=e=>{const r=t[e];for(let r=e;r>0;r--)t[r]=t[r-1];t[0]=r};if(r>0){let i=r;for(let r=1;r<e&&i>0;r++)this.gossipsub.outbound.get(t[r])&&(o(r),i--)}let i=e-r;for(let r=e;r<t.length&&i>0;r++)this.gossipsub.outbound.get(t[r])&&(o(r),i--)}t.slice(e).forEach(h)}if(s.size>=t){let e=0;if(s.forEach((t=>{this.gossipsub.outbound.get(t)&&e++})),e<i){const t=i-e,r=this.gossipsub.backoff.get(f);c.getRelayPeers(this.gossipsub,f,t,(e=>!s.has(e)&&!this.gossipsub.direct.has(e)&&(!r||!r.has(e))&&n(e)>=0)).forEach(y)}}if(this.gossipsub.heartbeatTicks%u.RelayOpportunisticGraftTicks==0&&s.size>1){const e=Array.from(s).sort(((e,t)=>n(e)-n(t))),t=Math.floor(s.size/2),r=n(e[t]);if(r<this.gossipsub._options.scoreThresholds.opportunisticGraftThreshold){const e=this.gossipsub.backoff.get(f);c.getRelayPeers(this.gossipsub,f,u.RelayOpportunisticGraftPeers,(t=>s.has(t)&&!this.gossipsub.direct.has(t)&&(!e||!e.has(t))&&n(t)>r)).forEach((e=>{this.gossipsub.log("HEARTBEAT: Opportunistically graft peer %s on topic %s",e,f),y(e)}))}}this.gossipsub._emitGossip(f,s)}));const f=this.gossipsub._now();this.gossipsub.lastpub.forEach(((e,t)=>{e+u.RelayFanoutTTL<f&&(this.gossipsub.fanout.delete(t),this.gossipsub.lastpub.delete(t))})),this.gossipsub.fanout.forEach(((t,r)=>{const o=this.gossipsub.topics.get(r);if(t.forEach((e=>{(!o?.has(e)||n(e)<this.gossipsub._options.scoreThresholds.publishThreshold)&&t.delete(e)})),t.size<e){const o=e-t.size;c.getRelayPeers(this.gossipsub,r,o,(e=>!t.has(e)&&!this.gossipsub.direct.has(e)&&n(e)>=this.gossipsub._options.scoreThresholds.publishThreshold)).forEach((e=>{t.add(e)}))}this.gossipsub._emitGossip(r,t)})),this.gossipsub._sendGraftPrune(d,l,p),this.gossipsub._flush(),this.gossipsub.messageCache.shift(),this.gossipsub.emit("gossipsub:heartbeat")}}t.RelayHeartbeat=d},77545:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&o(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryRPC=t.PageDirection=void 0;const n=r(62100),a=r(21614),u=s(r(25336));var c;!function(e){e.BACKWARD="backward",e.FORWARD="forward"}(c=t.PageDirection||(t.PageDirection={}));class d{constructor(e){this.proto=e}static createQuery(e){const t=function(e){switch(e){case c.BACKWARD:return u.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;case c.FORWARD:return u.PagingInfo_Direction.DIRECTION_FORWARD;default:return u.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED}}(e.pageDirection),r={pageSize:e.pageSize,cursor:e.cursor,direction:t},o=e.contentTopics.map((e=>({contentTopic:e})));return new d({requestId:a.v4(),query:{pubSubTopic:e.pubSubTopic,contentFilters:o,pagingInfo:r,startTime:e.startTime,endTime:e.endTime},response:void 0})}static decode(e){const t=u.HistoryRPC.decode(n.Reader.create(e));return new d(t)}encode(){return u.HistoryRPC.encode(this.proto).finish()}get query(){return this.proto.query}get response(){return this.proto.response}}t.HistoryRPC=d},95960:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuStore=t.PageDirection=t.DefaultPageSize=t.StoreCodec=void 0;const i=o(r(11227)),s=o(r(88342)),n=o(r(48963)),a=o(r(60618)),u=r(15888),c=r(65187),d=r(61721),l=r(90607),p=r(92560),f=r(77545);Object.defineProperty(t,"PageDirection",{enumerable:!0,get:function(){return f.PageDirection}});const h=i.default("waku:store");t.StoreCodec="/vac/waku/store/2.0.0-beta3",t.DefaultPageSize=10,t.WakuStore=class{constructor(e,t){this.libp2p=e,this.pubSubTopic=t?.pubSubTopic?t.pubSubTopic:l.DefaultPubSubTopic,this.decryptionKeys=new Map}async queryHistory(e,r){let o,i;r?.timeFilter&&(o=r.timeFilter.startTime.getTime()/1e3,i=r.timeFilter.endTime.getTime()/1e3);const c=Object.assign({pubSubTopic:this.pubSubTopic,pageDirection:f.PageDirection.BACKWARD,pageSize:t.DefaultPageSize},r,{startTime:o,endTime:i},{contentTopics:e});let l;if(h("Querying history with the following options",r),c.peerId){if(l=this.libp2p.peerStore.get(c.peerId),!l)throw`Failed to retrieve connection details for provided peer in peer store: ${c.peerId.toB58String()}`}else if(l=this.randomPeer,!l)throw"Failed to find known peer that registers waku store protocol";if(!l.protocols.includes(t.StoreCodec))throw`Peer does not register waku store protocol: ${l.id.toB58String()}`;const y=this.libp2p.connectionManager.get(l.id);if(!y)throw"Failed to get a connection to the peer";const g=Array.from(this.decryptionKeys).map((([e,{method:t,contentTopics:r}])=>({key:e,method:t,contentTopics:r})));c.decryptionKeys&&c.decryptionKeys.forEach((t=>{g.push({key:d.hexToBuf(t),contentTopics:e.length?e:void 0,method:void 0})}));const b=[];let m;for(;;){const{stream:e}=await y.newStream(t.StoreCodec),r=Object.assign(c,{cursor:m}),o=f.HistoryRPC.createQuery(r);h("Querying store peer",y.remoteAddr.toString());const i=await a.default([o.encode()],n.default.encode(),e,n.default.decode(),s.default),d=f.HistoryRPC.decode(i.slice()).response;if(!d)throw"History response misses response field";if(d.error&&d.error===u.HistoryResponse_Error.ERROR_INVALID_CURSOR)throw"History response contains an Error: INVALID CURSOR";if(!d.messages||!d.messages.length)return console.log("No messages present in HistoryRPC response"),b;h(`${d.messages.length} messages retrieved for pubsub topic ${c.pubSubTopic}`);const l=[];await Promise.all(d.messages.map((async e=>{const t=await p.WakuMessage.decodeProto(e,g);t&&(b.push(t),l.push(t))})));let v=!1;c.callback&&(v=Boolean(c.callback(l)));const _=d.pagingInfo?.pageSize,R=o.query?.pagingInfo?.pageSize;if(v||_&&R&&_<R)return b;if(m=d.pagingInfo?.cursor,void 0===m)return console.log("No cursor returned by peer."),b}}addDecryptionKey(e,t){this.decryptionKeys.set(d.hexToBuf(e),t??{})}deleteDecryptionKey(e){this.decryptionKeys.delete(d.hexToBuf(e))}get peers(){return c.getPeersForProtocol(this.libp2p,t.StoreCodec)}get randomPeer(){return c.selectRandomPeer(this.peers)}}},15888:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryRPC=t.HistoryResponse_Error=t.HistoryResponse=t.HistoryQuery=t.ContentFilter=t.PagingInfo_Direction=t.PagingInfo=t.Index=t.WakuMessage=void 0;var o=r(66561);Object.defineProperty(t,"WakuMessage",{enumerable:!0,get:function(){return o.WakuMessage}});var i=r(25336);Object.defineProperty(t,"Index",{enumerable:!0,get:function(){return i.Index}}),Object.defineProperty(t,"PagingInfo",{enumerable:!0,get:function(){return i.PagingInfo}}),Object.defineProperty(t,"PagingInfo_Direction",{enumerable:!0,get:function(){return i.PagingInfo_Direction}}),Object.defineProperty(t,"ContentFilter",{enumerable:!0,get:function(){return i.ContentFilter}}),Object.defineProperty(t,"HistoryQuery",{enumerable:!0,get:function(){return i.HistoryQuery}}),Object.defineProperty(t,"HistoryResponse",{enumerable:!0,get:function(){return i.HistoryResponse}}),Object.defineProperty(t,"HistoryResponse_Error",{enumerable:!0,get:function(){return i.HistoryResponse_Error}}),Object.defineProperty(t,"HistoryRPC",{enumerable:!0,get:function(){return i.HistoryRPC}})},67405:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.PushRPC=t.PushResponse=t.PushRequest=t.protobufPackage=void 0;const i=o(r(43720)),s=o(r(62100)),n=r(66561);function a(e){return null!=e}t.protobufPackage="waku.v2",t.PushRequest={encode:(e,t=s.default.Writer.create())=>(""!==e.pubSubTopic&&t.uint32(10).string(e.pubSubTopic),void 0!==e.message&&n.WakuMessage.encode(e.message,t.uint32(18).fork()).ldelim(),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={pubSubTopic:"",message:void 0};for(;r.pos<o;){const e=r.uint32();switch(e>>>3){case 1:i.pubSubTopic=r.string();break;case 2:i.message=n.WakuMessage.decode(r,r.uint32());break;default:r.skipType(7&e)}}return i},fromJSON:e=>({pubSubTopic:a(e.pubSubTopic)?String(e.pubSubTopic):"",message:a(e.message)?n.WakuMessage.fromJSON(e.message):void 0}),toJSON(e){const t={};return void 0!==e.pubSubTopic&&(t.pubSubTopic=e.pubSubTopic),void 0!==e.message&&(t.message=e.message?n.WakuMessage.toJSON(e.message):void 0),t},fromPartial(e){const t={pubSubTopic:"",message:void 0};return t.pubSubTopic=e.pubSubTopic??"",t.message=void 0!==e.message&&null!==e.message?n.WakuMessage.fromPartial(e.message):void 0,t}},t.PushResponse={encode:(e,t=s.default.Writer.create())=>(!0===e.isSuccess&&t.uint32(8).bool(e.isSuccess),""!==e.info&&t.uint32(18).string(e.info),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={isSuccess:!1,info:""};for(;r.pos<o;){const e=r.uint32();switch(e>>>3){case 1:i.isSuccess=r.bool();break;case 2:i.info=r.string();break;default:r.skipType(7&e)}}return i},fromJSON:e=>({isSuccess:!!a(e.isSuccess)&&Boolean(e.isSuccess),info:a(e.info)?String(e.info):""}),toJSON(e){const t={};return void 0!==e.isSuccess&&(t.isSuccess=e.isSuccess),void 0!==e.info&&(t.info=e.info),t},fromPartial(e){const t={isSuccess:!1,info:""};return t.isSuccess=e.isSuccess??!1,t.info=e.info??"",t}},t.PushRPC={encode:(e,r=s.default.Writer.create())=>(""!==e.requestId&&r.uint32(10).string(e.requestId),void 0!==e.request&&t.PushRequest.encode(e.request,r.uint32(18).fork()).ldelim(),void 0!==e.response&&t.PushResponse.encode(e.response,r.uint32(26).fork()).ldelim(),r),decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={requestId:"",request:void 0,response:void 0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 1:n.requestId=o.string();break;case 2:n.request=t.PushRequest.decode(o,o.uint32());break;case 3:n.response=t.PushResponse.decode(o,o.uint32());break;default:o.skipType(7&e)}}return n},fromJSON:e=>({requestId:a(e.requestId)?String(e.requestId):"",request:a(e.request)?t.PushRequest.fromJSON(e.request):void 0,response:a(e.response)?t.PushResponse.fromJSON(e.response):void 0}),toJSON(e){const r={};return void 0!==e.requestId&&(r.requestId=e.requestId),void 0!==e.request&&(r.request=e.request?t.PushRequest.toJSON(e.request):void 0),void 0!==e.response&&(r.response=e.response?t.PushResponse.toJSON(e.response):void 0),r},fromPartial(e){const r={requestId:"",request:void 0,response:void 0};return r.requestId=e.requestId??"",r.request=void 0!==e.request&&null!==e.request?t.PushRequest.fromPartial(e.request):void 0,r.response=void 0!==e.response&&null!==e.response?t.PushResponse.fromPartial(e.response):void 0,r}},s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},66561:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WakuMessage=t.protobufPackage=void 0;const i=o(r(43720)),s=o(r(62100));t.protobufPackage="waku.v2",t.WakuMessage={encode:(e,t=s.default.Writer.create())=>(void 0!==e.payload&&t.uint32(10).bytes(e.payload),void 0!==e.contentTopic&&t.uint32(18).string(e.contentTopic),void 0!==e.version&&t.uint32(24).uint32(e.version),void 0!==e.timestamp&&t.uint32(33).double(e.timestamp),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={payload:void 0,contentTopic:void 0,version:void 0,timestamp:void 0};for(;r.pos<o;){const e=r.uint32();switch(e>>>3){case 1:i.payload=r.bytes();break;case 2:i.contentTopic=r.string();break;case 3:i.version=r.uint32();break;case 4:i.timestamp=r.double();break;default:r.skipType(7&e)}}return i},fromJSON:e=>({payload:d(e.payload)?u(e.payload):void 0,contentTopic:d(e.contentTopic)?String(e.contentTopic):void 0,version:d(e.version)?Number(e.version):void 0,timestamp:d(e.timestamp)?Number(e.timestamp):void 0}),toJSON(e){const t={};return void 0!==e.payload&&(t.payload=void 0!==e.payload?function(e){const t=[];for(const r of e)t.push(String.fromCharCode(r));return c(t.join(""))}(e.payload):void 0),void 0!==e.contentTopic&&(t.contentTopic=e.contentTopic),void 0!==e.version&&(t.version=Math.round(e.version)),void 0!==e.timestamp&&(t.timestamp=e.timestamp),t},fromPartial(e){const t={payload:void 0,contentTopic:void 0,version:void 0,timestamp:void 0};return t.payload=e.payload??void 0,t.contentTopic=e.contentTopic??void 0,t.version=e.version??void 0,t.timestamp=e.timestamp??void 0,t}};var n=(()=>{if(void 0!==n)return n;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r.g)return r.g;throw"Unable to locate global object"})();const a=n.atob||(e=>n.Buffer.from(e,"base64").toString("binary"));function u(e){const t=a(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;++e)r[e]=t.charCodeAt(e);return r}const c=n.btoa||(e=>n.Buffer.from(e,"binary").toString("base64"));function d(e){return null!=e}s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},25336:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryRPC=t.HistoryResponse=t.HistoryQuery=t.ContentFilter=t.PagingInfo=t.Index=t.historyResponse_ErrorToJSON=t.historyResponse_ErrorFromJSON=t.HistoryResponse_Error=t.pagingInfo_DirectionToJSON=t.pagingInfo_DirectionFromJSON=t.PagingInfo_Direction=t.protobufPackage=void 0;const i=o(r(43720)),s=o(r(62100)),n=r(66561);var a,u;function c(e){switch(e){case 0:case"DIRECTION_BACKWARD_UNSPECIFIED":return a.DIRECTION_BACKWARD_UNSPECIFIED;case 1:case"DIRECTION_FORWARD":return a.DIRECTION_FORWARD;default:return a.UNRECOGNIZED}}function d(e){switch(e){case a.DIRECTION_BACKWARD_UNSPECIFIED:return"DIRECTION_BACKWARD_UNSPECIFIED";case a.DIRECTION_FORWARD:return"DIRECTION_FORWARD";default:return"UNKNOWN"}}function l(e){switch(e){case 0:case"ERROR_NONE_UNSPECIFIED":return u.ERROR_NONE_UNSPECIFIED;case 1:case"ERROR_INVALID_CURSOR":return u.ERROR_INVALID_CURSOR;default:return u.UNRECOGNIZED}}function p(e){switch(e){case u.ERROR_NONE_UNSPECIFIED:return"ERROR_NONE_UNSPECIFIED";case u.ERROR_INVALID_CURSOR:return"ERROR_INVALID_CURSOR";default:return"UNKNOWN"}}function f(){return{digest:new Uint8Array,receivedTime:0,senderTime:0}}t.protobufPackage="waku.v2",function(e){e[e.DIRECTION_BACKWARD_UNSPECIFIED=0]="DIRECTION_BACKWARD_UNSPECIFIED",e[e.DIRECTION_FORWARD=1]="DIRECTION_FORWARD",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"}(a=t.PagingInfo_Direction||(t.PagingInfo_Direction={})),t.pagingInfo_DirectionFromJSON=c,t.pagingInfo_DirectionToJSON=d,function(e){e[e.ERROR_NONE_UNSPECIFIED=0]="ERROR_NONE_UNSPECIFIED",e[e.ERROR_INVALID_CURSOR=1]="ERROR_INVALID_CURSOR",e[e.UNRECOGNIZED=-1]="UNRECOGNIZED"}(u=t.HistoryResponse_Error||(t.HistoryResponse_Error={})),t.historyResponse_ErrorFromJSON=l,t.historyResponse_ErrorToJSON=p,t.Index={encode:(e,t=s.default.Writer.create())=>(0!==e.digest.length&&t.uint32(10).bytes(e.digest),0!==e.receivedTime&&t.uint32(17).double(e.receivedTime),0!==e.senderTime&&t.uint32(25).double(e.senderTime),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i=f();for(;r.pos<o;){const e=r.uint32();switch(e>>>3){case 1:i.digest=r.bytes();break;case 2:i.receivedTime=r.double();break;case 3:i.senderTime=r.double();break;default:r.skipType(7&e)}}return i},fromJSON:e=>({digest:v(e.digest)?g(e.digest):new Uint8Array,receivedTime:v(e.receivedTime)?Number(e.receivedTime):0,senderTime:v(e.senderTime)?Number(e.senderTime):0}),toJSON(e){const t={};return void 0!==e.digest&&(t.digest=function(e){const t=[];for(const r of e)t.push(String.fromCharCode(r));return b(t.join(""))}(void 0!==e.digest?e.digest:new Uint8Array)),void 0!==e.receivedTime&&(t.receivedTime=e.receivedTime),void 0!==e.senderTime&&(t.senderTime=e.senderTime),t},fromPartial(e){const t=f();return t.digest=e.digest??new Uint8Array,t.receivedTime=e.receivedTime??0,t.senderTime=e.senderTime??0,t}},t.PagingInfo={encode:(e,r=s.default.Writer.create())=>(0!==e.pageSize&&r.uint32(8).uint64(e.pageSize),void 0!==e.cursor&&t.Index.encode(e.cursor,r.uint32(18).fork()).ldelim(),0!==e.direction&&r.uint32(24).int32(e.direction),r),decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={pageSize:0,cursor:void 0,direction:0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 1:n.pageSize=m(o.uint64());break;case 2:n.cursor=t.Index.decode(o,o.uint32());break;case 3:n.direction=o.int32();break;default:o.skipType(7&e)}}return n},fromJSON:e=>({pageSize:v(e.pageSize)?Number(e.pageSize):0,cursor:v(e.cursor)?t.Index.fromJSON(e.cursor):void 0,direction:v(e.direction)?c(e.direction):0}),toJSON(e){const r={};return void 0!==e.pageSize&&(r.pageSize=Math.round(e.pageSize)),void 0!==e.cursor&&(r.cursor=e.cursor?t.Index.toJSON(e.cursor):void 0),void 0!==e.direction&&(r.direction=d(e.direction)),r},fromPartial(e){const r={pageSize:0,cursor:void 0,direction:0};return r.pageSize=e.pageSize??0,r.cursor=void 0!==e.cursor&&null!==e.cursor?t.Index.fromPartial(e.cursor):void 0,r.direction=e.direction??0,r}},t.ContentFilter={encode:(e,t=s.default.Writer.create())=>(""!==e.contentTopic&&t.uint32(10).string(e.contentTopic),t),decode(e,t){const r=e instanceof s.default.Reader?e:new s.default.Reader(e);let o=void 0===t?r.len:r.pos+t;const i={contentTopic:""};for(;r.pos<o;){const e=r.uint32();e>>>3==1?i.contentTopic=r.string():r.skipType(7&e)}return i},fromJSON:e=>({contentTopic:v(e.contentTopic)?String(e.contentTopic):""}),toJSON(e){const t={};return void 0!==e.contentTopic&&(t.contentTopic=e.contentTopic),t},fromPartial(e){const t={contentTopic:""};return t.contentTopic=e.contentTopic??"",t}},t.HistoryQuery={encode(e,r=s.default.Writer.create()){void 0!==e.pubSubTopic&&r.uint32(18).string(e.pubSubTopic);for(const o of e.contentFilters)t.ContentFilter.encode(o,r.uint32(26).fork()).ldelim();return void 0!==e.pagingInfo&&t.PagingInfo.encode(e.pagingInfo,r.uint32(34).fork()).ldelim(),void 0!==e.startTime&&r.uint32(41).double(e.startTime),void 0!==e.endTime&&r.uint32(49).double(e.endTime),r},decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={pubSubTopic:void 0,contentFilters:[],pagingInfo:void 0,startTime:void 0,endTime:void 0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 2:n.pubSubTopic=o.string();break;case 3:n.contentFilters.push(t.ContentFilter.decode(o,o.uint32()));break;case 4:n.pagingInfo=t.PagingInfo.decode(o,o.uint32());break;case 5:n.startTime=o.double();break;case 6:n.endTime=o.double();break;default:o.skipType(7&e)}}return n},fromJSON:e=>({pubSubTopic:v(e.pubSubTopic)?String(e.pubSubTopic):void 0,contentFilters:Array.isArray(e?.contentFilters)?e.contentFilters.map((e=>t.ContentFilter.fromJSON(e))):[],pagingInfo:v(e.pagingInfo)?t.PagingInfo.fromJSON(e.pagingInfo):void 0,startTime:v(e.startTime)?Number(e.startTime):void 0,endTime:v(e.endTime)?Number(e.endTime):void 0}),toJSON(e){const r={};return void 0!==e.pubSubTopic&&(r.pubSubTopic=e.pubSubTopic),e.contentFilters?r.contentFilters=e.contentFilters.map((e=>e?t.ContentFilter.toJSON(e):void 0)):r.contentFilters=[],void 0!==e.pagingInfo&&(r.pagingInfo=e.pagingInfo?t.PagingInfo.toJSON(e.pagingInfo):void 0),void 0!==e.startTime&&(r.startTime=e.startTime),void 0!==e.endTime&&(r.endTime=e.endTime),r},fromPartial(e){const r={pubSubTopic:void 0,contentFilters:[],pagingInfo:void 0,startTime:void 0,endTime:void 0};return r.pubSubTopic=e.pubSubTopic??void 0,r.contentFilters=e.contentFilters?.map((e=>t.ContentFilter.fromPartial(e)))||[],r.pagingInfo=void 0!==e.pagingInfo&&null!==e.pagingInfo?t.PagingInfo.fromPartial(e.pagingInfo):void 0,r.startTime=e.startTime??void 0,r.endTime=e.endTime??void 0,r}},t.HistoryResponse={encode(e,r=s.default.Writer.create()){for(const t of e.messages)n.WakuMessage.encode(t,r.uint32(18).fork()).ldelim();return void 0!==e.pagingInfo&&t.PagingInfo.encode(e.pagingInfo,r.uint32(26).fork()).ldelim(),0!==e.error&&r.uint32(32).int32(e.error),r},decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const a={messages:[],pagingInfo:void 0,error:0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 2:a.messages.push(n.WakuMessage.decode(o,o.uint32()));break;case 3:a.pagingInfo=t.PagingInfo.decode(o,o.uint32());break;case 4:a.error=o.int32();break;default:o.skipType(7&e)}}return a},fromJSON:e=>({messages:Array.isArray(e?.messages)?e.messages.map((e=>n.WakuMessage.fromJSON(e))):[],pagingInfo:v(e.pagingInfo)?t.PagingInfo.fromJSON(e.pagingInfo):void 0,error:v(e.error)?l(e.error):0}),toJSON(e){const r={};return e.messages?r.messages=e.messages.map((e=>e?n.WakuMessage.toJSON(e):void 0)):r.messages=[],void 0!==e.pagingInfo&&(r.pagingInfo=e.pagingInfo?t.PagingInfo.toJSON(e.pagingInfo):void 0),void 0!==e.error&&(r.error=p(e.error)),r},fromPartial(e){const r={messages:[],pagingInfo:void 0,error:0};return r.messages=e.messages?.map((e=>n.WakuMessage.fromPartial(e)))||[],r.pagingInfo=void 0!==e.pagingInfo&&null!==e.pagingInfo?t.PagingInfo.fromPartial(e.pagingInfo):void 0,r.error=e.error??0,r}},t.HistoryRPC={encode:(e,r=s.default.Writer.create())=>(""!==e.requestId&&r.uint32(10).string(e.requestId),void 0!==e.query&&t.HistoryQuery.encode(e.query,r.uint32(18).fork()).ldelim(),void 0!==e.response&&t.HistoryResponse.encode(e.response,r.uint32(26).fork()).ldelim(),r),decode(e,r){const o=e instanceof s.default.Reader?e:new s.default.Reader(e);let i=void 0===r?o.len:o.pos+r;const n={requestId:"",query:void 0,response:void 0};for(;o.pos<i;){const e=o.uint32();switch(e>>>3){case 1:n.requestId=o.string();break;case 2:n.query=t.HistoryQuery.decode(o,o.uint32());break;case 3:n.response=t.HistoryResponse.decode(o,o.uint32());break;default:o.skipType(7&e)}}return n},fromJSON:e=>({requestId:v(e.requestId)?String(e.requestId):"",query:v(e.query)?t.HistoryQuery.fromJSON(e.query):void 0,response:v(e.response)?t.HistoryResponse.fromJSON(e.response):void 0}),toJSON(e){const r={};return void 0!==e.requestId&&(r.requestId=e.requestId),void 0!==e.query&&(r.query=e.query?t.HistoryQuery.toJSON(e.query):void 0),void 0!==e.response&&(r.response=e.response?t.HistoryResponse.toJSON(e.response):void 0),r},fromPartial(e){const r={requestId:"",query:void 0,response:void 0};return r.requestId=e.requestId??"",r.query=void 0!==e.query&&null!==e.query?t.HistoryQuery.fromPartial(e.query):void 0,r.response=void 0!==e.response&&null!==e.response?t.HistoryResponse.fromPartial(e.response):void 0,r}};var h=(()=>{if(void 0!==h)return h;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r.g)return r.g;throw"Unable to locate global object"})();const y=h.atob||(e=>h.Buffer.from(e,"base64").toString("binary"));function g(e){const t=y(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;++e)r[e]=t.charCodeAt(e);return r}const b=h.btoa||(e=>h.Buffer.from(e,"binary").toString("base64"));function m(e){if(e.gt(Number.MAX_SAFE_INTEGER))throw new h.Error("Value is larger than Number.MAX_SAFE_INTEGER");return e.toNumber()}function v(e){return null!=e}s.default.util.Long!==i.default&&(s.default.util.Long=i.default,s.default.configure())},43094:()=>{},69159:()=>{},35883:()=>{},46601:()=>{},89214:()=>{},71922:()=>{},2363:()=>{},5696:()=>{},89408:()=>{},57600:()=>{},62678:()=>{},25819:()=>{},52361:()=>{},94616:()=>{},6567:()=>{}},r={};function o(e){var i=r[e];if(void 0!==i)return i.exports;var s=r[e]={id:e,loaded:!1,exports:{}};return t[e].call(s.exports,s,s.exports,o),s.loaded=!0,s.exports}o.m=t,o.amdO={},e=[],o.O=(t,r,i,s)=>{if(!r){var n=1/0;for(d=0;d<e.length;d++){for(var[r,i,s]=e[d],a=!0,u=0;u<r.length;u++)(!1&s||n>=s)&&Object.keys(o.O).every((e=>o.O[e](r[u])))?r.splice(u--,1):(a=!1,s<n&&(n=s));if(a){e.splice(d--,1);var c=i();void 0!==c&&(t=c)}}return t}s=s||0;for(var d=e.length;d>0&&e[d-1][2]>s;d--)e[d]=e[d-1];e[d]=[r,i,s]},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e={204:0};o.O.j=t=>0===e[t];var t=(t,r)=>{var i,s,[n,a,u]=r,c=0;if(n.some((t=>0!==e[t]))){for(i in a)o.o(a,i)&&(o.m[i]=a[i]);if(u)var d=u(o)}for(t&&t(r);c<n.length;c++)s=n[c],o.o(e,s)&&e[s]&&e[s][0](),e[n[c]]=0;return o.O(d)},r=this.webpackChunkjswaku=this.webpackChunkjswaku||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var i=o.O(void 0,[216],(()=>o(63607)));return o.O(i)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,