(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["jswaku"] = factory();
	else
		root["jswaku"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.proto = exports.StoreCodec = exports.WakuStore = exports.PageDirection = exports.waku_store = exports.RelayCodecs = exports.WakuRelay = exports.waku_relay = exports.PushResponse = exports.LightPushCodec = exports.WakuLightPush = exports.waku_light_push = exports.getPublicKey = exports.generateSymmetricKey = exports.generatePrivateKey = exports.WakuMessage = exports.waku_message = exports.DefaultPubSubTopic = exports.Waku = exports.waku = exports.utils = exports.enr = exports.discovery = exports.getNodesFromHostedJson = void 0;
var discovery_1 = __webpack_require__(/*! ./lib/discovery */ "./src/lib/discovery/index.ts");
Object.defineProperty(exports, "getNodesFromHostedJson", ({ enumerable: true, get: function () { return discovery_1.getNodesFromHostedJson; } }));
exports.discovery = __importStar(__webpack_require__(/*! ./lib/discovery */ "./src/lib/discovery/index.ts"));
exports.enr = __importStar(__webpack_require__(/*! ./lib/enr */ "./src/lib/enr/index.ts"));
exports.utils = __importStar(__webpack_require__(/*! ./lib/utils */ "./src/lib/utils.ts"));
exports.waku = __importStar(__webpack_require__(/*! ./lib/waku */ "./src/lib/waku.ts"));
var waku_1 = __webpack_require__(/*! ./lib/waku */ "./src/lib/waku.ts");
Object.defineProperty(exports, "Waku", ({ enumerable: true, get: function () { return waku_1.Waku; } }));
Object.defineProperty(exports, "DefaultPubSubTopic", ({ enumerable: true, get: function () { return waku_1.DefaultPubSubTopic; } }));
exports.waku_message = __importStar(__webpack_require__(/*! ./lib/waku_message */ "./src/lib/waku_message/index.ts"));
var waku_message_1 = __webpack_require__(/*! ./lib/waku_message */ "./src/lib/waku_message/index.ts");
Object.defineProperty(exports, "WakuMessage", ({ enumerable: true, get: function () { return waku_message_1.WakuMessage; } }));
var version_1_1 = __webpack_require__(/*! ./lib/waku_message/version_1 */ "./src/lib/waku_message/version_1.ts");
Object.defineProperty(exports, "generatePrivateKey", ({ enumerable: true, get: function () { return version_1_1.generatePrivateKey; } }));
Object.defineProperty(exports, "generateSymmetricKey", ({ enumerable: true, get: function () { return version_1_1.generateSymmetricKey; } }));
Object.defineProperty(exports, "getPublicKey", ({ enumerable: true, get: function () { return version_1_1.getPublicKey; } }));
exports.waku_light_push = __importStar(__webpack_require__(/*! ./lib/waku_light_push */ "./src/lib/waku_light_push/index.ts"));
var waku_light_push_1 = __webpack_require__(/*! ./lib/waku_light_push */ "./src/lib/waku_light_push/index.ts");
Object.defineProperty(exports, "WakuLightPush", ({ enumerable: true, get: function () { return waku_light_push_1.WakuLightPush; } }));
Object.defineProperty(exports, "LightPushCodec", ({ enumerable: true, get: function () { return waku_light_push_1.LightPushCodec; } }));
Object.defineProperty(exports, "PushResponse", ({ enumerable: true, get: function () { return waku_light_push_1.PushResponse; } }));
exports.waku_relay = __importStar(__webpack_require__(/*! ./lib/waku_relay */ "./src/lib/waku_relay/index.ts"));
var waku_relay_1 = __webpack_require__(/*! ./lib/waku_relay */ "./src/lib/waku_relay/index.ts");
Object.defineProperty(exports, "WakuRelay", ({ enumerable: true, get: function () { return waku_relay_1.WakuRelay; } }));
Object.defineProperty(exports, "RelayCodecs", ({ enumerable: true, get: function () { return waku_relay_1.RelayCodecs; } }));
exports.waku_store = __importStar(__webpack_require__(/*! ./lib/waku_store */ "./src/lib/waku_store/index.ts"));
var waku_store_1 = __webpack_require__(/*! ./lib/waku_store */ "./src/lib/waku_store/index.ts");
Object.defineProperty(exports, "PageDirection", ({ enumerable: true, get: function () { return waku_store_1.PageDirection; } }));
Object.defineProperty(exports, "WakuStore", ({ enumerable: true, get: function () { return waku_store_1.WakuStore; } }));
Object.defineProperty(exports, "StoreCodec", ({ enumerable: true, get: function () { return waku_store_1.StoreCodec; } }));
exports.proto = __importStar(__webpack_require__(/*! ./proto */ "./src/proto/index.ts"));


/***/ }),

/***/ "./src/lib/discovery/bootstrap.ts":
/*!****************************************!*\
  !*** ./src/lib/discovery/bootstrap.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Bootstrap = void 0;
const debug_1 = __importDefault(__webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js"));
const multiaddr_1 = __webpack_require__(/*! multiaddr */ "./node_modules/multiaddr/src/index.js");
const dns_1 = __webpack_require__(/*! ./dns */ "./src/lib/discovery/dns.ts");
const index_1 = __webpack_require__(/*! ./index */ "./src/lib/discovery/index.ts");
const dbg = debug_1.default('waku:discovery:bootstrap');
/**
 * Parse options and expose function to return bootstrap peer addresses.
 */
class Bootstrap {
    constructor(opts) {
        const maxPeers = opts.maxPeers ?? Bootstrap.DefaultMaxPeers;
        if (opts.default) {
            dbg('Use hosted list of peers.');
            this.getBootstrapPeers = index_1.getNodesFromHostedJson.bind({}, undefined, undefined, maxPeers);
        }
        else if (opts.peers !== undefined && opts.peers.length > 0) {
            dbg('Use provided list of peers.');
            const allPeers = opts.peers.map((node) => new multiaddr_1.Multiaddr(node));
            const peers = index_1.getPseudoRandomSubset(allPeers, maxPeers);
            this.getBootstrapPeers = () => Promise.resolve(peers);
        }
        else if (typeof opts.getPeers === 'function') {
            dbg('Bootstrap: Use provided getPeers function.');
            const getPeers = opts.getPeers;
            this.getBootstrapPeers = async () => {
                const allPeers = await getPeers();
                return index_1.getPseudoRandomSubset(allPeers, maxPeers).map((node) => new multiaddr_1.Multiaddr(node));
            };
        }
        else if (opts.enrUrl) {
            const enrUrl = opts.enrUrl;
            dbg('Use provided EIP-1459 ENR Tree URL.');
            const dns = dns_1.DnsNodeDiscovery.dnsOverHttp();
            this.getBootstrapPeers = async () => {
                const enrs = await dns.getPeers(maxPeers, [enrUrl]);
                dbg(`Found ${enrs.length} peers`);
                return enrs.map((enr) => enr.getFullMultiaddrs()).flat();
            };
        }
        else {
            dbg('No bootstrap method specified, no peer will be returned');
            this.getBootstrapPeers = undefined;
        }
    }
}
exports.Bootstrap = Bootstrap;
Bootstrap.DefaultMaxPeers = 1;


/***/ }),

/***/ "./src/lib/discovery/dns.ts":
/*!**********************************!*\
  !*** ./src/lib/discovery/dns.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DnsNodeDiscovery = void 0;
const assert_1 = __importDefault(__webpack_require__(/*! assert */ "./node_modules/assert/build/assert.js"));
const debug_1 = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
const enr_1 = __webpack_require__(/*! ../enr */ "./src/lib/enr/index.ts");
const dns_over_https_1 = __webpack_require__(/*! ./dns_over_https */ "./src/lib/discovery/dns_over_https.ts");
const enrtree_1 = __webpack_require__(/*! ./enrtree */ "./src/lib/discovery/enrtree.ts");
const dbg = debug_1.debug('waku:discovery:dns');
class DnsNodeDiscovery {
    constructor(dns) {
        this._errorTolerance = 10;
        this._DNSTreeCache = {};
        this.dns = dns;
    }
    static dnsOverHttp(endpoints) {
        const dnsClient = new dns_over_https_1.DnsOverHttps(endpoints);
        return new DnsNodeDiscovery(dnsClient);
    }
    /**
     * Returns a list of verified peers listed in an EIP-1459 DNS tree. Method may
     * return fewer peers than requested if `maxQuantity` is larger than the number
     * of ENR records or the number of errors/duplicate peers encountered by randomized
     * search exceeds `maxQuantity` plus the `errorTolerance` factor.
     */
    async getPeers(maxQuantity, enrTreeUrls) {
        let totalSearches = 0;
        const peers = [];
        const networkIndex = Math.floor(Math.random() * enrTreeUrls.length);
        const { publicKey, domain } = enrtree_1.ENRTree.parseTree(enrTreeUrls[networkIndex]);
        while (peers.length < maxQuantity &&
            totalSearches < maxQuantity + this._errorTolerance) {
            const context = {
                domain,
                publicKey,
                visits: {},
            };
            const peer = await this._search(domain, context);
            if (peer && isNewPeer(peer, peers)) {
                peers.push(peer);
                dbg(`got new peer candidate from DNS address=${peer.nodeId}@${peer.ip}`);
            }
            totalSearches++;
        }
        return peers;
    }
    /**
     * Runs a recursive, randomized descent of the DNS tree to retrieve a single
     * ENR record as an ENR. Returns null if parsing or DNS resolution fails.
     */
    async _search(subdomain, context) {
        const entry = await this._getTXTRecord(subdomain, context);
        context.visits[subdomain] = true;
        let next;
        let branches;
        const entryType = getEntryType(entry);
        try {
            switch (entryType) {
                case enrtree_1.ENRTree.ROOT_PREFIX:
                    next = enrtree_1.ENRTree.parseAndVerifyRoot(entry, context.publicKey);
                    return await this._search(next, context);
                case enrtree_1.ENRTree.BRANCH_PREFIX:
                    branches = enrtree_1.ENRTree.parseBranch(entry);
                    next = selectRandomPath(branches, context);
                    return await this._search(next, context);
                case enrtree_1.ENRTree.RECORD_PREFIX:
                    return enr_1.ENR.decodeTxt(entry);
                default:
                    return null;
            }
        }
        catch (error) {
            dbg(`Failed to search DNS tree ${entryType} at subdomain ${subdomain}: ${error}`);
            return null;
        }
    }
    /**
     * Retrieves the TXT record stored at a location from either
     * this DNS tree cache or via DNS query
     */
    async _getTXTRecord(subdomain, context) {
        if (this._DNSTreeCache[subdomain]) {
            return this._DNSTreeCache[subdomain];
        }
        // Location is either the top level tree entry host or a subdomain of it.
        const location = subdomain !== context.domain
            ? `${subdomain}.${context.domain}`
            : context.domain;
        const response = await this.dns.resolveTXT(location);
        assert_1.default(response.length, 'Received empty result array while fetching TXT record');
        assert_1.default(response[0].length, 'Received empty TXT record');
        // Branch entries can be an array of strings of comma delimited subdomains, with
        // some subdomain strings split across the array elements
        const result = response.join('');
        this._DNSTreeCache[subdomain] = result;
        return result;
    }
}
exports.DnsNodeDiscovery = DnsNodeDiscovery;
function getEntryType(entry) {
    if (entry.startsWith(enrtree_1.ENRTree.ROOT_PREFIX))
        return enrtree_1.ENRTree.ROOT_PREFIX;
    if (entry.startsWith(enrtree_1.ENRTree.BRANCH_PREFIX))
        return enrtree_1.ENRTree.BRANCH_PREFIX;
    if (entry.startsWith(enrtree_1.ENRTree.RECORD_PREFIX))
        return enrtree_1.ENRTree.RECORD_PREFIX;
    return '';
}
/**
 * Returns a randomly selected subdomain string from the list provided by a branch
 * entry record.
 *
 * The client must track subdomains which are already resolved to avoid
 * going into an infinite loop b/c branch entries can contain
 * circular references. It’s in the client’s best interest to traverse the
 * tree in random order.
 */
function selectRandomPath(branches, context) {
    // Identify domains already visited in this traversal of the DNS tree.
    // Then filter against them to prevent cycles.
    const circularRefs = {};
    for (const [idx, subdomain] of branches.entries()) {
        if (context.visits[subdomain]) {
            circularRefs[idx] = true;
        }
    }
    // If all possible paths are circular...
    if (Object.keys(circularRefs).length === branches.length) {
        throw new Error('Unresolvable circular path detected');
    }
    // Randomly select a viable path
    let index;
    do {
        index = Math.floor(Math.random() * branches.length);
    } while (circularRefs[index]);
    return branches[index];
}
/**
 * @returns false if candidate peer already exists in the
 *         current collection of peers based on the node id value;
 *         true otherwise.
 */
function isNewPeer(peer, peers) {
    if (!peer || !peer.nodeId)
        return false;
    for (const existingPeer of peers) {
        if (peer.nodeId === existingPeer.nodeId) {
            return false;
        }
    }
    return true;
}


/***/ }),

/***/ "./src/lib/discovery/dns_over_https.ts":
/*!*********************************************!*\
  !*** ./src/lib/discovery/dns_over_https.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DnsOverHttps = void 0;
const dns_query_1 = __webpack_require__(/*! dns-query */ "./node_modules/dns-query/index.js");
const { cloudflare, google, opendns } = dns_query_1.endpoints;
class DnsOverHttps {
    /**
     * Create new Dns-Over-Http DNS client.
     *
     * @param endpoints The endpoints for Dns-Over-Https queries.
     * See [dns-query](https://www.npmjs.com/package/dns-query) for details.
     * Defaults to cloudflare, google and opendns.
     *
     * @throws {code: string} If DNS query fails.
     */
    constructor(endpoints = [cloudflare, google, opendns]) {
        this.endpoints = endpoints;
    }
    async resolveTXT(domain) {
        const response = await dns_query_1.query({
            questions: [{ type: 'TXT', name: domain }],
        });
        const answers = response.answers;
        const data = answers.map((a) => a.data);
        const result = [];
        data.forEach((d) => {
            if (typeof d === 'string') {
                result.push(d);
            }
            else if (Array.isArray(d)) {
                d.forEach((sd) => {
                    if (typeof sd === 'string') {
                        result.push(sd);
                    }
                    else {
                        result.push(Buffer.from(sd).toString('utf-8'));
                    }
                });
            }
            else {
                result.push(Buffer.from(d).toString('utf-8'));
            }
        });
        return result;
    }
}
exports.DnsOverHttps = DnsOverHttps;


/***/ }),

/***/ "./src/lib/discovery/enrtree.ts":
/*!**************************************!*\
  !*** ./src/lib/discovery/enrtree.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ENRTree = void 0;
const assert_1 = __importDefault(__webpack_require__(/*! assert */ "./node_modules/assert/build/assert.js"));
const base64url_1 = __importDefault(__webpack_require__(/*! base64url */ "./node_modules/base64url/index.js"));
const base32 = __importStar(__webpack_require__(/*! hi-base32 */ "./node_modules/hi-base32/src/base32.js"));
const secp256k1_1 = __webpack_require__(/*! secp256k1 */ "./node_modules/secp256k1/elliptic.js");
const enr_1 = __webpack_require__(/*! ../enr */ "./src/lib/enr/index.ts");
const utils_1 = __webpack_require__(/*! ../utils */ "./src/lib/utils.ts");
class ENRTree {
    /**
     * Extracts the branch subdomain referenced by a DNS tree root string after verifying
     * the root record signature with its base32 compressed public key.
     */
    static parseAndVerifyRoot(root, publicKey) {
        assert_1.default(root.startsWith(this.ROOT_PREFIX), `ENRTree root entry must start with '${this.ROOT_PREFIX}'`);
        const rootValues = ENRTree.parseRootValues(root);
        const decodedPublicKey = base32.decode.asBytes(publicKey);
        // The signature is a 65-byte secp256k1 over the keccak256 hash
        // of the record content, excluding the `sig=` part, encoded as URL-safe base64 string
        // (Trailing recovery bit must be trimmed to pass `ecdsaVerify` method)
        const signedComponent = root.split(' sig')[0];
        const signedComponentBuffer = Buffer.from(signedComponent);
        const signatureBuffer = base64url_1.default
            .toBuffer(rootValues.signature)
            .slice(0, 64);
        const keyBuffer = Buffer.from(decodedPublicKey);
        const isVerified = secp256k1_1.ecdsaVerify(signatureBuffer, utils_1.keccak256Buf(signedComponentBuffer), keyBuffer);
        assert_1.default(isVerified, 'Unable to verify ENRTree root signature');
        return rootValues.eRoot;
    }
    static parseRootValues(txt) {
        const matches = txt.match(/^enrtree-root:v1 e=([^ ]+) l=([^ ]+) seq=(\d+) sig=([^ ]+)$/);
        assert_1.default.ok(Array.isArray(matches), 'Could not parse ENRTree root entry');
        matches.shift(); // The first entry is the full match
        const [eRoot, lRoot, seq, signature] = matches;
        assert_1.default.ok(eRoot, "Could not parse 'e' value from ENRTree root entry");
        assert_1.default.ok(lRoot, "Could not parse 'l' value from ENRTree root entry");
        assert_1.default.ok(seq, "Could not parse 'seq' value from ENRTree root entry");
        assert_1.default.ok(signature, "Could not parse 'sig' value from ENRTree root entry");
        return { eRoot, lRoot, seq: Number(seq), signature };
    }
    /**
     * Returns the public key and top level domain of an ENR tree entry.
     * The domain is the starting point for traversing a set of linked DNS TXT records
     * and the public key is used to verify the root entry record
     */
    static parseTree(tree) {
        assert_1.default(tree.startsWith(this.TREE_PREFIX), `ENRTree tree entry must start with '${this.TREE_PREFIX}'`);
        const matches = tree.match(/^enrtree:\/\/([^@]+)@(.+)$/);
        assert_1.default.ok(Array.isArray(matches), 'Could not parse ENRTree tree entry');
        matches.shift(); // The first entry is the full match
        const [publicKey, domain] = matches;
        assert_1.default.ok(publicKey, 'Could not parse public key from ENRTree tree entry');
        assert_1.default.ok(domain, 'Could not parse domain from ENRTree tree entry');
        return { publicKey, domain };
    }
    /**
     * Returns subdomains listed in an ENR branch entry. These in turn lead to
     * either further branch entries or ENR records.
     */
    static parseBranch(branch) {
        assert_1.default(branch.startsWith(this.BRANCH_PREFIX), `ENRTree branch entry must start with '${this.BRANCH_PREFIX}'`);
        return branch.split(this.BRANCH_PREFIX)[1].split(',');
    }
}
exports.ENRTree = ENRTree;
ENRTree.RECORD_PREFIX = enr_1.ENR.RECORD_PREFIX;
ENRTree.TREE_PREFIX = 'enrtree:';
ENRTree.BRANCH_PREFIX = 'enrtree-branch:';
ENRTree.ROOT_PREFIX = 'enrtree-root:';


/***/ }),

/***/ "./src/lib/discovery/hosted_json.ts":
/*!******************************************!*\
  !*** ./src/lib/discovery/hosted_json.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getNodesFromHostedJson = void 0;
/**
 * GET list of nodes from remote HTTP host.
 *
 * Default behavior is to return nodes hosted by Status.
 *
 * @param path The property path to access the node list. The result should be
 * a string, a string array or an object. If the result is an object then the
 * values of the objects are used as multiaddresses. For example, if the GET
 * request returns `{ foo: { bar: [address1, address2] } }` then `path` should be
 * `[ "foo", "bar" ]`.
 * @param url Remote host containing bootstrap peers in JSON format.
 * @param wantedNumber The number of connections desired. Defaults to [DefaultWantedNumber].
 *
 * @returns An array of multiaddresses.
 * @throws If the remote host is unreachable or the response cannot be parsed
 * according to the passed _path_.
 */
const axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/index.js"));
const debug_1 = __importDefault(__webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js"));
const multiaddr_1 = __webpack_require__(/*! multiaddr */ "./node_modules/multiaddr/src/index.js");
const index_1 = __webpack_require__(/*! ./index */ "./src/lib/discovery/index.ts");
const dbg = debug_1.default('waku:discovery');
const DefaultWantedNumber = 1;
async function getNodesFromHostedJson(path = ['fleets', 'wakuv2.prod', 'waku-websocket'], url = 'https://fleets.status.im/', wantedNumber = DefaultWantedNumber) {
    if (wantedNumber <= 0) {
        return [];
    }
    const res = await axios_1.default.get(url, {
        headers: { 'Content-Type': 'application/json' },
    });
    let nodes = res.data;
    for (const prop of path) {
        if (nodes[prop] === undefined) {
            dbg(`Failed to retrieve bootstrap nodes: ${prop} does not exist on `, nodes);
            throw `Failed to retrieve bootstrap nodes: ${prop} does not exist on ${JSON.stringify(nodes)}`;
        }
        nodes = nodes[prop];
    }
    if (Array.isArray(nodes)) {
        return index_1.getPseudoRandomSubset(nodes, wantedNumber).map((node) => new multiaddr_1.Multiaddr(node));
    }
    if (typeof nodes === 'string') {
        return [new multiaddr_1.Multiaddr(nodes)];
    }
    if (typeof nodes === 'object') {
        nodes = Object.values(nodes);
        nodes = nodes.map((node) => new multiaddr_1.Multiaddr(node));
        return index_1.getPseudoRandomSubset(nodes, wantedNumber);
    }
    throw `Failed to retrieve bootstrap nodes: response format is not supported: ${JSON.stringify(nodes)}`;
}
exports.getNodesFromHostedJson = getNodesFromHostedJson;


/***/ }),

/***/ "./src/lib/discovery/index.ts":
/*!************************************!*\
  !*** ./src/lib/discovery/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPseudoRandomSubset = exports.ENRTree = exports.DnsOverHttps = exports.DnsNodeDiscovery = exports.Bootstrap = exports.getNodesFromHostedJson = void 0;
const utils_1 = __webpack_require__(/*! libp2p-gossipsub/src/utils */ "./node_modules/libp2p-gossipsub/src/utils/index.js");
var hosted_json_1 = __webpack_require__(/*! ./hosted_json */ "./src/lib/discovery/hosted_json.ts");
Object.defineProperty(exports, "getNodesFromHostedJson", ({ enumerable: true, get: function () { return hosted_json_1.getNodesFromHostedJson; } }));
var bootstrap_1 = __webpack_require__(/*! ./bootstrap */ "./src/lib/discovery/bootstrap.ts");
Object.defineProperty(exports, "Bootstrap", ({ enumerable: true, get: function () { return bootstrap_1.Bootstrap; } }));
var dns_1 = __webpack_require__(/*! ./dns */ "./src/lib/discovery/dns.ts");
Object.defineProperty(exports, "DnsNodeDiscovery", ({ enumerable: true, get: function () { return dns_1.DnsNodeDiscovery; } }));
var dns_over_https_1 = __webpack_require__(/*! ./dns_over_https */ "./src/lib/discovery/dns_over_https.ts");
Object.defineProperty(exports, "DnsOverHttps", ({ enumerable: true, get: function () { return dns_over_https_1.DnsOverHttps; } }));
var enrtree_1 = __webpack_require__(/*! ./enrtree */ "./src/lib/discovery/enrtree.ts");
Object.defineProperty(exports, "ENRTree", ({ enumerable: true, get: function () { return enrtree_1.ENRTree; } }));
function getPseudoRandomSubset(values, wantedNumber) {
    if (values.length <= wantedNumber) {
        return values;
    }
    return utils_1.shuffle(values).slice(0, wantedNumber);
}
exports.getPseudoRandomSubset = getPseudoRandomSubset;


/***/ }),

/***/ "./src/lib/enr/constants.ts":
/*!**********************************!*\
  !*** ./src/lib/enr/constants.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MULTIADDR_LENGTH_SIZE = exports.ERR_NO_SIGNATURE = exports.ERR_INVALID_ID = exports.MAX_RECORD_SIZE = void 0;
// Maximum encoded size of an ENR
exports.MAX_RECORD_SIZE = 300;
exports.ERR_INVALID_ID = 'Invalid record id';
exports.ERR_NO_SIGNATURE = 'No valid signature found';
// The maximum length of byte size of a multiaddr to encode in the `multiaddr` field
// The size is a big endian 16-bit unsigned integer
exports.MULTIADDR_LENGTH_SIZE = 2;


/***/ }),

/***/ "./src/lib/enr/create.ts":
/*!*******************************!*\
  !*** ./src/lib/enr/create.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createNodeId = void 0;
const utils_1 = __webpack_require__(/*! ../utils */ "./src/lib/utils.ts");
function createNodeId(buffer) {
    if (buffer.length !== 32) {
        throw new Error('NodeId must be 32 bytes in length');
    }
    return utils_1.bufToHex(buffer);
}
exports.createNodeId = createNodeId;


/***/ }),

/***/ "./src/lib/enr/enr.ts":
/*!****************************!*\
  !*** ./src/lib/enr/enr.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ENR = void 0;
const base64url_1 = __importDefault(__webpack_require__(/*! base64url */ "./node_modules/base64url/index.js"));
const bigint_buffer_1 = __webpack_require__(/*! bigint-buffer */ "./node_modules/bigint-buffer/dist/browser.js");
const multiaddr_1 = __webpack_require__(/*! multiaddr */ "./node_modules/multiaddr/src/index.js");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: No types available
const convert_1 = __importDefault(__webpack_require__(/*! multiaddr/src/convert */ "./node_modules/multiaddr/src/convert.js"));
const RLP = __importStar(__webpack_require__(/*! rlp */ "./node_modules/rlp/dist.browser/index.js"));
const varint_1 = __webpack_require__(/*! varint */ "./node_modules/varint/index.js");
const constants_1 = __webpack_require__(/*! ./constants */ "./src/lib/enr/constants.ts");
const keypair_1 = __webpack_require__(/*! ./keypair */ "./src/lib/enr/keypair/index.ts");
const v4 = __importStar(__webpack_require__(/*! ./v4 */ "./src/lib/enr/v4.ts"));
class ENR extends Map {
    constructor(kvs = {}, seq = 1n, signature = null) {
        super(Object.entries(kvs));
        this.seq = seq;
        this.signature = signature;
    }
    static createV4(publicKey, kvs = {}) {
        return new ENR({
            ...kvs,
            id: Buffer.from('v4'),
            secp256k1: publicKey,
        });
    }
    static createFromPeerId(peerId, kvs = {}) {
        const keypair = keypair_1.createKeypairFromPeerId(peerId);
        switch (keypair.type) {
            case keypair_1.KeypairType.secp256k1:
                return ENR.createV4(keypair.publicKey, kvs);
            default:
                throw new Error();
        }
    }
    static decodeFromValues(decoded) {
        if (!Array.isArray(decoded)) {
            throw new Error('Decoded ENR must be an array');
        }
        if (decoded.length % 2 !== 0) {
            throw new Error('Decoded ENR must have an even number of elements');
        }
        const [signature, seq, ...kvs] = decoded;
        if (!signature || Array.isArray(signature)) {
            throw new Error('Decoded ENR invalid signature: must be a byte array');
        }
        if (!seq || Array.isArray(seq)) {
            throw new Error('Decoded ENR invalid sequence number: must be a byte array');
        }
        const obj = {};
        for (let i = 0; i < kvs.length; i += 2) {
            obj[kvs[i].toString()] = Buffer.from(kvs[i + 1]);
        }
        const enr = new ENR(obj, bigint_buffer_1.toBigIntBE(seq), signature);
        if (!enr.verify(RLP.encode([seq, ...kvs]), signature)) {
            throw new Error('Unable to verify ENR signature');
        }
        return enr;
    }
    static decode(encoded) {
        const decoded = RLP.decode(encoded);
        return ENR.decodeFromValues(decoded);
    }
    static decodeTxt(encoded) {
        if (!encoded.startsWith(this.RECORD_PREFIX)) {
            throw new Error(`"string encoded ENR must start with '${this.RECORD_PREFIX}'`);
        }
        return ENR.decode(base64url_1.default.toBuffer(encoded.slice(4)));
    }
    set(k, v) {
        this.signature = null;
        this.seq++;
        return super.set(k, v);
    }
    get id() {
        const id = this.get('id');
        if (!id)
            throw new Error('id not found.');
        return id.toString('utf8');
    }
    get keypairType() {
        switch (this.id) {
            case 'v4':
                return keypair_1.KeypairType.secp256k1;
            default:
                throw new Error(constants_1.ERR_INVALID_ID);
        }
    }
    get publicKey() {
        switch (this.id) {
            case 'v4':
                return this.get('secp256k1');
            default:
                throw new Error(constants_1.ERR_INVALID_ID);
        }
    }
    get keypair() {
        return keypair_1.createKeypair(this.keypairType, undefined, this.publicKey);
    }
    get peerId() {
        return keypair_1.createPeerIdFromKeypair(this.keypair);
    }
    get nodeId() {
        switch (this.id) {
            case 'v4':
                return v4.nodeId(this.publicKey);
            default:
                throw new Error(constants_1.ERR_INVALID_ID);
        }
    }
    get ip() {
        const raw = this.get('ip');
        if (raw) {
            return convert_1.default.toString(multiaddr_1.protocols.names.ip4.code, raw);
        }
        else {
            return undefined;
        }
    }
    set ip(ip) {
        if (ip) {
            this.set('ip', convert_1.default.toBytes(multiaddr_1.protocols.names.ip4.code, ip));
        }
        else {
            this.delete('ip');
        }
    }
    get tcp() {
        const raw = this.get('tcp');
        if (raw) {
            return Number(convert_1.default.toString(multiaddr_1.protocols.names.tcp.code, raw));
        }
        else {
            return undefined;
        }
    }
    set tcp(port) {
        if (port === undefined) {
            this.delete('tcp');
        }
        else {
            this.set('tcp', convert_1.default.toBytes(multiaddr_1.protocols.names.tcp.code, port));
        }
    }
    get udp() {
        const raw = this.get('udp');
        if (raw) {
            return Number(convert_1.default.toString(multiaddr_1.protocols.names.udp.code, raw));
        }
        else {
            return undefined;
        }
    }
    set udp(port) {
        if (port === undefined) {
            this.delete('udp');
        }
        else {
            this.set('udp', convert_1.default.toBytes(multiaddr_1.protocols.names.udp.code, port));
        }
    }
    get ip6() {
        const raw = this.get('ip6');
        if (raw) {
            return convert_1.default.toString(multiaddr_1.protocols.names.ip6.code, raw);
        }
        else {
            return undefined;
        }
    }
    set ip6(ip) {
        if (ip) {
            this.set('ip6', convert_1.default.toBytes(multiaddr_1.protocols.names.ip6.code, ip));
        }
        else {
            this.delete('ip6');
        }
    }
    get tcp6() {
        const raw = this.get('tcp6');
        if (raw) {
            return Number(convert_1.default.toString(multiaddr_1.protocols.names.tcp.code, raw));
        }
        else {
            return undefined;
        }
    }
    set tcp6(port) {
        if (port === undefined) {
            this.delete('tcp6');
        }
        else {
            this.set('tcp6', convert_1.default.toBytes(multiaddr_1.protocols.names.tcp.code, port));
        }
    }
    get udp6() {
        const raw = this.get('udp6');
        if (raw) {
            return Number(convert_1.default.toString(multiaddr_1.protocols.names.udp.code, raw));
        }
        else {
            return undefined;
        }
    }
    set udp6(port) {
        if (port === undefined) {
            this.delete('udp6');
        }
        else {
            this.set('udp6', convert_1.default.toBytes(multiaddr_1.protocols.names.udp.code, port));
        }
    }
    /**
     * Get the `multiaddrs` field from ENR.
     *
     * This field is used to store multiaddresses that cannot be stored with the current ENR pre-defined keys.
     * These can be a multiaddresses that include encapsulation (e.g. wss) or do not use `ip4` nor `ip6` for the host
     * address (e.g. `dns4`, `dnsaddr`, etc)..
     *
     * If the peer information only contains information that can be represented with the ENR pre-defined keys
     * (ip, tcp, etc) then the usage of [[getLocationMultiaddr]] should be preferred.
     *
     * The multiaddresses stored in this field are expected to be location multiaddresses, ie, peer id less.
     */
    get multiaddrs() {
        const raw = this.get('multiaddrs');
        if (raw) {
            const multiaddrs = [];
            try {
                let index = 0;
                while (index < raw.length) {
                    const sizeBytes = raw.slice(index, index + 2);
                    const size = Buffer.from(sizeBytes).readUInt16BE(0);
                    const multiaddrBytes = raw.slice(index + constants_1.MULTIADDR_LENGTH_SIZE, index + size + constants_1.MULTIADDR_LENGTH_SIZE);
                    const multiaddr = new multiaddr_1.Multiaddr(multiaddrBytes);
                    multiaddrs.push(multiaddr);
                    index += size + constants_1.MULTIADDR_LENGTH_SIZE;
                }
            }
            catch (e) {
                throw new Error('Invalid value in multiaddrs field');
            }
            return multiaddrs;
        }
        else {
            return undefined;
        }
    }
    /**
     * Set the `multiaddrs` field on the ENR.
     *
     * This field is used to store multiaddresses that cannot be stored with the current ENR pre-defined keys.
     * These can be a multiaddresses that include encapsulation (e.g. wss) or do not use `ip4` nor `ip6` for the host
     * address (e.g. `dns4`, `dnsaddr`, etc)..
     *
     * If the peer information only contains information that can be represented with the ENR pre-defined keys
     * (ip, tcp, etc) then the usage of [[setLocationMultiaddr]] should be preferred.
     *
     * The multiaddresses stored in this field must to be location multiaddresses, ie, peer id less.
     */
    set multiaddrs(multiaddrs) {
        if (multiaddrs === undefined) {
            this.delete('multiaddrs');
        }
        else {
            let multiaddrsBuf = Buffer.from([]);
            multiaddrs.forEach((multiaddr) => {
                if (multiaddr.getPeerId())
                    throw new Error('`multiaddr` field MUST not contain peer id');
                const bytes = multiaddr.bytes;
                let buf = Buffer.alloc(2);
                // Prepend the size of the next entry
                const written = buf.writeUInt16BE(bytes.length, 0);
                if (written !== constants_1.MULTIADDR_LENGTH_SIZE) {
                    throw new Error(`Internal error: unsigned 16-bit integer was not written in ${constants_1.MULTIADDR_LENGTH_SIZE} bytes`);
                }
                buf = Buffer.concat([buf, bytes]);
                multiaddrsBuf = Buffer.concat([multiaddrsBuf, buf]);
            });
            this.set('multiaddrs', multiaddrsBuf);
        }
    }
    getLocationMultiaddr(protocol) {
        if (protocol === 'udp') {
            return (this.getLocationMultiaddr('udp4') || this.getLocationMultiaddr('udp6'));
        }
        if (protocol === 'tcp') {
            return (this.getLocationMultiaddr('tcp4') || this.getLocationMultiaddr('tcp6'));
        }
        const isIpv6 = protocol.endsWith('6');
        const ipVal = this.get(isIpv6 ? 'ip6' : 'ip');
        if (!ipVal) {
            return undefined;
        }
        const isUdp = protocol.startsWith('udp');
        const isTcp = protocol.startsWith('tcp');
        let protoName, protoVal;
        if (isUdp) {
            protoName = 'udp';
            protoVal = isIpv6 ? this.get('udp6') : this.get('udp');
        }
        else if (isTcp) {
            protoName = 'tcp';
            protoVal = isIpv6 ? this.get('tcp6') : this.get('tcp');
        }
        else {
            return undefined;
        }
        if (!protoVal) {
            return undefined;
        }
        // Create raw multiaddr buffer
        // multiaddr length is:
        //  1 byte for the ip protocol (ip4 or ip6)
        //  N bytes for the ip address
        //  1 or 2 bytes for the protocol as buffer (tcp or udp)
        //  2 bytes for the port
        const ipMa = multiaddr_1.protocols.names[isIpv6 ? 'ip6' : 'ip4'];
        const ipByteLen = ipMa.size / 8;
        const protoMa = multiaddr_1.protocols.names[protoName];
        const protoBuf = varint_1.encode(protoMa.code);
        const maBuf = new Uint8Array(3 + ipByteLen + protoBuf.length);
        maBuf[0] = ipMa.code;
        maBuf.set(ipVal, 1);
        maBuf.set(protoBuf, 1 + ipByteLen);
        maBuf.set(protoVal, 1 + ipByteLen + protoBuf.length);
        return new multiaddr_1.Multiaddr(maBuf);
    }
    setLocationMultiaddr(multiaddr) {
        const protoNames = multiaddr.protoNames();
        if (protoNames.length !== 2 &&
            protoNames[1] !== 'udp' &&
            protoNames[1] !== 'tcp') {
            throw new Error('Invalid multiaddr');
        }
        const tuples = multiaddr.tuples();
        if (!tuples[0][1] || !tuples[1][1]) {
            throw new Error('Invalid multiaddr');
        }
        // IPv4
        if (tuples[0][0] === 4) {
            this.set('ip', tuples[0][1]);
            this.set(protoNames[1], tuples[1][1]);
        }
        else {
            this.set('ip6', tuples[0][1]);
            this.set(protoNames[1] + '6', tuples[1][1]);
        }
    }
    /**
     * Returns the full multiaddr from the ENR fields matching the provided
     * `protocol` parameter.
     * To return full multiaddrs from the `multiaddrs` ENR field,
     * use [[ENR.getFullMultiaddrs]]
     *
     * @param protocol
     */
    getFullMultiaddr(protocol) {
        const locationMultiaddr = this.getLocationMultiaddr(protocol);
        if (locationMultiaddr) {
            return locationMultiaddr.encapsulate(`/p2p/${this.peerId.toB58String()}`);
        }
        return;
    }
    /**
     * Returns the full multiaddrs from the `multiaddrs` ENR field.
     */
    getFullMultiaddrs() {
        if (this.multiaddrs) {
            return this.multiaddrs.map((ma) => {
                return ma.encapsulate(`/p2p/${this.peerId.toB58String()}`);
            });
        }
        return [];
    }
    verify(data, signature) {
        if (!this.get('id') || this.id !== 'v4') {
            throw new Error(constants_1.ERR_INVALID_ID);
        }
        if (!this.publicKey) {
            throw new Error('Failed to verify ENR: No public key');
        }
        return v4.verify(this.publicKey, data, signature);
    }
    sign(data, privateKey) {
        switch (this.id) {
            case 'v4':
                this.signature = v4.sign(privateKey, data);
                break;
            default:
                throw new Error(constants_1.ERR_INVALID_ID);
        }
        return this.signature;
    }
    encodeToValues(privateKey) {
        // sort keys and flatten into [k, v, k, v, ...]
        const content = Array.from(this.keys())
            .sort((a, b) => a.localeCompare(b))
            .map((k) => [k, this.get(k)])
            .flat();
        content.unshift(Number(this.seq));
        if (privateKey) {
            content.unshift(this.sign(RLP.encode(content), privateKey));
        }
        else {
            if (!this.signature) {
                throw new Error(constants_1.ERR_NO_SIGNATURE);
            }
            content.unshift(this.signature);
        }
        return content;
    }
    encode(privateKey) {
        const encoded = RLP.encode(this.encodeToValues(privateKey));
        if (encoded.length >= constants_1.MAX_RECORD_SIZE) {
            throw new Error('ENR must be less than 300 bytes');
        }
        return encoded;
    }
    encodeTxt(privateKey) {
        return ENR.RECORD_PREFIX + base64url_1.default.encode(this.encode(privateKey));
    }
}
exports.ENR = ENR;
ENR.RECORD_PREFIX = 'enr:';


/***/ }),

/***/ "./src/lib/enr/index.ts":
/*!******************************!*\
  !*** ./src/lib/enr/index.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.v4 = void 0;
const v4Crypto = __importStar(__webpack_require__(/*! ./v4 */ "./src/lib/enr/v4.ts"));
exports.v4 = v4Crypto;
__exportStar(__webpack_require__(/*! ./constants */ "./src/lib/enr/constants.ts"), exports);
__exportStar(__webpack_require__(/*! ./enr */ "./src/lib/enr/enr.ts"), exports);
__exportStar(__webpack_require__(/*! ./types */ "./src/lib/enr/types.ts"), exports);
__exportStar(__webpack_require__(/*! ./create */ "./src/lib/enr/create.ts"), exports);
__exportStar(__webpack_require__(/*! ./keypair */ "./src/lib/enr/keypair/index.ts"), exports);


/***/ }),

/***/ "./src/lib/enr/keypair/constants.ts":
/*!******************************************!*\
  !*** ./src/lib/enr/keypair/constants.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ERR_INVALID_KEYPAIR_TYPE = exports.ERR_TYPE_NOT_IMPLEMENTED = void 0;
exports.ERR_TYPE_NOT_IMPLEMENTED = 'Keypair type not implemented';
exports.ERR_INVALID_KEYPAIR_TYPE = 'Invalid keypair type';


/***/ }),

/***/ "./src/lib/enr/keypair/index.ts":
/*!**************************************!*\
  !*** ./src/lib/enr/keypair/index.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createKeypairFromPeerId = exports.createPeerIdFromKeypair = exports.createKeypair = exports.generateKeypair = void 0;
const libp2p_crypto_1 = __webpack_require__(/*! libp2p-crypto */ "./node_modules/libp2p-crypto/src/index.js");
const multihashes_1 = __importDefault(__webpack_require__(/*! multihashes */ "./node_modules/multihashes/src/index.js"));
const peer_id_1 = __importDefault(__webpack_require__(/*! peer-id */ "./node_modules/peer-id/src/index.js"));
const { keysPBM, supportedKeys } = libp2p_crypto_1.keys;
const constants_1 = __webpack_require__(/*! ./constants */ "./src/lib/enr/keypair/constants.ts");
const secp256k1_1 = __webpack_require__(/*! ./secp256k1 */ "./src/lib/enr/keypair/secp256k1.ts");
const types_1 = __webpack_require__(/*! ./types */ "./src/lib/enr/keypair/types.ts");
__exportStar(__webpack_require__(/*! ./types */ "./src/lib/enr/keypair/types.ts"), exports);
__exportStar(__webpack_require__(/*! ./secp256k1 */ "./src/lib/enr/keypair/secp256k1.ts"), exports);
async function generateKeypair(type) {
    switch (type) {
        case types_1.KeypairType.secp256k1:
            return await secp256k1_1.Secp256k1Keypair.generate();
        default:
            throw new Error(constants_1.ERR_TYPE_NOT_IMPLEMENTED);
    }
}
exports.generateKeypair = generateKeypair;
function createKeypair(type, privateKey, publicKey) {
    switch (type) {
        case types_1.KeypairType.secp256k1:
            return new secp256k1_1.Secp256k1Keypair(privateKey, publicKey);
        default:
            throw new Error(constants_1.ERR_TYPE_NOT_IMPLEMENTED);
    }
}
exports.createKeypair = createKeypair;
function createPeerIdFromKeypair(keypair) {
    switch (keypair.type) {
        case types_1.KeypairType.secp256k1: {
            // manually create a peer id to avoid expensive ops
            const privKey = keypair.hasPrivateKey()
                ? new supportedKeys.secp256k1.Secp256k1PrivateKey(keypair.privateKey, keypair.publicKey)
                : undefined;
            const pubKey = new supportedKeys.secp256k1.Secp256k1PublicKey(keypair.publicKey);
            const id = multihashes_1.default.encode(pubKey.bytes, 'identity');
            return new peer_id_1.default(id, privKey, pubKey);
        }
        default:
            throw new Error(constants_1.ERR_TYPE_NOT_IMPLEMENTED);
    }
}
exports.createPeerIdFromKeypair = createPeerIdFromKeypair;
function createKeypairFromPeerId(peerId) {
    // pub/private key bytes from peer-id are encoded in protobuf format
    const pub = keysPBM.PublicKey.decode(peerId.pubKey.bytes);
    return createKeypair(pub.Type, peerId.privKey ? Buffer.from(peerId.privKey.marshal()) : undefined, Buffer.from(pub.Data));
}
exports.createKeypairFromPeerId = createKeypairFromPeerId;


/***/ }),

/***/ "./src/lib/enr/keypair/secp256k1.ts":
/*!******************************************!*\
  !*** ./src/lib/enr/keypair/secp256k1.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Secp256k1Keypair = exports.secp256k1PublicKeyToRaw = exports.secp256k1PublicKeyToFull = exports.secp256k1PublicKeyToCompressed = void 0;
const buffer_1 = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");
const crypto_1 = __importDefault(__webpack_require__(/*! crypto */ "./node_modules/crypto-browserify/index.js"));
const secp256k1 = __importStar(__webpack_require__(/*! secp256k1 */ "./node_modules/secp256k1/elliptic.js"));
const types_1 = __webpack_require__(/*! ./types */ "./src/lib/enr/keypair/types.ts");
function secp256k1PublicKeyToCompressed(publicKey) {
    if (publicKey.length === 64) {
        publicKey = buffer_1.Buffer.concat([buffer_1.Buffer.from([4]), publicKey]);
    }
    return buffer_1.Buffer.from(secp256k1.publicKeyConvert(publicKey, true));
}
exports.secp256k1PublicKeyToCompressed = secp256k1PublicKeyToCompressed;
function secp256k1PublicKeyToFull(publicKey) {
    if (publicKey.length === 64) {
        return buffer_1.Buffer.concat([buffer_1.Buffer.from([4]), publicKey]);
    }
    return buffer_1.Buffer.from(secp256k1.publicKeyConvert(publicKey, false));
}
exports.secp256k1PublicKeyToFull = secp256k1PublicKeyToFull;
function secp256k1PublicKeyToRaw(publicKey) {
    return buffer_1.Buffer.from(secp256k1.publicKeyConvert(publicKey, false).slice(1));
}
exports.secp256k1PublicKeyToRaw = secp256k1PublicKeyToRaw;
const Secp256k1Keypair = class Secp256k1Keypair extends types_1.AbstractKeypair {
    constructor(privateKey, publicKey) {
        let pub = publicKey;
        if (pub) {
            pub = secp256k1PublicKeyToCompressed(pub);
        }
        super(privateKey, pub);
        this.type = types_1.KeypairType.secp256k1;
    }
    static async generate() {
        const privateKey = buffer_1.Buffer.from(await randomBytes(32));
        const publicKey = secp256k1.publicKeyCreate(privateKey);
        return new Secp256k1Keypair(privateKey, buffer_1.Buffer.from(publicKey));
    }
    privateKeyVerify(key = this._privateKey) {
        if (key) {
            return secp256k1.privateKeyVerify(key);
        }
        return true;
    }
    publicKeyVerify(key = this._publicKey) {
        if (key) {
            return secp256k1.publicKeyVerify(key);
        }
        return true;
    }
    sign(msg) {
        const { signature, recid } = secp256k1.ecdsaSign(msg, this.privateKey);
        return buffer_1.Buffer.concat([signature, buffer_1.Buffer.from([recid])]);
    }
    verify(msg, sig) {
        return secp256k1.ecdsaVerify(sig, msg, this.publicKey);
    }
};
exports.Secp256k1Keypair = Secp256k1Keypair;
function randomBytes(length) {
    if (typeof window !== 'undefined' && window && window.crypto) {
        const array = new Uint8Array(length);
        window.crypto.getRandomValues(array);
        return array;
    }
    else {
        return crypto_1.default.randomBytes(length);
    }
}


/***/ }),

/***/ "./src/lib/enr/keypair/types.ts":
/*!**************************************!*\
  !*** ./src/lib/enr/keypair/types.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractKeypair = exports.KeypairType = void 0;
var KeypairType;
(function (KeypairType) {
    KeypairType[KeypairType["rsa"] = 0] = "rsa";
    KeypairType[KeypairType["ed25519"] = 1] = "ed25519";
    KeypairType[KeypairType["secp256k1"] = 2] = "secp256k1";
})(KeypairType = exports.KeypairType || (exports.KeypairType = {}));
class AbstractKeypair {
    constructor(privateKey, publicKey) {
        if ((this._privateKey = privateKey) && !this.privateKeyVerify()) {
            throw new Error('Invalid private key');
        }
        if ((this._publicKey = publicKey) && !this.publicKeyVerify()) {
            throw new Error('Invalid private key');
        }
    }
    get privateKey() {
        if (!this._privateKey) {
            throw new Error();
        }
        return this._privateKey;
    }
    get publicKey() {
        if (!this._publicKey) {
            throw new Error();
        }
        return this._publicKey;
    }
    privateKeyVerify() {
        return true;
    }
    publicKeyVerify() {
        return true;
    }
    hasPrivateKey() {
        return Boolean(this._privateKey);
    }
}
exports.AbstractKeypair = AbstractKeypair;


/***/ }),

/***/ "./src/lib/enr/types.ts":
/*!******************************!*\
  !*** ./src/lib/enr/types.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Custom and aliased types for ENRs
Object.defineProperty(exports, "__esModule", ({ value: true }));


/***/ }),

/***/ "./src/lib/enr/v4.ts":
/*!***************************!*\
  !*** ./src/lib/enr/v4.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ENRKeyPair = exports.nodeId = exports.verify = exports.sign = exports.publicKey = exports.createPrivateKey = exports.hash = void 0;
const crypto_1 = __importDefault(__webpack_require__(/*! crypto */ "./node_modules/crypto-browserify/index.js"));
const js_sha3_1 = __webpack_require__(/*! js-sha3 */ "./node_modules/js-sha3/src/sha3.js");
const secp256k1 = __importStar(__webpack_require__(/*! secp256k1 */ "./node_modules/secp256k1/elliptic.js"));
const create_1 = __webpack_require__(/*! ./create */ "./src/lib/enr/create.ts");
function hash(input) {
    return Buffer.from(js_sha3_1.keccak256.arrayBuffer(input));
}
exports.hash = hash;
async function createPrivateKey() {
    return Buffer.from(await randomBytes(32));
}
exports.createPrivateKey = createPrivateKey;
function publicKey(privKey) {
    return Buffer.from(secp256k1.publicKeyCreate(privKey));
}
exports.publicKey = publicKey;
function sign(privKey, msg) {
    const { signature } = secp256k1.ecdsaSign(hash(msg), privKey);
    return Buffer.from(signature);
}
exports.sign = sign;
function verify(pubKey, msg, sig) {
    // Remove the recovery id if present (byte #65)
    return secp256k1.ecdsaVerify(sig.slice(0, 64), hash(msg), pubKey);
}
exports.verify = verify;
function nodeId(pubKey) {
    const uncompressedPubkey = secp256k1.publicKeyConvert(pubKey, false);
    return create_1.createNodeId(hash(uncompressedPubkey.slice(1)));
}
exports.nodeId = nodeId;
class ENRKeyPair {
    constructor(nodeId, privateKey, publicKey) {
        this.nodeId = nodeId;
        this.privateKey = privateKey;
        this.publicKey = publicKey;
    }
    static async create(privateKey) {
        if (privateKey) {
            if (!secp256k1.privateKeyVerify(privateKey)) {
                throw new Error('Invalid private key');
            }
        }
        const _privateKey = privateKey || (await createPrivateKey());
        const _publicKey = publicKey(_privateKey);
        const _nodeId = nodeId(_publicKey);
        return new ENRKeyPair(_nodeId, _privateKey, _publicKey);
    }
    sign(msg) {
        return sign(this.privateKey, msg);
    }
    verify(msg, sig) {
        return verify(this.publicKey, msg, sig);
    }
}
exports.ENRKeyPair = ENRKeyPair;
function randomBytes(length) {
    if (typeof window !== 'undefined' && window && window.crypto) {
        const array = new Uint8Array(length);
        window.crypto.getRandomValues(array);
        return array;
    }
    else {
        return crypto_1.default.randomBytes(length);
    }
}


/***/ }),

/***/ "./src/lib/select_peer.ts":
/*!********************************!*\
  !*** ./src/lib/select_peer.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPeersForProtocol = exports.selectRandomPeer = void 0;
/**
 * Returns a pseudo-random peer that supports the given protocol.
 * Useful for protocols such as store and light push
 */
function selectRandomPeer(peers) {
    if (peers.length === 0)
        return;
    const index = Math.round(Math.random() * (peers.length - 1));
    return peers[index];
}
exports.selectRandomPeer = selectRandomPeer;
/**
 * Returns the list of peers that supports the given protocol.
 */
function getPeersForProtocol(libp2p, protocol) {
    return Array.from(libp2p.peerStore.peers.values()).filter((peer) => peer.protocols.includes(protocol));
}
exports.getPeersForProtocol = getPeersForProtocol;


/***/ }),

/***/ "./src/lib/utils.ts":
/*!**************************!*\
  !*** ./src/lib/utils.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.keccak256Buf = exports.equalByteArrays = exports.bufToHex = exports.hexToBuf = void 0;
const js_sha3_1 = __webpack_require__(/*! js-sha3 */ "./node_modules/js-sha3/src/sha3.js");
function hexToBuf(hex) {
    if (typeof hex === 'string') {
        return Buffer.from(hex.replace(/^0x/i, ''), 'hex');
    }
    else {
        return Buffer.from(hex);
    }
}
exports.hexToBuf = hexToBuf;
function bufToHex(buf) {
    const _buf = Buffer.from(buf);
    return _buf.toString('hex');
}
exports.bufToHex = bufToHex;
function equalByteArrays(a, b) {
    let aBuf;
    let bBuf;
    if (typeof a === 'string') {
        aBuf = hexToBuf(a);
    }
    else {
        aBuf = Buffer.from(a);
    }
    if (typeof b === 'string') {
        bBuf = hexToBuf(b);
    }
    else {
        bBuf = Buffer.from(b);
    }
    return aBuf.compare(bBuf) === 0;
}
exports.equalByteArrays = equalByteArrays;
function keccak256Buf(message) {
    return Buffer.from(js_sha3_1.keccak256.arrayBuffer(message));
}
exports.keccak256Buf = keccak256Buf;


/***/ }),

/***/ "./src/lib/waku.ts":
/*!*************************!*\
  !*** ./src/lib/waku.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Waku = exports.DefaultPubSubTopic = exports.DefaultRelayKeepAliveValueSecs = exports.DefaultPingKeepAliveValueSecs = void 0;
const noise_1 = __webpack_require__(/*! @chainsafe/libp2p-noise/dist/src/noise */ "./node_modules/@chainsafe/libp2p-noise/dist/src/noise.js");
const debug_1 = __importDefault(__webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js"));
const libp2p_1 = __importDefault(__webpack_require__(/*! libp2p */ "./node_modules/libp2p/src/index.js"));
const libp2p_bootstrap_1 = __importDefault(__webpack_require__(/*! libp2p-bootstrap */ "./node_modules/libp2p-bootstrap/src/index.js"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: No types available
const libp2p_mplex_1 = __importDefault(__webpack_require__(/*! libp2p-mplex */ "./node_modules/libp2p-mplex/src/index.js"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: No types available
const libp2p_websockets_1 = __importDefault(__webpack_require__(/*! libp2p-websockets */ "./node_modules/libp2p-websockets/src/index.js"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: No types available
const filters_1 = __importDefault(__webpack_require__(/*! libp2p-websockets/src/filters */ "./node_modules/libp2p-websockets/src/filters.js"));
const ping_1 = __importDefault(__webpack_require__(/*! libp2p/src/ping */ "./node_modules/libp2p/src/ping/index.js"));
const multiaddr_1 = __webpack_require__(/*! multiaddr */ "./node_modules/multiaddr/src/index.js");
const peer_id_1 = __importDefault(__webpack_require__(/*! peer-id */ "./node_modules/peer-id/src/index.js"));
const discovery_1 = __webpack_require__(/*! ./discovery */ "./src/lib/discovery/index.ts");
const select_peer_1 = __webpack_require__(/*! ./select_peer */ "./src/lib/select_peer.ts");
const waku_light_push_1 = __webpack_require__(/*! ./waku_light_push */ "./src/lib/waku_light_push/index.ts");
const waku_message_1 = __webpack_require__(/*! ./waku_message */ "./src/lib/waku_message/index.ts");
const waku_relay_1 = __webpack_require__(/*! ./waku_relay */ "./src/lib/waku_relay/index.ts");
const constants_1 = __webpack_require__(/*! ./waku_relay/constants */ "./src/lib/waku_relay/constants.ts");
const waku_store_1 = __webpack_require__(/*! ./waku_store */ "./src/lib/waku_store/index.ts");
const websocketsTransportKey = libp2p_websockets_1.default.prototype[Symbol.toStringTag];
exports.DefaultPingKeepAliveValueSecs = 0;
exports.DefaultRelayKeepAliveValueSecs = 5 * 60;
/**
 * DefaultPubSubTopic is the default gossipsub topic to use for Waku.
 */
exports.DefaultPubSubTopic = '/waku/2/default-waku/proto';
const dbg = debug_1.default('waku:waku');
class Waku {
    constructor(options, libp2p, store, lightPush) {
        this.libp2p = libp2p;
        this.relay = libp2p.pubsub;
        this.store = store;
        this.lightPush = lightPush;
        this.pingKeepAliveTimers = {};
        this.relayKeepAliveTimers = {};
        const pingKeepAlive = options.pingKeepAlive || exports.DefaultPingKeepAliveValueSecs;
        const relayKeepAlive = options.relayKeepAlive || exports.DefaultRelayKeepAliveValueSecs;
        libp2p.connectionManager.on('peer:connect', (connection) => {
            this.startKeepAlive(connection.remotePeer, pingKeepAlive, relayKeepAlive);
        });
        libp2p.connectionManager.on('peer:disconnect', (connection) => {
            this.stopKeepAlive(connection.remotePeer);
        });
        options?.decryptionKeys?.forEach((key) => {
            this.addDecryptionKey(key);
        });
    }
    /**
     * Create new waku node
     *
     * @param options Takes the same options than `Libp2p`.
     */
    static async create(options) {
        // Get an object in case options or libp2p are undefined
        const libp2pOpts = Object.assign({}, options?.libp2p);
        // Default for Websocket filter is `all`:
        // Returns all TCP and DNS based addresses, both with ws or wss.
        libp2pOpts.config = Object.assign({
            transport: {
                [websocketsTransportKey]: {
                    filter: filters_1.default.all,
                },
            },
        }, options?.libp2p?.config);
        // Pass pubsub topic to relay
        if (options?.pubSubTopic) {
            libp2pOpts.config.pubsub = Object.assign({ pubSubTopic: options.pubSubTopic }, libp2pOpts.config.pubsub);
        }
        libp2pOpts.modules = Object.assign({}, options?.libp2p?.modules);
        // Default transport for libp2p is Websockets
        libp2pOpts.modules = Object.assign({
            transport: [libp2p_websockets_1.default],
        }, options?.libp2p?.modules);
        // streamMuxer, connection encryption and pubsub are overridden
        // as those are the only ones currently supported by Waku nodes.
        libp2pOpts.modules = Object.assign(libp2pOpts.modules, {
            streamMuxer: [libp2p_mplex_1.default],
            connEncryption: [new noise_1.Noise(options?.staticNoiseKey)],
            pubsub: waku_relay_1.WakuRelay,
        });
        if (options?.bootstrap) {
            const bootstrap = new discovery_1.Bootstrap(options?.bootstrap);
            if (bootstrap.getBootstrapPeers !== undefined) {
                try {
                    const list = await bootstrap.getBootstrapPeers();
                    // Note: this overrides any other peer discover
                    libp2pOpts.modules = Object.assign(libp2pOpts.modules, {
                        peerDiscovery: [libp2p_bootstrap_1.default],
                    });
                    libp2pOpts.config.peerDiscovery = {
                        [libp2p_bootstrap_1.default.tag]: {
                            list,
                            enabled: true,
                        },
                    };
                }
                catch (e) {
                    dbg('Failed to retrieve bootstrap nodes', e);
                }
            }
        }
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore: modules property is correctly set thanks to voodoo
        const libp2p = await libp2p_1.default.create(libp2pOpts);
        const wakuStore = new waku_store_1.WakuStore(libp2p, {
            pubSubTopic: options?.pubSubTopic,
        });
        const wakuLightPush = new waku_light_push_1.WakuLightPush(libp2p);
        await libp2p.start();
        return new Waku(options ? options : {}, libp2p, wakuStore, wakuLightPush);
    }
    /**
     * Dials to the provided peer.
     *
     * @param peer The peer to dial
     */
    async dial(peer) {
        return this.libp2p.dialProtocol(peer, [waku_store_1.StoreCodec].concat(waku_relay_1.RelayCodecs));
    }
    /**
     * Add peer to address book, it will be auto-dialed in the background.
     */
    addPeerToAddressBook(peerId, multiaddrs) {
        let peer;
        if (typeof peerId === 'string') {
            peer = peer_id_1.default.createFromB58String(peerId);
        }
        else {
            peer = peerId;
        }
        const addresses = multiaddrs.map((addr) => {
            if (typeof addr === 'string') {
                return multiaddr_1.multiaddr(addr);
            }
            else {
                return addr;
            }
        });
        this.libp2p.peerStore.addressBook.set(peer, addresses);
    }
    async stop() {
        return this.libp2p.stop();
    }
    /**
     * Register a decryption key to attempt decryption of messages received via
     * [[WakuRelay]] and [[WakuStore]]. This can either be a private key for
     * asymmetric encryption or a symmetric key.
     *
     * Strings must be in hex format.
     */
    addDecryptionKey(key, options) {
        this.relay.addDecryptionKey(key, options);
        this.store.addDecryptionKey(key, options);
    }
    /**
     * Delete a decryption key that was used to attempt decryption of messages
     * received via [[WakuRelay]] or [[WakuStore]].
     *
     * Strings must be in hex format.
     */
    deleteDecryptionKey(key) {
        this.relay.deleteDecryptionKey(key);
        this.store.deleteDecryptionKey(key);
    }
    /**
     * Return the local multiaddr with peer id on which libp2p is listening.
     * @throws if libp2p is not listening on localhost
     */
    getLocalMultiaddrWithID() {
        const localMultiaddr = this.libp2p.multiaddrs.find((addr) => addr.toString().match(/127\.0\.0\.1/));
        if (!localMultiaddr || localMultiaddr.toString() === '') {
            throw 'Not listening on localhost';
        }
        return localMultiaddr + '/p2p/' + this.libp2p.peerId.toB58String();
    }
    /**
     * Wait to be connected to a peer. Useful when using the [[CreateOptions.bootstrap]]
     * with [[Waku.create]]. The Promise resolves only once we are connected to a
     * Store peer, Relay peer and Light Push peer.
     */
    async waitForConnectedPeer() {
        const desiredProtocols = [[waku_store_1.StoreCodec], [waku_light_push_1.LightPushCodec], waku_relay_1.RelayCodecs];
        await Promise.all(desiredProtocols.map((desiredProtocolVersions) => {
            const peers = new Array();
            desiredProtocolVersions.forEach((proto) => {
                select_peer_1.getPeersForProtocol(this.libp2p, proto).forEach((peer) => peers.push(peer));
            });
            if (peers.length > 0) {
                return Promise.resolve();
            }
            else {
                // No peer available for this protocol, waiting to connect to one.
                return new Promise((resolve) => {
                    this.libp2p.peerStore.on('change:protocols', ({ protocols: connectedPeerProtocols }) => {
                        desiredProtocolVersions.forEach((desiredProto) => {
                            if (connectedPeerProtocols.includes(desiredProto)) {
                                dbg('Resolving for', desiredProto, connectedPeerProtocols);
                                resolve();
                            }
                        });
                    });
                });
            }
        }));
    }
    startKeepAlive(peerId, pingPeriodSecs, relayPeriodSecs) {
        // Just in case a timer already exist for this peer
        this.stopKeepAlive(peerId);
        const peerIdStr = peerId.toB58String();
        if (pingPeriodSecs !== 0) {
            this.pingKeepAliveTimers[peerIdStr] = setInterval(() => {
                ping_1.default(this.libp2p, peerId);
            }, pingPeriodSecs * 1000);
        }
        if (relayPeriodSecs !== 0) {
            this.relayKeepAliveTimers[peerIdStr] = setInterval(() => {
                waku_message_1.WakuMessage.fromBytes(new Uint8Array(), constants_1.RelayPingContentTopic).then((wakuMsg) => this.relay.send(wakuMsg));
            }, relayPeriodSecs * 1000);
        }
    }
    stopKeepAlive(peerId) {
        const peerIdStr = peerId.toB58String();
        if (this.pingKeepAliveTimers[peerIdStr]) {
            clearInterval(this.pingKeepAliveTimers[peerIdStr]);
            delete this.pingKeepAliveTimers[peerIdStr];
        }
        if (this.relayKeepAliveTimers[peerIdStr]) {
            clearInterval(this.relayKeepAliveTimers[peerIdStr]);
            delete this.relayKeepAliveTimers[peerIdStr];
        }
    }
}
exports.Waku = Waku;


/***/ }),

/***/ "./src/lib/waku_light_push/index.ts":
/*!******************************************!*\
  !*** ./src/lib/waku_light_push/index.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WakuLightPush = exports.PushResponse = exports.LightPushCodec = void 0;
const it_concat_1 = __importDefault(__webpack_require__(/*! it-concat */ "./node_modules/it-concat/index.js"));
const it_length_prefixed_1 = __importDefault(__webpack_require__(/*! it-length-prefixed */ "./node_modules/it-length-prefixed/src/index.js"));
const it_pipe_1 = __importDefault(__webpack_require__(/*! it-pipe */ "./node_modules/it-pipe/index.js"));
const light_push_1 = __webpack_require__(/*! ../../proto/waku/v2/light_push */ "./src/proto/waku/v2/light_push.ts");
Object.defineProperty(exports, "PushResponse", ({ enumerable: true, get: function () { return light_push_1.PushResponse; } }));
const select_peer_1 = __webpack_require__(/*! ../select_peer */ "./src/lib/select_peer.ts");
const waku_1 = __webpack_require__(/*! ../waku */ "./src/lib/waku.ts");
const push_rpc_1 = __webpack_require__(/*! ./push_rpc */ "./src/lib/waku_light_push/push_rpc.ts");
exports.LightPushCodec = '/vac/waku/lightpush/2.0.0-beta1';
/**
 * Implements the [Waku v2 Light Push protocol](https://rfc.vac.dev/spec/19/).
 */
class WakuLightPush {
    constructor(libp2p, options) {
        this.libp2p = libp2p;
        if (options?.pubSubTopic) {
            this.pubSubTopic = options.pubSubTopic;
        }
        else {
            this.pubSubTopic = waku_1.DefaultPubSubTopic;
        }
    }
    async push(message, opts) {
        let peer;
        if (opts?.peerId) {
            peer = this.libp2p.peerStore.get(opts.peerId);
            if (!peer)
                throw 'Peer is unknown';
        }
        else {
            peer = this.randomPeer;
        }
        if (!peer)
            throw 'No peer available';
        if (!peer.protocols.includes(exports.LightPushCodec))
            throw 'Peer does not register waku light push protocol';
        const connection = this.libp2p.connectionManager.get(peer.id);
        if (!connection)
            throw 'Failed to get a connection to the peer';
        const { stream } = await connection.newStream(exports.LightPushCodec);
        try {
            const pubSubTopic = opts?.pubSubTopic
                ? opts.pubSubTopic
                : this.pubSubTopic;
            const query = push_rpc_1.PushRPC.createRequest(message, pubSubTopic);
            const res = await it_pipe_1.default([query.encode()], it_length_prefixed_1.default.encode(), stream, it_length_prefixed_1.default.decode(), it_concat_1.default);
            try {
                const response = push_rpc_1.PushRPC.decode(res.slice()).response;
                if (!response) {
                    console.log('No response in PushRPC');
                    return null;
                }
                return response;
            }
            catch (err) {
                console.log('Failed to decode push reply', err);
            }
        }
        catch (err) {
            console.log('Failed to send waku light push request', err);
        }
        return null;
    }
    /**
     * Returns known peers from the address book (`libp2p.peerStore`) that support
     * light push protocol. Waku may or  may not be currently connected to these peers.
     */
    get peers() {
        return select_peer_1.getPeersForProtocol(this.libp2p, exports.LightPushCodec);
    }
    /**
     * Returns a random peer that supports light push protocol from the address
     * book (`libp2p.peerStore`). Waku may or  may not be currently connected to
     * this peer.
     */
    get randomPeer() {
        return select_peer_1.selectRandomPeer(this.peers);
    }
}
exports.WakuLightPush = WakuLightPush;


/***/ }),

/***/ "./src/lib/waku_light_push/push_rpc.ts":
/*!*********************************************!*\
  !*** ./src/lib/waku_light_push/push_rpc.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PushRPC = void 0;
const minimal_1 = __webpack_require__(/*! protobufjs/minimal */ "./node_modules/protobufjs/minimal.js");
const uuid_1 = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/index.js");
const proto = __importStar(__webpack_require__(/*! ../../proto/waku/v2/light_push */ "./src/proto/waku/v2/light_push.ts"));
class PushRPC {
    constructor(proto) {
        this.proto = proto;
    }
    static createRequest(message, pubSubTopic) {
        return new PushRPC({
            requestId: uuid_1.v4(),
            request: {
                message: message.proto,
                pubSubTopic: pubSubTopic,
            },
            response: undefined,
        });
    }
    static decode(bytes) {
        const res = proto.PushRPC.decode(minimal_1.Reader.create(bytes));
        return new PushRPC(res);
    }
    encode() {
        return proto.PushRPC.encode(this.proto).finish();
    }
    get query() {
        return this.proto.request;
    }
    get response() {
        return this.proto.response;
    }
}
exports.PushRPC = PushRPC;


/***/ }),

/***/ "./src/lib/waku_message/index.ts":
/*!***************************************!*\
  !*** ./src/lib/waku_message/index.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WakuMessage = exports.DecryptionMethod = void 0;
// Ensure that this class matches the proto interface while
const buffer_1 = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");
const debug_1 = __importDefault(__webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js"));
const minimal_1 = __webpack_require__(/*! protobufjs/minimal */ "./node_modules/protobufjs/minimal.js");
// Protecting the user from protobuf oddities
const proto = __importStar(__webpack_require__(/*! ../../proto/waku/v2/message */ "./src/proto/waku/v2/message.ts"));
const version_1 = __importStar(__webpack_require__(/*! ./version_1 */ "./src/lib/waku_message/version_1.ts"));
const DefaultVersion = 0;
const dbg = debug_1.default('waku:message');
var DecryptionMethod;
(function (DecryptionMethod) {
    DecryptionMethod["Asymmetric"] = "asymmetric";
    DecryptionMethod["Symmetric"] = "symmetric";
})(DecryptionMethod = exports.DecryptionMethod || (exports.DecryptionMethod = {}));
class WakuMessage {
    constructor(proto, _signaturePublicKey, _signature) {
        this.proto = proto;
        this._signaturePublicKey = _signaturePublicKey;
        this._signature = _signature;
    }
    /**
     * Create Message with an utf-8 string as payload.
     */
    static async fromUtf8String(utf8, contentTopic, opts) {
        const payload = buffer_1.Buffer.from(utf8, 'utf-8');
        return WakuMessage.fromBytes(payload, contentTopic, opts);
    }
    /**
     * Create a Waku Message with the given payload.
     *
     * By default, the payload is kept clear (version 0).
     * If `opts.encPublicKey` is passed, the payload is encrypted using
     * asymmetric encryption (version 1).
     *
     * If `opts.sigPrivKey` is passed and version 1 is used, the payload is signed
     * before encryption.
     *
     * @throws if both `opts.encPublicKey` and `opt.symKey` are passed
     */
    static async fromBytes(payload, contentTopic, opts) {
        const { timestamp, encPublicKey, symKey, sigPrivKey } = Object.assign({ timestamp: new Date() }, opts ? opts : {});
        let _payload = payload;
        let version = DefaultVersion;
        let sig;
        if (encPublicKey && symKey) {
            throw 'Pass either `encPublicKey` or `symKey`, not both.';
        }
        if (encPublicKey) {
            const enc = version_1.clearEncode(_payload, sigPrivKey);
            _payload = await version_1.encryptAsymmetric(enc.payload, encPublicKey);
            sig = enc.sig;
            version = 1;
        }
        else if (symKey) {
            const enc = version_1.clearEncode(_payload, sigPrivKey);
            _payload = await version_1.encryptSymmetric(enc.payload, symKey);
            sig = enc.sig;
            version = 1;
        }
        return new WakuMessage({
            payload: _payload,
            timestamp: timestamp.valueOf() / 1000,
            version,
            contentTopic,
        }, sig?.publicKey, sig?.signature);
    }
    /**
     * Decode a byte array into Waku Message.
     *
     * @params bytes The message encoded using protobuf as defined in [14/WAKU2-MESSAGE](https://rfc.vac.dev/spec/14/).
     * @params decryptionKeys If the payload is encrypted (version = 1), then the
     * keys are used to attempt decryption of the message. The passed key can either
     * be asymmetric private keys or symmetric keys, both method are tried for each
     * key until the message is decrypted or combinations are run out.
     */
    static async decode(bytes, decryptionKeys) {
        const protoBuf = proto.WakuMessage.decode(minimal_1.Reader.create(bytes));
        return WakuMessage.decodeProto(protoBuf, decryptionKeys);
    }
    /**
     * Decode and decrypt Waku Message Protobuf Object into Waku Message.
     *
     * @params protoBuf The message to decode and decrypt.
     * @params decryptionKeys If the payload is encrypted (version = 1), then the
     * keys are used to attempt decryption of the message. The passed key can either
     * be asymmetric private keys or symmetric keys, both method are tried for each
     * key until the message is decrypted or combinations are run out.
     */
    static async decodeProto(protoBuf, decryptionKeys) {
        if (protoBuf.payload === undefined) {
            dbg('Payload is undefined');
            return;
        }
        const payload = protoBuf.payload;
        let signaturePublicKey;
        let signature;
        if (protoBuf.version === 1 && protoBuf.payload) {
            if (decryptionKeys === undefined) {
                dbg('Payload is encrypted but no private keys have been provided.');
                return;
            }
            // Returns a bunch of `undefined` and hopefully one decrypted result
            const allResults = await Promise.all(decryptionKeys.map(async ({ key, method, contentTopics }) => {
                if (!contentTopics ||
                    (protoBuf.contentTopic &&
                        contentTopics.includes(protoBuf.contentTopic))) {
                    switch (method) {
                        case DecryptionMethod.Asymmetric:
                            try {
                                return await version_1.decryptAsymmetric(payload, key);
                            }
                            catch (e) {
                                dbg('Failed to decrypt message using symmetric encryption despite decryption method being specified', e);
                                return;
                            }
                        case DecryptionMethod.Symmetric:
                            try {
                                return await version_1.decryptSymmetric(payload, key);
                            }
                            catch (e) {
                                dbg('Failed to decrypt message using asymmetric encryption despite decryption method being specified', e);
                                return;
                            }
                        default:
                            try {
                                return await version_1.decryptSymmetric(payload, key);
                            }
                            catch (e) {
                                dbg('Failed to decrypt message using symmetric encryption', e);
                                try {
                                    return await version_1.decryptAsymmetric(payload, key);
                                }
                                catch (e) {
                                    dbg('Failed to decrypt message using asymmetric encryption', e);
                                    return;
                                }
                            }
                    }
                }
                else {
                    // No key available for this content topic
                    return;
                }
            }));
            const isDefined = (dec) => {
                return !!dec;
            };
            const decodedResults = allResults.filter(isDefined);
            if (decodedResults.length === 0) {
                dbg('Failed to decrypt payload.');
                return;
            }
            const dec = decodedResults[0];
            const res = await version_1.clearDecode(dec);
            if (!res) {
                dbg('Failed to decode payload.');
                return;
            }
            Object.assign(protoBuf, { payload: res.payload });
            signaturePublicKey = res.sig?.publicKey;
            signature = res.sig?.signature;
        }
        return new WakuMessage(protoBuf, signaturePublicKey, signature);
    }
    encode() {
        return proto.WakuMessage.encode(this.proto).finish();
    }
    get payloadAsUtf8() {
        if (!this.proto.payload) {
            return '';
        }
        return buffer_1.Buffer.from(this.proto.payload).toString('utf-8');
    }
    get payload() {
        return this.proto.payload;
    }
    get contentTopic() {
        return this.proto.contentTopic;
    }
    get version() {
        return this.proto.version;
    }
    get timestamp() {
        if (this.proto.timestamp) {
            return new Date(this.proto.timestamp * 1000);
        }
        return;
    }
    /**
     * The public key used to sign the message.
     *
     * MAY be present if the message is version 1.
     */
    get signaturePublicKey() {
        return this._signaturePublicKey;
    }
    /**
     * The signature of the message.
     *
     * MAY be present if the message is version 1.
     */
    get signature() {
        return this._signature;
    }
}
exports.WakuMessage = WakuMessage;


/***/ }),

/***/ "./src/lib/waku_message/symmetric/browser.ts":
/*!***************************************************!*\
  !*** ./src/lib/waku_message/symmetric/browser.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateIv = exports.decrypt = exports.encrypt = void 0;
const index_1 = __webpack_require__(/*! ./index */ "./src/lib/waku_message/symmetric/index.ts");
const crypto = window.crypto || window.msCrypto;
const subtle = crypto.subtle || crypto.webkitSubtle;
const Algorithm = { name: 'AES-GCM', length: 128 };
if (subtle === undefined) {
    throw new Error('Failed to load Subtle CryptoAPI');
}
async function encrypt(iv, key, clearText) {
    return subtle
        .importKey('raw', key, Algorithm, false, ['encrypt'])
        .then((cryptoKey) => subtle.encrypt({ iv, ...Algorithm }, cryptoKey, clearText))
        .then(Buffer.from);
}
exports.encrypt = encrypt;
async function decrypt(iv, key, cipherText) {
    return subtle
        .importKey('raw', key, Algorithm, false, ['decrypt'])
        .then((cryptoKey) => subtle.decrypt({ iv, ...Algorithm }, cryptoKey, cipherText))
        .then(Buffer.from);
}
exports.decrypt = decrypt;
function generateIv() {
    const iv = new Uint8Array(index_1.IvSize);
    crypto.getRandomValues(iv);
    return iv;
}
exports.generateIv = generateIv;


/***/ }),

/***/ "./src/lib/waku_message/symmetric/index.ts":
/*!*************************************************!*\
  !*** ./src/lib/waku_message/symmetric/index.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.symmetric = exports.TagSize = exports.IvSize = exports.SymmetricKeySize = void 0;
exports.SymmetricKeySize = 32;
exports.IvSize = 12;
exports.TagSize = 16;
exports.symmetric = {};
Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./browser */ "./src/lib/waku_message/symmetric/browser.ts"))).then((mod) => {
    exports.symmetric = mod;
})
    .catch((eBrowser) => {
    Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./node */ "./src/lib/waku_message/symmetric/node.ts"))).then((mod) => {
        exports.symmetric = mod;
    })
        .catch((eNode) => {
        throw `Could not load any symmetric crypto modules: ${eBrowser}, ${eNode}`;
    });
});


/***/ }),

/***/ "./src/lib/waku_message/symmetric/node.ts":
/*!************************************************!*\
  !*** ./src/lib/waku_message/symmetric/node.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateIv = exports.decrypt = exports.encrypt = void 0;
const crypto_1 = __webpack_require__(/*! crypto */ "./node_modules/crypto-browserify/index.js");
const index_1 = __webpack_require__(/*! ./index */ "./src/lib/waku_message/symmetric/index.ts");
const Algorithm = 'aes-256-gcm';
async function encrypt(iv, key, clearText) {
    const cipher = crypto_1.createCipheriv(Algorithm, key, iv);
    const a = cipher.update(clearText);
    const b = cipher.final();
    const tag = cipher.getAuthTag();
    return Buffer.concat([a, b, tag]);
}
exports.encrypt = encrypt;
async function decrypt(iv, key, data) {
    const tagStart = data.length - index_1.TagSize;
    const cipherText = data.slice(0, tagStart);
    const tag = data.slice(tagStart);
    const decipher = crypto_1.createDecipheriv(Algorithm, key, iv);
    decipher.setAuthTag(tag);
    const a = decipher.update(cipherText);
    const b = decipher.final();
    return Buffer.concat([a, b]);
}
exports.decrypt = decrypt;
function generateIv() {
    return crypto_1.randomBytes(index_1.IvSize);
}
exports.generateIv = generateIv;


/***/ }),

/***/ "./src/lib/waku_message/version_1.ts":
/*!*******************************************!*\
  !*** ./src/lib/waku_message/version_1.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getPublicKey = exports.generateSymmetricKey = exports.generatePrivateKey = exports.decryptSymmetric = exports.encryptSymmetric = exports.decryptAsymmetric = exports.encryptAsymmetric = exports.clearDecode = exports.clearEncode = exports.PrivateKeySize = void 0;
const buffer_1 = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");
const crypto = __importStar(__webpack_require__(/*! crypto */ "./node_modules/crypto-browserify/index.js"));
const ecies = __importStar(__webpack_require__(/*! ecies-geth */ "./node_modules/ecies-geth/dist/lib/src/typescript/browser.js"));
const js_sha3_1 = __webpack_require__(/*! js-sha3 */ "./node_modules/js-sha3/src/sha3.js");
const secp256k1 = __importStar(__webpack_require__(/*! secp256k1 */ "./node_modules/secp256k1/elliptic.js"));
const utils_1 = __webpack_require__(/*! ../utils */ "./src/lib/utils.ts");
const symmetric_1 = __webpack_require__(/*! ./symmetric */ "./src/lib/waku_message/symmetric/index.ts");
const FlagsLength = 1;
const FlagMask = 3; // 0011
const IsSignedMask = 4; // 0100
const PaddingTarget = 256;
const SignatureLength = 65;
exports.PrivateKeySize = 32;
/**
 * Encode the payload pre-encryption.
 *
 * @internal
 * @param messagePayload: The payload to include in the message
 * @param sigPrivKey: If set, a signature using this private key is added.
 * @returns The encoded payload, ready for encryption using {@link encryptAsymmetric}
 * or {@link encryptSymmetric}.
 */
function clearEncode(messagePayload, sigPrivKey) {
    let envelope = buffer_1.Buffer.from([0]); // No flags
    envelope = addPayloadSizeField(envelope, messagePayload);
    envelope = buffer_1.Buffer.concat([envelope, buffer_1.Buffer.from(messagePayload)]);
    // Calculate padding:
    let rawSize = FlagsLength +
        getSizeOfPayloadSizeField(messagePayload) +
        messagePayload.length;
    if (sigPrivKey) {
        rawSize += SignatureLength;
    }
    const remainder = rawSize % PaddingTarget;
    const paddingSize = PaddingTarget - remainder;
    const pad = buffer_1.Buffer.from(randomBytes(paddingSize));
    if (!validateDataIntegrity(pad, paddingSize)) {
        throw new Error('failed to generate random padding of size ' + paddingSize);
    }
    envelope = buffer_1.Buffer.concat([envelope, pad]);
    let sig;
    if (sigPrivKey) {
        envelope[0] |= IsSignedMask;
        const hash = js_sha3_1.keccak256(envelope);
        const s = secp256k1.ecdsaSign(utils_1.hexToBuf(hash), sigPrivKey);
        envelope = buffer_1.Buffer.concat([envelope, s.signature, buffer_1.Buffer.from([s.recid])]);
        sig = {
            signature: buffer_1.Buffer.from(s.signature),
            publicKey: getPublicKey(sigPrivKey),
        };
    }
    return { payload: envelope, sig };
}
exports.clearEncode = clearEncode;
/**
 * Decode a decrypted payload.
 *
 * @internal
 */
function clearDecode(message) {
    const buf = buffer_1.Buffer.from(message);
    let start = 1;
    let sig;
    const sizeOfPayloadSizeField = buf.readUIntLE(0, 1) & FlagMask;
    if (sizeOfPayloadSizeField === 0)
        return;
    const payloadSize = buf.readUIntLE(start, sizeOfPayloadSizeField);
    start += sizeOfPayloadSizeField;
    const payload = buf.slice(start, start + payloadSize);
    const isSigned = (buf.readUIntLE(0, 1) & IsSignedMask) == IsSignedMask;
    if (isSigned) {
        const signature = getSignature(buf);
        const hash = getHash(buf, isSigned);
        const publicKey = ecRecoverPubKey(hash, signature);
        sig = { signature, publicKey };
    }
    return { payload, sig };
}
exports.clearDecode = clearDecode;
/**
 * Proceed with Asymmetric encryption of the data as per [26/WAKU-PAYLOAD](https://rfc.vac.dev/spec/26/).
 * The data MUST be flags | payload-length | payload | [signature].
 * The returned result can be set to `WakuMessage.payload`.
 *
 * @internal
 */
async function encryptAsymmetric(data, publicKey) {
    return ecies.encrypt(utils_1.hexToBuf(publicKey), buffer_1.Buffer.from(data));
}
exports.encryptAsymmetric = encryptAsymmetric;
/**
 * Proceed with Asymmetric decryption of the data as per [26/WAKU-PAYLOAD](https://rfc.vac.dev/spec/26/).
 * The return data is expect to be flags | payload-length | payload | [signature].
 *
 * @internal
 */
async function decryptAsymmetric(payload, privKey) {
    return ecies.decrypt(buffer_1.Buffer.from(privKey), buffer_1.Buffer.from(payload));
}
exports.decryptAsymmetric = decryptAsymmetric;
/**
 * Proceed with Symmetric encryption of the data as per [26/WAKU-PAYLOAD](https://rfc.vac.dev/spec/26/).
 *
 * @param data The data to encrypt, expected to be `flags | payload-length | payload | [signature]`.
 * @param key The key to use for encryption.
 * @returns The decrypted data, `cipherText | tag | iv` and can be set to `WakuMessage.payload`.
 *
 * @internal
 */
async function encryptSymmetric(data, key) {
    const iv = symmetric_1.symmetric.generateIv();
    // Returns `cipher | tag`
    const cipher = await symmetric_1.symmetric.encrypt(iv, utils_1.hexToBuf(key), buffer_1.Buffer.from(data));
    return buffer_1.Buffer.concat([cipher, buffer_1.Buffer.from(iv)]);
}
exports.encryptSymmetric = encryptSymmetric;
/**
 * Proceed with Symmetric decryption of the data as per [26/WAKU-PAYLOAD](https://rfc.vac.dev/spec/26/).
 *
 * @param payload The cipher data, it is expected to be `cipherText | tag | iv`.
 * @param key The key to use for decryption.
 * @returns The decrypted data, expected to be `flags | payload-length | payload | [signature]`.
 *
 * @internal
 */
async function decryptSymmetric(payload, key) {
    const data = buffer_1.Buffer.from(payload);
    const ivStart = data.length - symmetric_1.IvSize;
    const cipher = data.slice(0, ivStart);
    const iv = data.slice(ivStart);
    return symmetric_1.symmetric.decrypt(iv, utils_1.hexToBuf(key), cipher);
}
exports.decryptSymmetric = decryptSymmetric;
/**
 * Generate a new private key to be used for asymmetric encryption.
 *
 * Use {@link getPublicKey} to get the corresponding Public Key.
 */
function generatePrivateKey() {
    return randomBytes(exports.PrivateKeySize);
}
exports.generatePrivateKey = generatePrivateKey;
/**
 * Generate a new symmetric key to be used for symmetric encryption.
 */
function generateSymmetricKey() {
    return randomBytes(symmetric_1.SymmetricKeySize);
}
exports.generateSymmetricKey = generateSymmetricKey;
/**
 * Return the public key for the given private key, to be used for asymmetric
 * encryption.
 */
function getPublicKey(privateKey) {
    return secp256k1.publicKeyCreate(privateKey, false);
}
exports.getPublicKey = getPublicKey;
/**
 * Computes the flags & auxiliary-field as per [26/WAKU-PAYLOAD](https://rfc.vac.dev/spec/26/).
 */
function addPayloadSizeField(msg, payload) {
    const fieldSize = getSizeOfPayloadSizeField(payload);
    let field = buffer_1.Buffer.alloc(4);
    field.writeUInt32LE(payload.length, 0);
    field = field.slice(0, fieldSize);
    msg = buffer_1.Buffer.concat([msg, field]);
    msg[0] |= fieldSize;
    return msg;
}
/**
 * Returns the size of the auxiliary-field which in turns contains the payload size
 */
function getSizeOfPayloadSizeField(payload) {
    let s = 1;
    for (let i = payload.length; i >= 256; i /= 256) {
        s++;
    }
    return s;
}
function validateDataIntegrity(value, expectedSize) {
    if (value.length !== expectedSize) {
        return false;
    }
    return !(expectedSize > 3 && buffer_1.Buffer.from(value).equals(buffer_1.Buffer.alloc(value.length)));
}
function getSignature(message) {
    return message.slice(message.length - SignatureLength, message.length);
}
function getHash(message, isSigned) {
    if (isSigned) {
        return js_sha3_1.keccak256(message.slice(0, message.length - SignatureLength));
    }
    return js_sha3_1.keccak256(message);
}
function ecRecoverPubKey(messageHash, signature) {
    const recovery = signature.slice(64).readIntBE(0, 1);
    return secp256k1.ecdsaRecover(signature.slice(0, 64), recovery, utils_1.hexToBuf(messageHash), false);
}
function randomBytes(length) {
    if (typeof window !== 'undefined' && window && window.crypto) {
        const array = new Uint8Array(length);
        window.crypto.getRandomValues(array);
        return array;
    }
    else {
        return crypto.randomBytes(length);
    }
}


/***/ }),

/***/ "./src/lib/waku_relay/constants.ts":
/*!*****************************************!*\
  !*** ./src/lib/waku_relay/constants.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RelayMaxIHaveLength = exports.RelayOpportunisticGraftPeers = exports.RelayOpportunisticGraftTicks = exports.RelayFanoutTTL = exports.RelayPruneBackoff = exports.RelayPrunePeers = exports.RelayHeartbeatInterval = exports.RelayHeartbeatInitialDelay = exports.RelayGossipFactor = exports.RelayPingContentTopic = exports.RelayCodecs = exports.minute = exports.second = void 0;
exports.second = 1000;
exports.minute = 60 * exports.second;
/**
 * RelayCodec is the libp2p identifier for the waku relay protocol
 */
exports.RelayCodecs = [
    '/vac/waku/relay/2.0.0-beta2',
    '/vac/waku/relay/2.0.0',
];
exports.RelayPingContentTopic = '/relay-ping/1/ping/null';
/**
 * RelayGossipFactor affects how many peers we will emit gossip to at each heartbeat.
 * We will send gossip to RelayGossipFactor * (total number of non-mesh peers), or
 * RelayDlazy, whichever is greater.
 */
exports.RelayGossipFactor = 0.25;
/**
 * GossipsubHeartbeatInitialDelay is the short delay before the heartbeat timer begins
 * after the router is initialized.
 */
exports.RelayHeartbeatInitialDelay = 100;
/**
 * RelayHeartbeatInterval controls the time between heartbeats.
 */
exports.RelayHeartbeatInterval = exports.second;
/**
 * RelayPrunePeers controls the number of peers to include in prune Peer eXchange.
 * When we prune a peer that's eligible for PX (has a good score, etc), we will try to
 * send them signed peer records for up to RelayPrunePeers other peers that we
 * know of.
 */
exports.RelayPrunePeers = 16;
/**
 * RelayPruneBackoff controls the backoff time for pruned peers. This is how long
 * a peer must wait before attempting to graft into our mesh again after being pruned.
 * When pruning a peer, we send them our value of RelayPruneBackoff so they know
 * the minimum time to wait. Peers running older versions may not send a backoff time,
 * so if we receive a prune message without one, we will wait at least RelayPruneBackoff
 * before attempting to re-graft.
 */
exports.RelayPruneBackoff = exports.minute;
/**
 * RelayFanoutTTL controls how long we keep track of the fanout state. If it's been
 * RelayFanoutTTL since we've published to a topic that we're not subscribed to,
 * we'll delete the fanout map for that topic.
 */
exports.RelayFanoutTTL = exports.minute;
/**
 * RelayOpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh
 * with opportunistic grafting. Every RelayOpportunisticGraftTicks we will attempt to select some
 * high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls
 * below a threshold
 */
exports.RelayOpportunisticGraftTicks = 60;
/**
 * RelayOpportunisticGraftPeers is the number of peers to opportunistically graft.
 */
exports.RelayOpportunisticGraftPeers = 2;
/**
 * RelayMaxIHaveLength is the maximum number of messages to include in an IHAVE message.
 * Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a
 * peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the
 * default if your system is pushing more than 5000 messages in GossipsubHistoryGossip heartbeats;
 * with the defaults this is 1666 messages/s.
 */
exports.RelayMaxIHaveLength = 5000;


/***/ }),

/***/ "./src/lib/waku_relay/get_relay_peers.ts":
/*!***********************************************!*\
  !*** ./src/lib/waku_relay/get_relay_peers.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getRelayPeers = void 0;
const utils_1 = __webpack_require__(/*! libp2p-gossipsub/src/utils */ "./node_modules/libp2p-gossipsub/src/utils/index.js");
const index_1 = __webpack_require__(/*! ./index */ "./src/lib/waku_relay/index.ts");
/**
 * Given a topic, returns up to count peers subscribed to that topic
 * that pass an optional filter function
 *
 * @param {Gossipsub} router
 * @param {String} topic
 * @param {Number} count
 * @param {Function} [filter] a function to filter acceptable peers
 * @returns {Set<string>}
 *
 */
function getRelayPeers(router, topic, count, filter = () => true) {
    const peersInTopic = router.topics.get(topic);
    if (!peersInTopic) {
        return new Set();
    }
    // Adds all peers using our protocol
    // that also pass the filter function
    let peers = [];
    peersInTopic.forEach((id) => {
        const peerStreams = router.peers.get(id);
        if (!peerStreams) {
            return;
        }
        if (index_1.RelayCodecs.includes(peerStreams.protocol) && filter(id)) {
            peers.push(id);
        }
    });
    // Pseudo-randomly shuffles peers
    peers = utils_1.shuffle(peers);
    if (count > 0 && peers.length > count) {
        peers = peers.slice(0, count);
    }
    return new Set(peers);
}
exports.getRelayPeers = getRelayPeers;


/***/ }),

/***/ "./src/lib/waku_relay/index.ts":
/*!*************************************!*\
  !*** ./src/lib/waku_relay/index.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WakuRelay = exports.RelayCodecs = void 0;
const debug_1 = __importDefault(__webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js"));
const libp2p_gossipsub_1 = __importDefault(__webpack_require__(/*! libp2p-gossipsub */ "./node_modules/libp2p-gossipsub/src/index.js"));
const utils_1 = __webpack_require__(/*! libp2p-gossipsub/src/utils */ "./node_modules/libp2p-gossipsub/src/utils/index.js");
const signature_policy_1 = __webpack_require__(/*! libp2p-interfaces/src/pubsub/signature-policy */ "./node_modules/libp2p-interfaces/src/pubsub/signature-policy.js");
const peer_id_1 = __importDefault(__webpack_require__(/*! peer-id */ "./node_modules/peer-id/src/index.js"));
const utils_2 = __webpack_require__(/*! ../utils */ "./src/lib/utils.ts");
const waku_1 = __webpack_require__(/*! ../waku */ "./src/lib/waku.ts");
const waku_message_1 = __webpack_require__(/*! ../waku_message */ "./src/lib/waku_message/index.ts");
const constants = __importStar(__webpack_require__(/*! ./constants */ "./src/lib/waku_relay/constants.ts"));
const constants_1 = __webpack_require__(/*! ./constants */ "./src/lib/waku_relay/constants.ts");
Object.defineProperty(exports, "RelayCodecs", ({ enumerable: true, get: function () { return constants_1.RelayCodecs; } }));
const get_relay_peers_1 = __webpack_require__(/*! ./get_relay_peers */ "./src/lib/waku_relay/get_relay_peers.ts");
const relay_heartbeat_1 = __webpack_require__(/*! ./relay_heartbeat */ "./src/lib/waku_relay/relay_heartbeat.ts");
const dbg = debug_1.default('waku:relay');
/**
 * Implements the [Waku v2 Relay protocol]{@link https://rfc.vac.dev/spec/11/}.
 * Must be passed as a `pubsub` module to a {Libp2p} instance.
 *
 * @implements {require('libp2p-interfaces/src/pubsub')}
 * @noInheritDoc
 */
class WakuRelay extends libp2p_gossipsub_1.default {
    constructor(libp2p, options) {
        super(libp2p, Object.assign(options, {
            // Ensure that no signature is included nor expected in the messages.
            globalSignaturePolicy: signature_policy_1.SignaturePolicy.StrictNoSign,
        }));
        this.heartbeat = new relay_heartbeat_1.RelayHeartbeat(this);
        this.observers = {};
        this.decryptionKeys = new Map();
        const multicodecs = constants.RelayCodecs;
        Object.assign(this, { multicodecs });
        this.pubSubTopic = options?.pubSubTopic || waku_1.DefaultPubSubTopic;
        options?.decryptionKeys?.forEach((key) => {
            this.addDecryptionKey(key);
        });
    }
    /**
     * Mounts the gossipsub protocol onto the libp2p node
     * and subscribes to the default topic.
     *
     * @override
     * @returns {void}
     */
    start() {
        super.start();
        this.subscribe(this.pubSubTopic);
    }
    /**
     * Send Waku message.
     *
     * @param {WakuMessage} message
     * @returns {Promise<void>}
     */
    async send(message) {
        const msg = message.encode();
        await super.publish(this.pubSubTopic, Buffer.from(msg));
    }
    /**
     * Register a decryption key to attempt decryption of received messages.
     * This can either be a private key for asymmetric encryption or a symmetric
     * key. `WakuRelay` will attempt to decrypt messages using both methods.
     *
     * Strings must be in hex format.
     */
    addDecryptionKey(key, options) {
        this.decryptionKeys.set(utils_2.hexToBuf(key), options ?? {});
    }
    /**
     * Delete a decryption key that was used to attempt decryption of received
     * messages.
     *
     * Strings must be in hex format.
     */
    deleteDecryptionKey(key) {
        this.decryptionKeys.delete(utils_2.hexToBuf(key));
    }
    /**
     * Register an observer of new messages received via waku relay
     *
     * @param callback called when a new message is received via waku relay
     * @param contentTopics Content Topics for which the callback with be called,
     * all of them if undefined, [] or ["",..] is passed.
     * @returns {void}
     */
    addObserver(callback, contentTopics = []) {
        if (contentTopics.length === 0) {
            if (!this.observers['']) {
                this.observers[''] = new Set();
            }
            this.observers[''].add(callback);
        }
        else {
            contentTopics.forEach((contentTopic) => {
                if (!this.observers[contentTopic]) {
                    this.observers[contentTopic] = new Set();
                }
                this.observers[contentTopic].add(callback);
            });
        }
    }
    /**
     * Remove an observer of new messages received via waku relay.
     * Useful to ensure the same observer is not registered several time
     * (e.g when loading React components)
     */
    deleteObserver(callback, contentTopics = []) {
        if (contentTopics.length === 0) {
            if (this.observers['']) {
                this.observers[''].delete(callback);
            }
        }
        else {
            contentTopics.forEach((contentTopic) => {
                if (this.observers[contentTopic]) {
                    this.observers[contentTopic].delete(callback);
                }
            });
        }
    }
    /**
     * Return the relay peers we are connected to and we would publish a message to
     */
    getPeers() {
        return get_relay_peers_1.getRelayPeers(this, this.pubSubTopic, this._options.D, (id) => {
            // Filter peers we would not publish to
            return (this.score.score(id) >= this._options.scoreThresholds.publishThreshold);
        });
    }
    /**
     * Subscribe to a pubsub topic and start emitting Waku messages to observers.
     *
     * @override
     */
    subscribe(pubSubTopic) {
        this.on(pubSubTopic, (event) => {
            const decryptionKeys = Array.from(this.decryptionKeys).map(([key, { method, contentTopics }]) => {
                return {
                    key,
                    method,
                    contentTopics,
                };
            });
            dbg(`Message received on ${pubSubTopic}`);
            waku_message_1.WakuMessage.decode(event.data, decryptionKeys)
                .then((wakuMsg) => {
                if (!wakuMsg) {
                    dbg('Failed to decode Waku Message');
                    return;
                }
                if (this.observers['']) {
                    this.observers[''].forEach((callbackFn) => {
                        callbackFn(wakuMsg);
                    });
                }
                if (wakuMsg.contentTopic) {
                    if (this.observers[wakuMsg.contentTopic]) {
                        this.observers[wakuMsg.contentTopic].forEach((callbackFn) => {
                            callbackFn(wakuMsg);
                        });
                    }
                }
            })
                .catch((e) => {
                dbg('Failed to decode Waku Message', e);
            });
        });
        super.subscribe(pubSubTopic);
    }
    /**
     * Join pubsub topic.
     * This is present to override the behavior of Gossipsub and should not
     * be used by API Consumers
     *
     * @internal
     * @param {string} topic
     * @returns {void}
     * @override
     */
    join(topic) {
        if (!this.started) {
            throw new Error('WakuRelayPubSub has not started');
        }
        const fanoutPeers = this.fanout.get(topic);
        if (fanoutPeers) {
            // these peers have a score above the publish threshold, which may be negative
            // so drop the ones with a negative score
            fanoutPeers.forEach((id) => {
                if (this.score.score(id) < 0) {
                    fanoutPeers.delete(id);
                }
            });
            if (fanoutPeers.size < this._options.D) {
                // we need more peers; eager, as this would get fixed in the next heartbeat
                get_relay_peers_1.getRelayPeers(this, topic, this._options.D - fanoutPeers.size, (id) => {
                    // filter our current peers, direct peers, and peers with negative scores
                    return (!fanoutPeers.has(id) &&
                        !this.direct.has(id) &&
                        this.score.score(id) >= 0);
                }).forEach((id) => fanoutPeers.add(id));
            }
            this.mesh.set(topic, fanoutPeers);
            this.fanout.delete(topic);
            this.lastpub.delete(topic);
        }
        else {
            const peers = get_relay_peers_1.getRelayPeers(this, topic, this._options.D, (id) => {
                // filter direct peers and peers with negative score
                return !this.direct.has(id) && this.score.score(id) >= 0;
            });
            this.mesh.set(topic, peers);
        }
        this.mesh.get(topic)?.forEach((id) => {
            this.log('JOIN: Add mesh link to %s in %s', id, topic);
            this._sendGraft(id, topic);
        });
    }
    /**
     * Publish messages.
     * This is present to override the behavior of Gossipsub and should not
     * be used by API Consumers
     *
     * @ignore
     * @override
     * @param {InMessage} msg
     * @returns {void}
     */
    async _publish(msg) {
        if (msg.receivedFrom !== this.peerId.toB58String()) {
            this.score.deliverMessage(msg);
            this.gossipTracer.deliverMessage(msg);
        }
        const msgID = await this.getMsgId(msg);
        const msgIdStr = utils_1.messageIdToString(msgID);
        // put in seen cache
        this.seenCache.put(msgIdStr);
        this.messageCache.put(msg);
        const toSend = new Set();
        msg.topicIDs.forEach((topic) => {
            const peersInTopic = this.topics.get(topic);
            if (!peersInTopic) {
                return;
            }
            // direct peers
            this.direct.forEach((id) => {
                toSend.add(id);
            });
            let meshPeers = this.mesh.get(topic);
            if (!meshPeers || !meshPeers.size) {
                // We are not in the mesh for topic, use fanout peers
                meshPeers = this.fanout.get(topic);
                if (!meshPeers) {
                    // If we are not in the fanout, then pick peers in topic above the publishThreshold
                    const peers = get_relay_peers_1.getRelayPeers(this, topic, this._options.D, (id) => {
                        return (this.score.score(id) >=
                            this._options.scoreThresholds.publishThreshold);
                    });
                    if (peers.size > 0) {
                        meshPeers = peers;
                        this.fanout.set(topic, peers);
                    }
                    else {
                        meshPeers = new Set();
                    }
                }
                // Store the latest publishing time
                this.lastpub.set(topic, this._now());
            }
            meshPeers?.forEach((peer) => {
                toSend.add(peer);
            });
        });
        // Publish messages to peers
        const rpc = utils_1.createGossipRpc([libp2p_gossipsub_1.default.utils.normalizeOutRpcMessage(msg)]);
        toSend.forEach((id) => {
            if (id === msg.from) {
                return;
            }
            this._sendRpc(id, rpc);
        });
    }
    /**
     * Emits gossip to peers in a particular topic.
     *
     * This is present to override the behavior of Gossipsub and should not
     * be used by API Consumers
     *
     * @ignore
     * @override
     * @param {string} topic
     * @param {Set<string>} exclude peers to exclude
     * @returns {void}
     */
    _emitGossip(topic, exclude) {
        const messageIDs = this.messageCache.getGossipIDs(topic);
        if (!messageIDs.length) {
            return;
        }
        // shuffle to emit in random order
        utils_1.shuffle(messageIDs);
        // if we are emitting more than GossipsubMaxIHaveLength ids, truncate the list
        if (messageIDs.length > constants.RelayMaxIHaveLength) {
            // we do the truncation (with shuffling) per peer below
            this.log('too many messages for gossip; will truncate IHAVE list (%d messages)', messageIDs.length);
        }
        // Send gossip to GossipFactor peers above threshold with a minimum of D_lazy
        // First we collect the peers above gossipThreshold that are not in the exclude set
        // and then randomly select from that set
        // We also exclude direct peers, as there is no reason to emit gossip to them
        const peersToGossip = [];
        const topicPeers = this.topics.get(topic);
        if (!topicPeers) {
            // no topic peers, no gossip
            return;
        }
        topicPeers.forEach((id) => {
            const peerStreams = this.peers.get(id);
            if (!peerStreams) {
                return;
            }
            if (!exclude.has(id) &&
                !this.direct.has(id) &&
                constants.RelayCodecs.includes(peerStreams.protocol) &&
                this.score.score(id) >= this._options.scoreThresholds.gossipThreshold) {
                peersToGossip.push(id);
            }
        });
        let target = this._options.Dlazy;
        const factor = constants.RelayGossipFactor * peersToGossip.length;
        if (factor > target) {
            target = factor;
        }
        if (target > peersToGossip.length) {
            target = peersToGossip.length;
        }
        else {
            utils_1.shuffle(peersToGossip);
        }
        // Emit the IHAVE gossip to the selected peers up to the target
        peersToGossip.slice(0, target).forEach((id) => {
            let peerMessageIDs = messageIDs;
            if (messageIDs.length > constants.RelayMaxIHaveLength) {
                // shuffle and slice message IDs per peer so that we emit a different set for each peer
                // we have enough redundancy in the system that this will significantly increase the message
                // coverage when we do truncate
                peerMessageIDs = utils_1.shuffle(peerMessageIDs.slice()).slice(0, constants.RelayMaxIHaveLength);
            }
            this._pushGossip(id, {
                topicID: topic,
                messageIDs: peerMessageIDs,
            });
        });
    }
    /**
     * Make a PRUNE control message for a peer in a topic.
     * This is present to override the behavior of Gossipsub and should not
     * be used by API Consumers
     *
     * @ignore
     * @override
     * @param {string} id
     * @param {string} topic
     * @param {boolean} doPX
     * @returns {RPC.IControlPrune}
     */
    _makePrune(id, topic, doPX) {
        // backoff is measured in seconds
        // RelayPruneBackoff is measured in milliseconds
        const backoff = constants.RelayPruneBackoff / 1000;
        const px = [];
        if (doPX) {
            // select peers for Peer eXchange
            const peers = get_relay_peers_1.getRelayPeers(this, topic, constants.RelayPrunePeers, (xid) => {
                return xid !== id && this.score.score(xid) >= 0;
            });
            peers.forEach((p) => {
                // see if we have a signed record to send back; if we don't, just send
                // the peer ID and let the pruned peer find them in the DHT -- we can't trust
                // unsigned address records through PX anyways
                // Finding signed records in the DHT is not supported at the time of writing in js-libp2p
                const peerId = peer_id_1.default.createFromB58String(p);
                px.push({
                    peerID: peerId.toBytes(),
                    signedPeerRecord: this._libp2p.peerStore.addressBook.getRawEnvelope(peerId),
                });
            });
        }
        return {
            topicID: topic,
            peers: px,
            backoff: backoff,
        };
    }
}
exports.WakuRelay = WakuRelay;


/***/ }),

/***/ "./src/lib/waku_relay/relay_heartbeat.ts":
/*!***********************************************!*\
  !*** ./src/lib/waku_relay/relay_heartbeat.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * @hidden
 * @module
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RelayHeartbeat = void 0;
const heartbeat_1 = __webpack_require__(/*! libp2p-gossipsub/src/heartbeat */ "./node_modules/libp2p-gossipsub/src/heartbeat.js");
const utils_1 = __webpack_require__(/*! libp2p-gossipsub/src/utils */ "./node_modules/libp2p-gossipsub/src/utils/index.js");
const constants = __importStar(__webpack_require__(/*! ./constants */ "./src/lib/waku_relay/constants.ts"));
const get_relay_peers_1 = __webpack_require__(/*! ./get_relay_peers */ "./src/lib/waku_relay/get_relay_peers.ts");
class RelayHeartbeat extends heartbeat_1.Heartbeat {
    /**
     * @param {Object} gossipsub
     * @constructor
     */
    constructor(gossipsub) {
        super(gossipsub);
    }
    start() {
        if (this._heartbeatTimer) {
            return;
        }
        const heartbeat = this._heartbeat.bind(this);
        const timeout = setTimeout(() => {
            heartbeat();
            this._heartbeatTimer?.runPeriodically(heartbeat, constants.RelayHeartbeatInterval);
        }, constants.RelayHeartbeatInitialDelay);
        this._heartbeatTimer = {
            _intervalId: undefined,
            runPeriodically: (fn, period) => {
                // this._heartbeatTimer cannot be null, it is being assigned.
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                this._heartbeatTimer._intervalId = setInterval(fn, period);
            },
            cancel: () => {
                clearTimeout(timeout);
                clearInterval(this._heartbeatTimer?._intervalId);
            },
        };
    }
    /**
     * Unmounts the gossipsub protocol and shuts down every connection
     * @override
     * @returns {void}
     */
    stop() {
        if (!this._heartbeatTimer) {
            return;
        }
        this._heartbeatTimer.cancel();
        this._heartbeatTimer = null;
    }
    /**
     * Maintains the mesh and fanout maps in gossipsub.
     *
     * @returns {void}
     */
    _heartbeat() {
        const { D, Dlo, Dhi, Dscore, Dout } = this.gossipsub._options;
        this.gossipsub.heartbeatTicks++;
        // cache scores through the heartbeat
        const scores = new Map();
        const getScore = (id) => {
            let s = scores.get(id);
            if (s === undefined) {
                s = this.gossipsub.score.score(id);
                scores.set(id, s);
            }
            return s;
        };
        // peer id => topic[]
        const toGraft = new Map();
        // peer id => topic[]
        const toPrune = new Map();
        // peer id => don't px
        const noPX = new Map();
        // clean up expired backoffs
        this.gossipsub._clearBackoff();
        // clean up peerhave/iasked counters
        this.gossipsub.peerhave.clear();
        this.gossipsub.iasked.clear();
        // apply IWANT request penalties
        this.gossipsub._applyIwantPenalties();
        // ensure direct peers are connected
        this.gossipsub._directConnect();
        // maintain the mesh for topics we have joined
        this.gossipsub.mesh.forEach((peers, topic) => {
            // prune/graft helper functions (defined per topic)
            const prunePeer = (id) => {
                this.gossipsub.log('HEARTBEAT: Remove mesh link to %s in %s', id, topic);
                // update peer score
                this.gossipsub.score.prune(id, topic);
                // add prune backoff record
                this.gossipsub._addBackoff(id, topic);
                // remove peer from mesh
                peers.delete(id);
                // add to toPrune
                const topics = toPrune.get(id);
                if (!topics) {
                    toPrune.set(id, [topic]);
                }
                else {
                    topics.push(topic);
                }
            };
            const graftPeer = (id) => {
                this.gossipsub.log('HEARTBEAT: Add mesh link to %s in %s', id, topic);
                // update peer score
                this.gossipsub.score.graft(id, topic);
                // add peer to mesh
                peers.add(id);
                // add to toGraft
                const topics = toGraft.get(id);
                if (!topics) {
                    toGraft.set(id, [topic]);
                }
                else {
                    topics.push(topic);
                }
            };
            // drop all peers with negative score, without PX
            peers.forEach((id) => {
                const score = getScore(id);
                if (score < 0) {
                    this.gossipsub.log('HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s', id, score, topic);
                    prunePeer(id);
                    noPX.set(id, true);
                }
            });
            // do we have enough peers?
            if (peers.size < Dlo) {
                const backoff = this.gossipsub.backoff.get(topic);
                const ineed = D - peers.size;
                const peersSet = get_relay_peers_1.getRelayPeers(this.gossipsub, topic, ineed, (id) => {
                    // filter out mesh peers, direct peers, peers we are backing off, peers with negative score
                    return (!peers.has(id) &&
                        !this.gossipsub.direct.has(id) &&
                        (!backoff || !backoff.has(id)) &&
                        getScore(id) >= 0);
                });
                peersSet.forEach(graftPeer);
            }
            // do we have to many peers?
            if (peers.size > Dhi) {
                let peersArray = Array.from(peers);
                // sort by score
                peersArray.sort((a, b) => getScore(b) - getScore(a));
                // We keep the first D_score peers by score and the remaining up to D randomly
                // under the constraint that we keep D_out peers in the mesh (if we have that many)
                peersArray = peersArray
                    .slice(0, Dscore)
                    .concat(utils_1.shuffle(peersArray.slice(Dscore)));
                // count the outbound peers we are keeping
                let outbound = 0;
                peersArray.slice(0, D).forEach((p) => {
                    if (this.gossipsub.outbound.get(p)) {
                        outbound++;
                    }
                });
                // if it's less than D_out, bubble up some outbound peers from the random selection
                if (outbound < Dout) {
                    const rotate = (i) => {
                        // rotate the peersArray to the right and put the ith peer in the front
                        const p = peersArray[i];
                        for (let j = i; j > 0; j--) {
                            peersArray[j] = peersArray[j - 1];
                        }
                        peersArray[0] = p;
                    };
                    // first bubble up all outbound peers already in the selection to the front
                    if (outbound > 0) {
                        let ihave = outbound;
                        for (let i = 1; i < D && ihave > 0; i++) {
                            if (this.gossipsub.outbound.get(peersArray[i])) {
                                rotate(i);
                                ihave--;
                            }
                        }
                    }
                    // now bubble up enough outbound peers outside the selection to the front
                    let ineed = D - outbound;
                    for (let i = D; i < peersArray.length && ineed > 0; i++) {
                        if (this.gossipsub.outbound.get(peersArray[i])) {
                            rotate(i);
                            ineed--;
                        }
                    }
                }
                // prune the excess peers
                peersArray.slice(D).forEach(prunePeer);
            }
            // do we have enough outbound peers?
            if (peers.size >= Dlo) {
                // count the outbound peers we have
                let outbound = 0;
                peers.forEach((p) => {
                    if (this.gossipsub.outbound.get(p)) {
                        outbound++;
                    }
                });
                // if it's less than D_out, select some peers with outbound connections and graft them
                if (outbound < Dout) {
                    const ineed = Dout - outbound;
                    const backoff = this.gossipsub.backoff.get(topic);
                    get_relay_peers_1.getRelayPeers(this.gossipsub, topic, ineed, (id) => {
                        // filter our current mesh peers, direct peers, peers we are backing off, peers with negative score
                        return (!peers.has(id) &&
                            !this.gossipsub.direct.has(id) &&
                            (!backoff || !backoff.has(id)) &&
                            getScore(id) >= 0);
                    }).forEach(graftPeer);
                }
            }
            // should we try to improve the mesh with opportunistic grafting?
            if (this.gossipsub.heartbeatTicks %
                constants.RelayOpportunisticGraftTicks ===
                0 &&
                peers.size > 1) {
                // Opportunistic grafting works as follows: we check the median score of peers in the
                // mesh; if this score is below the opportunisticGraftThreshold, we select a few peers at
                // random with score over the median.
                // The intention is to (slowly) improve an under performing mesh by introducing good
                // scoring peers that may have been gossiping at us. This allows us to get out of sticky
                // situations where we are stuck with poor peers and also recover from churn of good peers.
                // now compute the median peer score in the mesh
                const peersList = Array.from(peers).sort((a, b) => getScore(a) - getScore(b));
                const medianIndex = Math.floor(peers.size / 2);
                const medianScore = getScore(peersList[medianIndex]);
                // if the median score is below the threshold, select a better peer (if any) and GRAFT
                if (medianScore <
                    this.gossipsub._options.scoreThresholds.opportunisticGraftThreshold) {
                    const backoff = this.gossipsub.backoff.get(topic);
                    const peersToGraft = get_relay_peers_1.getRelayPeers(this.gossipsub, topic, constants.RelayOpportunisticGraftPeers, (id) => {
                        // filter out current mesh peers, direct peers, peers we are backing off, peers below or at threshold
                        return (peers.has(id) &&
                            !this.gossipsub.direct.has(id) &&
                            (!backoff || !backoff.has(id)) &&
                            getScore(id) > medianScore);
                    });
                    peersToGraft.forEach((id) => {
                        this.gossipsub.log('HEARTBEAT: Opportunistically graft peer %s on topic %s', id, topic);
                        graftPeer(id);
                    });
                }
            }
            // 2nd arg are mesh peers excluded from gossip. We have already pushed
            // messages to them, so its redundant to gossip IHAVEs.
            this.gossipsub._emitGossip(topic, peers);
        });
        // expire fanout for topics we haven't published to in a while
        const now = this.gossipsub._now();
        this.gossipsub.lastpub.forEach((lastpub, topic) => {
            if (lastpub + constants.RelayFanoutTTL < now) {
                this.gossipsub.fanout.delete(topic);
                this.gossipsub.lastpub.delete(topic);
            }
        });
        // maintain our fanout for topics we are publishing but we have not joined
        this.gossipsub.fanout.forEach((fanoutPeers, topic) => {
            // checks whether our peers are still in the topic and have a score above the publish threshold
            const topicPeers = this.gossipsub.topics.get(topic);
            fanoutPeers.forEach((id) => {
                if (!topicPeers?.has(id) ||
                    getScore(id) <
                        this.gossipsub._options.scoreThresholds.publishThreshold) {
                    fanoutPeers.delete(id);
                }
            });
            // do we need more peers?
            if (fanoutPeers.size < D) {
                const ineed = D - fanoutPeers.size;
                const peersSet = get_relay_peers_1.getRelayPeers(this.gossipsub, topic, ineed, (id) => {
                    // filter out existing fanout peers, direct peers, and peers with score above the publish threshold
                    return (!fanoutPeers.has(id) &&
                        !this.gossipsub.direct.has(id) &&
                        getScore(id) >=
                            this.gossipsub._options.scoreThresholds.publishThreshold);
                });
                peersSet.forEach((id) => {
                    fanoutPeers.add(id);
                });
            }
            // 2nd arg are fanout peers excluded from gossip.
            // We have already pushed messages to them, so its redundant to gossip IHAVEs
            this.gossipsub._emitGossip(topic, fanoutPeers);
        });
        // send coalesced GRAFT/PRUNE messages (will piggyback gossip)
        this.gossipsub._sendGraftPrune(toGraft, toPrune, noPX);
        // flush pending gossip that wasn't piggybacked above
        this.gossipsub._flush();
        // advance the message history window
        this.gossipsub.messageCache.shift();
        this.gossipsub.emit('gossipsub:heartbeat');
    }
}
exports.RelayHeartbeat = RelayHeartbeat;


/***/ }),

/***/ "./src/lib/waku_store/history_rpc.ts":
/*!*******************************************!*\
  !*** ./src/lib/waku_store/history_rpc.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HistoryRPC = exports.PageDirection = void 0;
const minimal_1 = __webpack_require__(/*! protobufjs/minimal */ "./node_modules/protobufjs/minimal.js");
const uuid_1 = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/index.js");
const proto = __importStar(__webpack_require__(/*! ../../proto/waku/v2/store */ "./src/proto/waku/v2/store.ts"));
var PageDirection;
(function (PageDirection) {
    PageDirection["BACKWARD"] = "backward";
    PageDirection["FORWARD"] = "forward";
})(PageDirection = exports.PageDirection || (exports.PageDirection = {}));
class HistoryRPC {
    constructor(proto) {
        this.proto = proto;
    }
    /**
     * Create History Query.
     */
    static createQuery(params) {
        const direction = directionToProto(params.pageDirection);
        const pagingInfo = {
            pageSize: params.pageSize,
            cursor: params.cursor,
            direction,
        };
        const contentFilters = params.contentTopics.map((contentTopic) => {
            return { contentTopic };
        });
        return new HistoryRPC({
            requestId: uuid_1.v4(),
            query: {
                pubSubTopic: params.pubSubTopic,
                contentFilters,
                pagingInfo,
                startTime: params.startTime,
                endTime: params.endTime,
            },
            response: undefined,
        });
    }
    static decode(bytes) {
        const res = proto.HistoryRPC.decode(minimal_1.Reader.create(bytes));
        return new HistoryRPC(res);
    }
    encode() {
        return proto.HistoryRPC.encode(this.proto).finish();
    }
    get query() {
        return this.proto.query;
    }
    get response() {
        return this.proto.response;
    }
}
exports.HistoryRPC = HistoryRPC;
function directionToProto(pageDirection) {
    switch (pageDirection) {
        case PageDirection.BACKWARD:
            return proto.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;
        case PageDirection.FORWARD:
            return proto.PagingInfo_Direction.DIRECTION_FORWARD;
        default:
            return proto.PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;
    }
}


/***/ }),

/***/ "./src/lib/waku_store/index.ts":
/*!*************************************!*\
  !*** ./src/lib/waku_store/index.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WakuStore = exports.PageDirection = exports.DefaultPageSize = exports.StoreCodec = void 0;
const debug_1 = __importDefault(__webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js"));
const it_concat_1 = __importDefault(__webpack_require__(/*! it-concat */ "./node_modules/it-concat/index.js"));
const it_length_prefixed_1 = __importDefault(__webpack_require__(/*! it-length-prefixed */ "./node_modules/it-length-prefixed/src/index.js"));
const it_pipe_1 = __importDefault(__webpack_require__(/*! it-pipe */ "./node_modules/it-pipe/index.js"));
const proto_1 = __webpack_require__(/*! ../../proto */ "./src/proto/index.ts");
const select_peer_1 = __webpack_require__(/*! ../select_peer */ "./src/lib/select_peer.ts");
const utils_1 = __webpack_require__(/*! ../utils */ "./src/lib/utils.ts");
const waku_1 = __webpack_require__(/*! ../waku */ "./src/lib/waku.ts");
const waku_message_1 = __webpack_require__(/*! ../waku_message */ "./src/lib/waku_message/index.ts");
const history_rpc_1 = __webpack_require__(/*! ./history_rpc */ "./src/lib/waku_store/history_rpc.ts");
Object.defineProperty(exports, "PageDirection", ({ enumerable: true, get: function () { return history_rpc_1.PageDirection; } }));
const dbg = debug_1.default('waku:store');
exports.StoreCodec = '/vac/waku/store/2.0.0-beta3';
exports.DefaultPageSize = 10;
/**
 * Implements the [Waku v2 Store protocol](https://rfc.vac.dev/spec/13/).
 */
class WakuStore {
    constructor(libp2p, options) {
        this.libp2p = libp2p;
        if (options?.pubSubTopic) {
            this.pubSubTopic = options.pubSubTopic;
        }
        else {
            this.pubSubTopic = waku_1.DefaultPubSubTopic;
        }
        this.decryptionKeys = new Map();
    }
    /**
     * Do a History Query to a Waku Store.
     *
     * @param contentTopics The content topics to pass to the query, leave empty to
     * retrieve all messages.
     *
     * @throws If not able to reach a Waku Store peer to query
     * or if an error is encountered when processing the reply.
     */
    async queryHistory(contentTopics, options) {
        let startTime, endTime;
        if (options?.timeFilter) {
            startTime = options.timeFilter.startTime.getTime() / 1000;
            endTime = options.timeFilter.endTime.getTime() / 1000;
        }
        const opts = Object.assign({
            pubSubTopic: this.pubSubTopic,
            pageDirection: history_rpc_1.PageDirection.BACKWARD,
            pageSize: exports.DefaultPageSize,
        }, options, {
            startTime,
            endTime,
        }, { contentTopics });
        dbg('Querying history with the following options', options);
        let peer;
        if (opts.peerId) {
            peer = this.libp2p.peerStore.get(opts.peerId);
            if (!peer)
                throw `Failed to retrieve connection details for provided peer in peer store: ${opts.peerId.toB58String()}`;
        }
        else {
            peer = this.randomPeer;
            if (!peer)
                throw 'Failed to find known peer that registers waku store protocol';
        }
        if (!peer.protocols.includes(exports.StoreCodec))
            throw `Peer does not register waku store protocol: ${peer.id.toB58String()}`;
        const connection = this.libp2p.connectionManager.get(peer.id);
        if (!connection)
            throw 'Failed to get a connection to the peer';
        const decryptionKeys = Array.from(this.decryptionKeys).map(([key, { method, contentTopics }]) => {
            return {
                key,
                method,
                contentTopics,
            };
        });
        // Add the decryption keys passed to this function against the
        // content topics also passed to this function.
        if (opts.decryptionKeys) {
            opts.decryptionKeys.forEach((key) => {
                decryptionKeys.push({
                    key: utils_1.hexToBuf(key),
                    contentTopics: contentTopics.length ? contentTopics : undefined,
                    method: undefined,
                });
            });
        }
        const messages = [];
        let cursor = undefined;
        while (true) {
            const { stream } = await connection.newStream(exports.StoreCodec);
            const queryOpts = Object.assign(opts, { cursor });
            const historyRpcQuery = history_rpc_1.HistoryRPC.createQuery(queryOpts);
            dbg('Querying store peer', connection.remoteAddr.toString());
            const res = await it_pipe_1.default([historyRpcQuery.encode()], it_length_prefixed_1.default.encode(), stream, it_length_prefixed_1.default.decode(), it_concat_1.default);
            const reply = history_rpc_1.HistoryRPC.decode(res.slice());
            const response = reply.response;
            if (!response) {
                throw 'History response misses response field';
            }
            if (response.error &&
                response.error === proto_1.HistoryResponse_Error.ERROR_INVALID_CURSOR) {
                throw 'History response contains an Error: INVALID CURSOR';
            }
            if (!response.messages || !response.messages.length) {
                // No messages left (or stored)
                console.log('No messages present in HistoryRPC response');
                return messages;
            }
            dbg(`${response.messages.length} messages retrieved for pubsub topic ${opts.pubSubTopic}`);
            const pageMessages = [];
            await Promise.all(response.messages.map(async (protoMsg) => {
                const msg = await waku_message_1.WakuMessage.decodeProto(protoMsg, decryptionKeys);
                if (msg) {
                    messages.push(msg);
                    pageMessages.push(msg);
                }
            }));
            let abort = false;
            if (opts.callback) {
                abort = Boolean(opts.callback(pageMessages));
            }
            const responsePageSize = response.pagingInfo?.pageSize;
            const queryPageSize = historyRpcQuery.query?.pagingInfo?.pageSize;
            if (abort ||
                // Response page size smaller than query, meaning this is the last page
                (responsePageSize && queryPageSize && responsePageSize < queryPageSize)) {
                return messages;
            }
            cursor = response.pagingInfo?.cursor;
            if (cursor === undefined) {
                // If the server does not return cursor then there is an issue,
                // Need to abort or we end up in an infinite loop
                console.log('No cursor returned by peer.');
                return messages;
            }
        }
    }
    /**
     * Register a decryption key to attempt decryption of messages received in any
     * subsequent [[queryHistory]] call. This can either be a private key for
     * asymmetric encryption or a symmetric key. [[WakuStore]] will attempt to
     * decrypt messages using both methods.
     *
     * Strings must be in hex format.
     */
    addDecryptionKey(key, options) {
        this.decryptionKeys.set(utils_1.hexToBuf(key), options ?? {});
    }
    /**
     * Delete a decryption key that was used to attempt decryption of messages
     * received in subsequent [[queryHistory]] calls.
     *
     * Strings must be in hex format.
     */
    deleteDecryptionKey(key) {
        this.decryptionKeys.delete(utils_1.hexToBuf(key));
    }
    /**
     * Returns known peers from the address book (`libp2p.peerStore`) that support
     * store protocol. Waku may or  may not be currently connected to these peers.
     */
    get peers() {
        return select_peer_1.getPeersForProtocol(this.libp2p, exports.StoreCodec);
    }
    /**
     * Returns a random peer that supports store protocol from the address
     * book (`libp2p.peerStore`). Waku may or  may not be currently connected to
     * this peer.
     */
    get randomPeer() {
        return select_peer_1.selectRandomPeer(this.peers);
    }
}
exports.WakuStore = WakuStore;


/***/ }),

/***/ "./src/proto/index.ts":
/*!****************************!*\
  !*** ./src/proto/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HistoryRPC = exports.HistoryResponse_Error = exports.HistoryResponse = exports.HistoryQuery = exports.ContentFilter = exports.PagingInfo_Direction = exports.PagingInfo = exports.Index = exports.WakuMessage = void 0;
var message_1 = __webpack_require__(/*! ./waku/v2/message */ "./src/proto/waku/v2/message.ts");
Object.defineProperty(exports, "WakuMessage", ({ enumerable: true, get: function () { return message_1.WakuMessage; } }));
var store_1 = __webpack_require__(/*! ./waku/v2/store */ "./src/proto/waku/v2/store.ts");
Object.defineProperty(exports, "Index", ({ enumerable: true, get: function () { return store_1.Index; } }));
Object.defineProperty(exports, "PagingInfo", ({ enumerable: true, get: function () { return store_1.PagingInfo; } }));
Object.defineProperty(exports, "PagingInfo_Direction", ({ enumerable: true, get: function () { return store_1.PagingInfo_Direction; } }));
Object.defineProperty(exports, "ContentFilter", ({ enumerable: true, get: function () { return store_1.ContentFilter; } }));
Object.defineProperty(exports, "HistoryQuery", ({ enumerable: true, get: function () { return store_1.HistoryQuery; } }));
Object.defineProperty(exports, "HistoryResponse", ({ enumerable: true, get: function () { return store_1.HistoryResponse; } }));
Object.defineProperty(exports, "HistoryResponse_Error", ({ enumerable: true, get: function () { return store_1.HistoryResponse_Error; } }));
Object.defineProperty(exports, "HistoryRPC", ({ enumerable: true, get: function () { return store_1.HistoryRPC; } }));


/***/ }),

/***/ "./src/proto/waku/v2/light_push.ts":
/*!*****************************************!*\
  !*** ./src/proto/waku/v2/light_push.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PushRPC = exports.PushResponse = exports.PushRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(__webpack_require__(/*! long */ "./node_modules/long/src/long.js"));
const minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ "./node_modules/protobufjs/minimal.js"));
const message_1 = __webpack_require__(/*! ../../waku/v2/message */ "./src/proto/waku/v2/message.ts");
exports.protobufPackage = 'waku.v2';
function createBasePushRequest() {
    return { pubSubTopic: '', message: undefined };
}
exports.PushRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pubSubTopic !== '') {
            writer.uint32(10).string(message.pubSubTopic);
        }
        if (message.message !== undefined) {
            message_1.WakuMessage.encode(message.message, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePushRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pubSubTopic = reader.string();
                    break;
                case 2:
                    message.message = message_1.WakuMessage.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pubSubTopic: isSet(object.pubSubTopic) ? String(object.pubSubTopic) : '',
            message: isSet(object.message)
                ? message_1.WakuMessage.fromJSON(object.message)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pubSubTopic !== undefined &&
            (obj.pubSubTopic = message.pubSubTopic);
        message.message !== undefined &&
            (obj.message = message.message
                ? message_1.WakuMessage.toJSON(message.message)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePushRequest();
        message.pubSubTopic = object.pubSubTopic ?? '';
        message.message =
            object.message !== undefined && object.message !== null
                ? message_1.WakuMessage.fromPartial(object.message)
                : undefined;
        return message;
    },
};
function createBasePushResponse() {
    return { isSuccess: false, info: '' };
}
exports.PushResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.isSuccess === true) {
            writer.uint32(8).bool(message.isSuccess);
        }
        if (message.info !== '') {
            writer.uint32(18).string(message.info);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePushResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.isSuccess = reader.bool();
                    break;
                case 2:
                    message.info = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            isSuccess: isSet(object.isSuccess) ? Boolean(object.isSuccess) : false,
            info: isSet(object.info) ? String(object.info) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.isSuccess !== undefined && (obj.isSuccess = message.isSuccess);
        message.info !== undefined && (obj.info = message.info);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePushResponse();
        message.isSuccess = object.isSuccess ?? false;
        message.info = object.info ?? '';
        return message;
    },
};
function createBasePushRPC() {
    return { requestId: '', request: undefined, response: undefined };
}
exports.PushRPC = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.requestId !== '') {
            writer.uint32(10).string(message.requestId);
        }
        if (message.request !== undefined) {
            exports.PushRequest.encode(message.request, writer.uint32(18).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.PushResponse.encode(message.response, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePushRPC();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestId = reader.string();
                    break;
                case 2:
                    message.request = exports.PushRequest.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.response = exports.PushResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? String(object.requestId) : '',
            request: isSet(object.request)
                ? exports.PushRequest.fromJSON(object.request)
                : undefined,
            response: isSet(object.response)
                ? exports.PushResponse.fromJSON(object.response)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.requestId !== undefined && (obj.requestId = message.requestId);
        message.request !== undefined &&
            (obj.request = message.request
                ? exports.PushRequest.toJSON(message.request)
                : undefined);
        message.response !== undefined &&
            (obj.response = message.response
                ? exports.PushResponse.toJSON(message.response)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePushRPC();
        message.requestId = object.requestId ?? '';
        message.request =
            object.request !== undefined && object.request !== null
                ? exports.PushRequest.fromPartial(object.request)
                : undefined;
        message.response =
            object.response !== undefined && object.response !== null
                ? exports.PushResponse.fromPartial(object.response)
                : undefined;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}


/***/ }),

/***/ "./src/proto/waku/v2/message.ts":
/*!**************************************!*\
  !*** ./src/proto/waku/v2/message.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WakuMessage = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(__webpack_require__(/*! long */ "./node_modules/long/src/long.js"));
const minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ "./node_modules/protobufjs/minimal.js"));
exports.protobufPackage = 'waku.v2';
function createBaseWakuMessage() {
    return {
        payload: undefined,
        contentTopic: undefined,
        version: undefined,
        timestamp: undefined,
    };
}
exports.WakuMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.payload !== undefined) {
            writer.uint32(10).bytes(message.payload);
        }
        if (message.contentTopic !== undefined) {
            writer.uint32(18).string(message.contentTopic);
        }
        if (message.version !== undefined) {
            writer.uint32(24).uint32(message.version);
        }
        if (message.timestamp !== undefined) {
            writer.uint32(33).double(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWakuMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.payload = reader.bytes();
                    break;
                case 2:
                    message.contentTopic = reader.string();
                    break;
                case 3:
                    message.version = reader.uint32();
                    break;
                case 4:
                    message.timestamp = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            payload: isSet(object.payload)
                ? bytesFromBase64(object.payload)
                : undefined,
            contentTopic: isSet(object.contentTopic)
                ? String(object.contentTopic)
                : undefined,
            version: isSet(object.version) ? Number(object.version) : undefined,
            timestamp: isSet(object.timestamp) ? Number(object.timestamp) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.payload !== undefined &&
            (obj.payload =
                message.payload !== undefined
                    ? base64FromBytes(message.payload)
                    : undefined);
        message.contentTopic !== undefined &&
            (obj.contentTopic = message.contentTopic);
        message.version !== undefined &&
            (obj.version = Math.round(message.version));
        message.timestamp !== undefined && (obj.timestamp = message.timestamp);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseWakuMessage();
        message.payload = object.payload ?? undefined;
        message.contentTopic = object.contentTopic ?? undefined;
        message.version = object.version ?? undefined;
        message.timestamp = object.timestamp ?? undefined;
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof __webpack_require__.g !== 'undefined')
        return __webpack_require__.g;
    throw 'Unable to locate global object';
})();
const atob = globalThis.atob ||
    ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa ||
    ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(''));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}


/***/ }),

/***/ "./src/proto/waku/v2/store.ts":
/*!************************************!*\
  !*** ./src/proto/waku/v2/store.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HistoryRPC = exports.HistoryResponse = exports.HistoryQuery = exports.ContentFilter = exports.PagingInfo = exports.Index = exports.historyResponse_ErrorToJSON = exports.historyResponse_ErrorFromJSON = exports.HistoryResponse_Error = exports.pagingInfo_DirectionToJSON = exports.pagingInfo_DirectionFromJSON = exports.PagingInfo_Direction = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(__webpack_require__(/*! long */ "./node_modules/long/src/long.js"));
const minimal_1 = __importDefault(__webpack_require__(/*! protobufjs/minimal */ "./node_modules/protobufjs/minimal.js"));
const message_1 = __webpack_require__(/*! ../../waku/v2/message */ "./src/proto/waku/v2/message.ts");
exports.protobufPackage = 'waku.v2';
var PagingInfo_Direction;
(function (PagingInfo_Direction) {
    PagingInfo_Direction[PagingInfo_Direction["DIRECTION_BACKWARD_UNSPECIFIED"] = 0] = "DIRECTION_BACKWARD_UNSPECIFIED";
    PagingInfo_Direction[PagingInfo_Direction["DIRECTION_FORWARD"] = 1] = "DIRECTION_FORWARD";
    PagingInfo_Direction[PagingInfo_Direction["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PagingInfo_Direction = exports.PagingInfo_Direction || (exports.PagingInfo_Direction = {}));
function pagingInfo_DirectionFromJSON(object) {
    switch (object) {
        case 0:
        case 'DIRECTION_BACKWARD_UNSPECIFIED':
            return PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED;
        case 1:
        case 'DIRECTION_FORWARD':
            return PagingInfo_Direction.DIRECTION_FORWARD;
        case -1:
        case 'UNRECOGNIZED':
        default:
            return PagingInfo_Direction.UNRECOGNIZED;
    }
}
exports.pagingInfo_DirectionFromJSON = pagingInfo_DirectionFromJSON;
function pagingInfo_DirectionToJSON(object) {
    switch (object) {
        case PagingInfo_Direction.DIRECTION_BACKWARD_UNSPECIFIED:
            return 'DIRECTION_BACKWARD_UNSPECIFIED';
        case PagingInfo_Direction.DIRECTION_FORWARD:
            return 'DIRECTION_FORWARD';
        default:
            return 'UNKNOWN';
    }
}
exports.pagingInfo_DirectionToJSON = pagingInfo_DirectionToJSON;
var HistoryResponse_Error;
(function (HistoryResponse_Error) {
    HistoryResponse_Error[HistoryResponse_Error["ERROR_NONE_UNSPECIFIED"] = 0] = "ERROR_NONE_UNSPECIFIED";
    HistoryResponse_Error[HistoryResponse_Error["ERROR_INVALID_CURSOR"] = 1] = "ERROR_INVALID_CURSOR";
    HistoryResponse_Error[HistoryResponse_Error["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(HistoryResponse_Error = exports.HistoryResponse_Error || (exports.HistoryResponse_Error = {}));
function historyResponse_ErrorFromJSON(object) {
    switch (object) {
        case 0:
        case 'ERROR_NONE_UNSPECIFIED':
            return HistoryResponse_Error.ERROR_NONE_UNSPECIFIED;
        case 1:
        case 'ERROR_INVALID_CURSOR':
            return HistoryResponse_Error.ERROR_INVALID_CURSOR;
        case -1:
        case 'UNRECOGNIZED':
        default:
            return HistoryResponse_Error.UNRECOGNIZED;
    }
}
exports.historyResponse_ErrorFromJSON = historyResponse_ErrorFromJSON;
function historyResponse_ErrorToJSON(object) {
    switch (object) {
        case HistoryResponse_Error.ERROR_NONE_UNSPECIFIED:
            return 'ERROR_NONE_UNSPECIFIED';
        case HistoryResponse_Error.ERROR_INVALID_CURSOR:
            return 'ERROR_INVALID_CURSOR';
        default:
            return 'UNKNOWN';
    }
}
exports.historyResponse_ErrorToJSON = historyResponse_ErrorToJSON;
function createBaseIndex() {
    return { digest: new Uint8Array(), receivedTime: 0, senderTime: 0 };
}
exports.Index = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.digest.length !== 0) {
            writer.uint32(10).bytes(message.digest);
        }
        if (message.receivedTime !== 0) {
            writer.uint32(17).double(message.receivedTime);
        }
        if (message.senderTime !== 0) {
            writer.uint32(25).double(message.senderTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIndex();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.digest = reader.bytes();
                    break;
                case 2:
                    message.receivedTime = reader.double();
                    break;
                case 3:
                    message.senderTime = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            digest: isSet(object.digest)
                ? bytesFromBase64(object.digest)
                : new Uint8Array(),
            receivedTime: isSet(object.receivedTime)
                ? Number(object.receivedTime)
                : 0,
            senderTime: isSet(object.senderTime) ? Number(object.senderTime) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.digest !== undefined &&
            (obj.digest = base64FromBytes(message.digest !== undefined ? message.digest : new Uint8Array()));
        message.receivedTime !== undefined &&
            (obj.receivedTime = message.receivedTime);
        message.senderTime !== undefined && (obj.senderTime = message.senderTime);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseIndex();
        message.digest = object.digest ?? new Uint8Array();
        message.receivedTime = object.receivedTime ?? 0;
        message.senderTime = object.senderTime ?? 0;
        return message;
    },
};
function createBasePagingInfo() {
    return { pageSize: 0, cursor: undefined, direction: 0 };
}
exports.PagingInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pageSize !== 0) {
            writer.uint32(8).uint64(message.pageSize);
        }
        if (message.cursor !== undefined) {
            exports.Index.encode(message.cursor, writer.uint32(18).fork()).ldelim();
        }
        if (message.direction !== 0) {
            writer.uint32(24).int32(message.direction);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePagingInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pageSize = longToNumber(reader.uint64());
                    break;
                case 2:
                    message.cursor = exports.Index.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.direction = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pageSize: isSet(object.pageSize) ? Number(object.pageSize) : 0,
            cursor: isSet(object.cursor) ? exports.Index.fromJSON(object.cursor) : undefined,
            direction: isSet(object.direction)
                ? pagingInfo_DirectionFromJSON(object.direction)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pageSize !== undefined &&
            (obj.pageSize = Math.round(message.pageSize));
        message.cursor !== undefined &&
            (obj.cursor = message.cursor ? exports.Index.toJSON(message.cursor) : undefined);
        message.direction !== undefined &&
            (obj.direction = pagingInfo_DirectionToJSON(message.direction));
        return obj;
    },
    fromPartial(object) {
        const message = createBasePagingInfo();
        message.pageSize = object.pageSize ?? 0;
        message.cursor =
            object.cursor !== undefined && object.cursor !== null
                ? exports.Index.fromPartial(object.cursor)
                : undefined;
        message.direction = object.direction ?? 0;
        return message;
    },
};
function createBaseContentFilter() {
    return { contentTopic: '' };
}
exports.ContentFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contentTopic !== '') {
            writer.uint32(10).string(message.contentTopic);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContentFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contentTopic = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contentTopic: isSet(object.contentTopic)
                ? String(object.contentTopic)
                : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.contentTopic !== undefined &&
            (obj.contentTopic = message.contentTopic);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseContentFilter();
        message.contentTopic = object.contentTopic ?? '';
        return message;
    },
};
function createBaseHistoryQuery() {
    return {
        pubSubTopic: undefined,
        contentFilters: [],
        pagingInfo: undefined,
        startTime: undefined,
        endTime: undefined,
    };
}
exports.HistoryQuery = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pubSubTopic !== undefined) {
            writer.uint32(18).string(message.pubSubTopic);
        }
        for (const v of message.contentFilters) {
            exports.ContentFilter.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.pagingInfo !== undefined) {
            exports.PagingInfo.encode(message.pagingInfo, writer.uint32(34).fork()).ldelim();
        }
        if (message.startTime !== undefined) {
            writer.uint32(41).double(message.startTime);
        }
        if (message.endTime !== undefined) {
            writer.uint32(49).double(message.endTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHistoryQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.pubSubTopic = reader.string();
                    break;
                case 3:
                    message.contentFilters.push(exports.ContentFilter.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.pagingInfo = exports.PagingInfo.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.startTime = reader.double();
                    break;
                case 6:
                    message.endTime = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pubSubTopic: isSet(object.pubSubTopic)
                ? String(object.pubSubTopic)
                : undefined,
            contentFilters: Array.isArray(object?.contentFilters)
                ? object.contentFilters.map((e) => exports.ContentFilter.fromJSON(e))
                : [],
            pagingInfo: isSet(object.pagingInfo)
                ? exports.PagingInfo.fromJSON(object.pagingInfo)
                : undefined,
            startTime: isSet(object.startTime) ? Number(object.startTime) : undefined,
            endTime: isSet(object.endTime) ? Number(object.endTime) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pubSubTopic !== undefined &&
            (obj.pubSubTopic = message.pubSubTopic);
        if (message.contentFilters) {
            obj.contentFilters = message.contentFilters.map((e) => e ? exports.ContentFilter.toJSON(e) : undefined);
        }
        else {
            obj.contentFilters = [];
        }
        message.pagingInfo !== undefined &&
            (obj.pagingInfo = message.pagingInfo
                ? exports.PagingInfo.toJSON(message.pagingInfo)
                : undefined);
        message.startTime !== undefined && (obj.startTime = message.startTime);
        message.endTime !== undefined && (obj.endTime = message.endTime);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseHistoryQuery();
        message.pubSubTopic = object.pubSubTopic ?? undefined;
        message.contentFilters =
            object.contentFilters?.map((e) => exports.ContentFilter.fromPartial(e)) || [];
        message.pagingInfo =
            object.pagingInfo !== undefined && object.pagingInfo !== null
                ? exports.PagingInfo.fromPartial(object.pagingInfo)
                : undefined;
        message.startTime = object.startTime ?? undefined;
        message.endTime = object.endTime ?? undefined;
        return message;
    },
};
function createBaseHistoryResponse() {
    return { messages: [], pagingInfo: undefined, error: 0 };
}
exports.HistoryResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.messages) {
            message_1.WakuMessage.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.pagingInfo !== undefined) {
            exports.PagingInfo.encode(message.pagingInfo, writer.uint32(26).fork()).ldelim();
        }
        if (message.error !== 0) {
            writer.uint32(32).int32(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHistoryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.messages.push(message_1.WakuMessage.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.pagingInfo = exports.PagingInfo.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.error = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: Array.isArray(object?.messages)
                ? object.messages.map((e) => message_1.WakuMessage.fromJSON(e))
                : [],
            pagingInfo: isSet(object.pagingInfo)
                ? exports.PagingInfo.fromJSON(object.pagingInfo)
                : undefined,
            error: isSet(object.error)
                ? historyResponse_ErrorFromJSON(object.error)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messages) {
            obj.messages = message.messages.map((e) => e ? message_1.WakuMessage.toJSON(e) : undefined);
        }
        else {
            obj.messages = [];
        }
        message.pagingInfo !== undefined &&
            (obj.pagingInfo = message.pagingInfo
                ? exports.PagingInfo.toJSON(message.pagingInfo)
                : undefined);
        message.error !== undefined &&
            (obj.error = historyResponse_ErrorToJSON(message.error));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseHistoryResponse();
        message.messages =
            object.messages?.map((e) => message_1.WakuMessage.fromPartial(e)) || [];
        message.pagingInfo =
            object.pagingInfo !== undefined && object.pagingInfo !== null
                ? exports.PagingInfo.fromPartial(object.pagingInfo)
                : undefined;
        message.error = object.error ?? 0;
        return message;
    },
};
function createBaseHistoryRPC() {
    return { requestId: '', query: undefined, response: undefined };
}
exports.HistoryRPC = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.requestId !== '') {
            writer.uint32(10).string(message.requestId);
        }
        if (message.query !== undefined) {
            exports.HistoryQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.HistoryResponse.encode(message.response, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHistoryRPC();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.requestId = reader.string();
                    break;
                case 2:
                    message.query = exports.HistoryQuery.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.response = exports.HistoryResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? String(object.requestId) : '',
            query: isSet(object.query)
                ? exports.HistoryQuery.fromJSON(object.query)
                : undefined,
            response: isSet(object.response)
                ? exports.HistoryResponse.fromJSON(object.response)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.requestId !== undefined && (obj.requestId = message.requestId);
        message.query !== undefined &&
            (obj.query = message.query
                ? exports.HistoryQuery.toJSON(message.query)
                : undefined);
        message.response !== undefined &&
            (obj.response = message.response
                ? exports.HistoryResponse.toJSON(message.response)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseHistoryRPC();
        message.requestId = object.requestId ?? '';
        message.query =
            object.query !== undefined && object.query !== null
                ? exports.HistoryQuery.fromPartial(object.query)
                : undefined;
        message.response =
            object.response !== undefined && object.response !== null
                ? exports.HistoryResponse.fromPartial(object.response)
                : undefined;
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof __webpack_require__.g !== 'undefined')
        return __webpack_require__.g;
    throw 'Unable to locate global object';
})();
const atob = globalThis.atob ||
    ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa ||
    ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(''));
}
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}


/***/ }),

/***/ "?18f2":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?0b7d":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?25ed":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?8131":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?3fc0":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?f9d4":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?7a28":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?e4dd":
/*!********************!*\
  !*** os (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?887c":
/*!********************!*\
  !*** ws (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?2961":
/*!*********************************!*\
  !*** @motrix/nat-api (ignored) ***!
  \*********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?7d1a":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?b254":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?ed1b":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?d17e":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?b3ef":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"js-waku": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = this["webpackChunkjswaku"] = this["webpackChunkjswaku"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors"], () => (__webpack_require__("./src/index.ts")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,