import { Multiaddr } from 'multiaddr';
/**
 * Setup discovery method used to bootstrap.
 *
 * Only one method is used. `default`, `peers`, `getPeers` and `enr` options are mutually exclusive.
 */
export interface BootstrapOptions {
    /**
     * The maximum of peers to connect to as part of the bootstrap process.
     *
     * @default [[Bootstrap.DefaultMaxPeers]]
     */
    maxPeers?: number;
    /**
     * Use the default discovery method. Overrides all other options but `maxPeers`
     *
     * The default discovery method is likely to change overtime as new discovery
     * methods are implemented.
     *
     * @default false
     */
    default?: boolean;
    /**
     * Multiaddrs of peers to connect to.
     */
    peers?: string[];
    /**
     * Getter that retrieve multiaddrs of peers to connect to.
     */
    getPeers?: () => Promise<string[] | Multiaddr[]>;
    /**
     * An EIP-1459 ENR Tree URL. For example:
     * "enrtree://AOFTICU2XWDULNLZGRMQS4RIZPAZEHYMV4FYHAPW563HNRAOERP7C@test.nodes.vac.dev"
     */
    enrUrl?: string;
}
/**
 * Parse options and expose function to return bootstrap peer addresses.
 */
export declare class Bootstrap {
    static DefaultMaxPeers: number;
    readonly getBootstrapPeers: (() => Promise<Multiaddr[]>) | undefined;
    constructor(opts: BootstrapOptions);
}
