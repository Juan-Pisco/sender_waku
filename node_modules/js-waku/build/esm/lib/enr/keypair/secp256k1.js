var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Buffer } from 'buffer';
import crypto from 'crypto';
import * as secp256k1 from 'secp256k1';
import { AbstractKeypair, KeypairType } from './types';
export function secp256k1PublicKeyToCompressed(publicKey) {
    if (publicKey.length === 64) {
        publicKey = Buffer.concat([Buffer.from([4]), publicKey]);
    }
    return Buffer.from(secp256k1.publicKeyConvert(publicKey, true));
}
export function secp256k1PublicKeyToFull(publicKey) {
    if (publicKey.length === 64) {
        return Buffer.concat([Buffer.from([4]), publicKey]);
    }
    return Buffer.from(secp256k1.publicKeyConvert(publicKey, false));
}
export function secp256k1PublicKeyToRaw(publicKey) {
    return Buffer.from(secp256k1.publicKeyConvert(publicKey, false).slice(1));
}
export const Secp256k1Keypair = class Secp256k1Keypair extends AbstractKeypair {
    constructor(privateKey, publicKey) {
        let pub = publicKey;
        if (pub) {
            pub = secp256k1PublicKeyToCompressed(pub);
        }
        super(privateKey, pub);
        this.type = KeypairType.secp256k1;
    }
    static generate() {
        return __awaiter(this, void 0, void 0, function* () {
            const privateKey = Buffer.from(yield randomBytes(32));
            const publicKey = secp256k1.publicKeyCreate(privateKey);
            return new Secp256k1Keypair(privateKey, Buffer.from(publicKey));
        });
    }
    privateKeyVerify(key = this._privateKey) {
        if (key) {
            return secp256k1.privateKeyVerify(key);
        }
        return true;
    }
    publicKeyVerify(key = this._publicKey) {
        if (key) {
            return secp256k1.publicKeyVerify(key);
        }
        return true;
    }
    sign(msg) {
        const { signature, recid } = secp256k1.ecdsaSign(msg, this.privateKey);
        return Buffer.concat([signature, Buffer.from([recid])]);
    }
    verify(msg, sig) {
        return secp256k1.ecdsaVerify(sig, msg, this.publicKey);
    }
};
function randomBytes(length) {
    if (typeof window !== 'undefined' && window && window.crypto) {
        const array = new Uint8Array(length);
        window.crypto.getRandomValues(array);
        return array;
    }
    else {
        return crypto.randomBytes(length);
    }
}
//# sourceMappingURL=secp256k1.js.map