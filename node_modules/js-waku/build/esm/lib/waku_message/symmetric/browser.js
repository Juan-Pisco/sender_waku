var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { IvSize } from './index';
const crypto = window.crypto || window.msCrypto;
const subtle = crypto.subtle || crypto.webkitSubtle;
const Algorithm = { name: 'AES-GCM', length: 128 };
if (subtle === undefined) {
    throw new Error('Failed to load Subtle CryptoAPI');
}
export function encrypt(iv, key, clearText) {
    return __awaiter(this, void 0, void 0, function* () {
        return subtle
            .importKey('raw', key, Algorithm, false, ['encrypt'])
            .then((cryptoKey) => subtle.encrypt(Object.assign({ iv }, Algorithm), cryptoKey, clearText))
            .then(Buffer.from);
    });
}
export function decrypt(iv, key, cipherText) {
    return __awaiter(this, void 0, void 0, function* () {
        return subtle
            .importKey('raw', key, Algorithm, false, ['decrypt'])
            .then((cryptoKey) => subtle.decrypt(Object.assign({ iv }, Algorithm), cryptoKey, cipherText))
            .then(Buffer.from);
    });
}
export function generateIv() {
    const iv = new Uint8Array(IvSize);
    crypto.getRandomValues(iv);
    return iv;
}
//# sourceMappingURL=browser.js.map