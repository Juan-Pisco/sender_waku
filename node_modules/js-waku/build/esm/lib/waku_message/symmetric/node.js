var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { createCipheriv, createDecipheriv, randomBytes } from 'crypto';
import { IvSize, TagSize } from './index';
const Algorithm = 'aes-256-gcm';
export function encrypt(iv, key, clearText) {
    return __awaiter(this, void 0, void 0, function* () {
        const cipher = createCipheriv(Algorithm, key, iv);
        const a = cipher.update(clearText);
        const b = cipher.final();
        const tag = cipher.getAuthTag();
        return Buffer.concat([a, b, tag]);
    });
}
export function decrypt(iv, key, data) {
    return __awaiter(this, void 0, void 0, function* () {
        const tagStart = data.length - TagSize;
        const cipherText = data.slice(0, tagStart);
        const tag = data.slice(tagStart);
        const decipher = createDecipheriv(Algorithm, key, iv);
        decipher.setAuthTag(tag);
        const a = decipher.update(cipherText);
        const b = decipher.final();
        return Buffer.concat([a, b]);
    });
}
export function generateIv() {
    return randomBytes(IvSize);
}
//# sourceMappingURL=node.js.map