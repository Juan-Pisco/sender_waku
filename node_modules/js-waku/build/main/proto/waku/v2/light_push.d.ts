import _m0 from 'protobufjs/minimal';
import { WakuMessage } from '../../waku/v2/message';
export declare const protobufPackage = "waku.v2";
export interface PushRequest {
    pubSubTopic: string;
    message: WakuMessage | undefined;
}
export interface PushResponse {
    isSuccess: boolean;
    info: string;
}
export interface PushRPC {
    requestId: string;
    request: PushRequest | undefined;
    response: PushResponse | undefined;
}
export declare const PushRequest: {
    encode(message: PushRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PushRequest;
    fromJSON(object: any): PushRequest;
    toJSON(message: PushRequest): unknown;
    fromPartial<I extends {
        pubSubTopic?: string | undefined;
        message?: {
            payload?: Uint8Array | undefined;
            contentTopic?: string | undefined;
            version?: number | undefined;
            timestamp?: number | undefined;
        } | undefined;
    } & {
        pubSubTopic?: string | undefined;
        message?: ({
            payload?: Uint8Array | undefined;
            contentTopic?: string | undefined;
            version?: number | undefined;
            timestamp?: number | undefined;
        } & {
            payload?: Uint8Array | undefined;
            contentTopic?: string | undefined;
            version?: number | undefined;
            timestamp?: number | undefined;
        } & Record<Exclude<keyof I["message"], keyof WakuMessage>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof PushRequest>, never>>(object: I): PushRequest;
};
export declare const PushResponse: {
    encode(message: PushResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PushResponse;
    fromJSON(object: any): PushResponse;
    toJSON(message: PushResponse): unknown;
    fromPartial<I extends {
        isSuccess?: boolean | undefined;
        info?: string | undefined;
    } & {
        isSuccess?: boolean | undefined;
        info?: string | undefined;
    } & Record<Exclude<keyof I, keyof PushResponse>, never>>(object: I): PushResponse;
};
export declare const PushRPC: {
    encode(message: PushRPC, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PushRPC;
    fromJSON(object: any): PushRPC;
    toJSON(message: PushRPC): unknown;
    fromPartial<I extends {
        requestId?: string | undefined;
        request?: {
            pubSubTopic?: string | undefined;
            message?: {
                payload?: Uint8Array | undefined;
                contentTopic?: string | undefined;
                version?: number | undefined;
                timestamp?: number | undefined;
            } | undefined;
        } | undefined;
        response?: {
            isSuccess?: boolean | undefined;
            info?: string | undefined;
        } | undefined;
    } & {
        requestId?: string | undefined;
        request?: ({
            pubSubTopic?: string | undefined;
            message?: {
                payload?: Uint8Array | undefined;
                contentTopic?: string | undefined;
                version?: number | undefined;
                timestamp?: number | undefined;
            } | undefined;
        } & {
            pubSubTopic?: string | undefined;
            message?: ({
                payload?: Uint8Array | undefined;
                contentTopic?: string | undefined;
                version?: number | undefined;
                timestamp?: number | undefined;
            } & {
                payload?: Uint8Array | undefined;
                contentTopic?: string | undefined;
                version?: number | undefined;
                timestamp?: number | undefined;
            } & Record<Exclude<keyof I["request"]["message"], keyof WakuMessage>, never>) | undefined;
        } & Record<Exclude<keyof I["request"], keyof PushRequest>, never>) | undefined;
        response?: ({
            isSuccess?: boolean | undefined;
            info?: string | undefined;
        } & {
            isSuccess?: boolean | undefined;
            info?: string | undefined;
        } & Record<Exclude<keyof I["response"], keyof PushResponse>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof PushRPC>, never>>(object: I): PushRPC;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
