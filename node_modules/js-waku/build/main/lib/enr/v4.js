"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENRKeyPair = exports.nodeId = exports.verify = exports.sign = exports.publicKey = exports.createPrivateKey = exports.hash = void 0;
const crypto_1 = __importDefault(require("crypto"));
const js_sha3_1 = require("js-sha3");
const secp256k1 = __importStar(require("secp256k1"));
const create_1 = require("./create");
function hash(input) {
    return Buffer.from(js_sha3_1.keccak256.arrayBuffer(input));
}
exports.hash = hash;
async function createPrivateKey() {
    return Buffer.from(await randomBytes(32));
}
exports.createPrivateKey = createPrivateKey;
function publicKey(privKey) {
    return Buffer.from(secp256k1.publicKeyCreate(privKey));
}
exports.publicKey = publicKey;
function sign(privKey, msg) {
    const { signature } = secp256k1.ecdsaSign(hash(msg), privKey);
    return Buffer.from(signature);
}
exports.sign = sign;
function verify(pubKey, msg, sig) {
    // Remove the recovery id if present (byte #65)
    return secp256k1.ecdsaVerify(sig.slice(0, 64), hash(msg), pubKey);
}
exports.verify = verify;
function nodeId(pubKey) {
    const uncompressedPubkey = secp256k1.publicKeyConvert(pubKey, false);
    return create_1.createNodeId(hash(uncompressedPubkey.slice(1)));
}
exports.nodeId = nodeId;
class ENRKeyPair {
    constructor(nodeId, privateKey, publicKey) {
        this.nodeId = nodeId;
        this.privateKey = privateKey;
        this.publicKey = publicKey;
    }
    static async create(privateKey) {
        if (privateKey) {
            if (!secp256k1.privateKeyVerify(privateKey)) {
                throw new Error('Invalid private key');
            }
        }
        const _privateKey = privateKey || (await createPrivateKey());
        const _publicKey = publicKey(_privateKey);
        const _nodeId = nodeId(_publicKey);
        return new ENRKeyPair(_nodeId, _privateKey, _publicKey);
    }
    sign(msg) {
        return sign(this.privateKey, msg);
    }
    verify(msg, sig) {
        return verify(this.publicKey, msg, sig);
    }
}
exports.ENRKeyPair = ENRKeyPair;
function randomBytes(length) {
    if (typeof window !== 'undefined' && window && window.crypto) {
        const array = new Uint8Array(length);
        window.crypto.getRandomValues(array);
        return array;
    }
    else {
        return crypto_1.default.randomBytes(length);
    }
}
//# sourceMappingURL=v4.js.map