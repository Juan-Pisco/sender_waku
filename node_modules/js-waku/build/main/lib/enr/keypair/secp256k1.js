"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secp256k1Keypair = exports.secp256k1PublicKeyToRaw = exports.secp256k1PublicKeyToFull = exports.secp256k1PublicKeyToCompressed = void 0;
const buffer_1 = require("buffer");
const crypto_1 = __importDefault(require("crypto"));
const secp256k1 = __importStar(require("secp256k1"));
const types_1 = require("./types");
function secp256k1PublicKeyToCompressed(publicKey) {
    if (publicKey.length === 64) {
        publicKey = buffer_1.Buffer.concat([buffer_1.Buffer.from([4]), publicKey]);
    }
    return buffer_1.Buffer.from(secp256k1.publicKeyConvert(publicKey, true));
}
exports.secp256k1PublicKeyToCompressed = secp256k1PublicKeyToCompressed;
function secp256k1PublicKeyToFull(publicKey) {
    if (publicKey.length === 64) {
        return buffer_1.Buffer.concat([buffer_1.Buffer.from([4]), publicKey]);
    }
    return buffer_1.Buffer.from(secp256k1.publicKeyConvert(publicKey, false));
}
exports.secp256k1PublicKeyToFull = secp256k1PublicKeyToFull;
function secp256k1PublicKeyToRaw(publicKey) {
    return buffer_1.Buffer.from(secp256k1.publicKeyConvert(publicKey, false).slice(1));
}
exports.secp256k1PublicKeyToRaw = secp256k1PublicKeyToRaw;
const Secp256k1Keypair = class Secp256k1Keypair extends types_1.AbstractKeypair {
    constructor(privateKey, publicKey) {
        let pub = publicKey;
        if (pub) {
            pub = secp256k1PublicKeyToCompressed(pub);
        }
        super(privateKey, pub);
        this.type = types_1.KeypairType.secp256k1;
    }
    static async generate() {
        const privateKey = buffer_1.Buffer.from(await randomBytes(32));
        const publicKey = secp256k1.publicKeyCreate(privateKey);
        return new Secp256k1Keypair(privateKey, buffer_1.Buffer.from(publicKey));
    }
    privateKeyVerify(key = this._privateKey) {
        if (key) {
            return secp256k1.privateKeyVerify(key);
        }
        return true;
    }
    publicKeyVerify(key = this._publicKey) {
        if (key) {
            return secp256k1.publicKeyVerify(key);
        }
        return true;
    }
    sign(msg) {
        const { signature, recid } = secp256k1.ecdsaSign(msg, this.privateKey);
        return buffer_1.Buffer.concat([signature, buffer_1.Buffer.from([recid])]);
    }
    verify(msg, sig) {
        return secp256k1.ecdsaVerify(sig, msg, this.publicKey);
    }
};
exports.Secp256k1Keypair = Secp256k1Keypair;
function randomBytes(length) {
    if (typeof window !== 'undefined' && window && window.crypto) {
        const array = new Uint8Array(length);
        window.crypto.getRandomValues(array);
        return array;
    }
    else {
        return crypto_1.default.randomBytes(length);
    }
}
//# sourceMappingURL=secp256k1.js.map