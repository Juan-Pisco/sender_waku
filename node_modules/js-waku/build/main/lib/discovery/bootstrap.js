"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bootstrap = void 0;
const debug_1 = __importDefault(require("debug"));
const multiaddr_1 = require("multiaddr");
const dns_1 = require("./dns");
const index_1 = require("./index");
const dbg = debug_1.default('waku:discovery:bootstrap');
/**
 * Parse options and expose function to return bootstrap peer addresses.
 */
class Bootstrap {
    constructor(opts) {
        const maxPeers = opts.maxPeers ?? Bootstrap.DefaultMaxPeers;
        if (opts.default) {
            dbg('Use hosted list of peers.');
            this.getBootstrapPeers = index_1.getNodesFromHostedJson.bind({}, undefined, undefined, maxPeers);
        }
        else if (opts.peers !== undefined && opts.peers.length > 0) {
            dbg('Use provided list of peers.');
            const allPeers = opts.peers.map((node) => new multiaddr_1.Multiaddr(node));
            const peers = index_1.getPseudoRandomSubset(allPeers, maxPeers);
            this.getBootstrapPeers = () => Promise.resolve(peers);
        }
        else if (typeof opts.getPeers === 'function') {
            dbg('Bootstrap: Use provided getPeers function.');
            const getPeers = opts.getPeers;
            this.getBootstrapPeers = async () => {
                const allPeers = await getPeers();
                return index_1.getPseudoRandomSubset(allPeers, maxPeers).map((node) => new multiaddr_1.Multiaddr(node));
            };
        }
        else if (opts.enrUrl) {
            const enrUrl = opts.enrUrl;
            dbg('Use provided EIP-1459 ENR Tree URL.');
            const dns = dns_1.DnsNodeDiscovery.dnsOverHttp();
            this.getBootstrapPeers = async () => {
                const enrs = await dns.getPeers(maxPeers, [enrUrl]);
                dbg(`Found ${enrs.length} peers`);
                return enrs.map((enr) => enr.getFullMultiaddrs()).flat();
            };
        }
        else {
            dbg('No bootstrap method specified, no peer will be returned');
            this.getBootstrapPeers = undefined;
        }
    }
}
exports.Bootstrap = Bootstrap;
Bootstrap.DefaultMaxPeers = 1;
//# sourceMappingURL=bootstrap.js.map